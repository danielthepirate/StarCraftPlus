include "TriggerLibs/NativeLib"
include "LibPPRL_h"

include "LibSCPL_h"

//--------------------------------------------------------------------------------------------------
// Library: StarCraftPlus Lib
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libSCPL_InitLibraries () {
    libNtve_InitVariables();
    libPPRL_InitVariables();
}

// Variable Initialization
bool libSCPL_InitVariables_completed = false;

void libSCPL_InitVariables () {
    int init_i;
    int init_i1;
    int init_j1;

    if (libSCPL_InitVariables_completed) {
        return;
    }

    libSCPL_InitVariables_completed = true;

    for (init_i1 = 0; init_i1 <= libSCPL_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libSCPL_gv_upgradeNotifications.lv_itemIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libSCPL_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libSCPL_gv_upgradeNotifications.lv_itemName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libSCPL_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libSCPL_gv_upgradeNotifications.lv_itemPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libSCPL_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libSCPL_gv_upgradeNotifications.lv_itemProgressBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libSCPL_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libSCPL_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libSCPL_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 16; init_j1 += 1) {
            libSCPL_gv_upgradeNotifications.lv_timerDestruction[init_i1][init_j1] = TimerCreate();
        }
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libSCPL_gv_upgradeNotifications.lv_slotLastUsed[init_i1] = -1;
    }
    libSCPL_gv_labels.lv_iconSize = 50;
    libSCPL_gv_labels.lv_iconSizeEgg = 35;
    libSCPL_gv_labels.lv_iconSizeTechLab = 45;
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libSCPL_gv_labels.lv_colorStrings[init_i1] = "";
    }
    libSCPL_gv_labelsObs = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));
    libSCPL_gv_constants.lv_spendBufferMinerals = 1000;
    libSCPL_gv_constants.lv_spendBufferVespene = 1000;
    libSCPL_gv_constants.lv_spendTickIncrement = 0.4375;
    libSCPL_gv_constants.lv_spendTickIncrementBoosted = 0.4375;
    libSCPL_gv_constants.lv_townHallResourceRadius = 15.0;
    libSCPL_gv_constants.lv_gameSpeedFactor = 1.0;
    libSCPL_gv_constants.lv_harvesterIncomeMinerals = 0.625;
    libSCPL_gv_constants.lv_harvesterIncomeMineralsRich = 0.9375;
    libSCPL_gv_constants.lv_harvesterIncomeMineralsMULE = 2.5;
    libSCPL_gv_constants.lv_harvesterIncomeVespene = 0.875;
    libSCPL_gv_constants.lv_harvesterAutoCap = 66;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libSCPL_gv_player[init_i].lv_globalZerg_AutoCreepNodeTargets = UnitGroupEmpty();
        for (init_i1 = 0; init_i1 <= 256; init_i1 += 1) {
            libSCPL_gv_player[init_i].lv_globalZerg_AutoCreepLineage[init_i1].lv_zzUnitGroup = UnitGroupEmpty();
        }
        libSCPL_gv_player[init_i].lv_globalTerran_AutoWallToggle = true;
        libSCPL_gv_player[init_i].lv_globalZerg_CreepSpreadToggle = true;
        libSCPL_gv_player[init_i].lv_globalZerg_LarvaSpawnToggle = true;
        libSCPL_gv_player[init_i].lv_globalZerg_DroneMorphToggle = true;
        libSCPL_gv_player[init_i].lv_global_ShowTips = true;
        for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
            libSCPL_gv_player[init_i].lv_globalRallyGroup[init_i1] = UnitGroupEmpty();
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libSCPL_gv_player[init_i].lv_controlGroup[init_i1] = UnitGroupEmpty();
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libSCPL_gv_player[init_i].lv_controlGroupTip[init_i1] = c_invalidDialogId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libSCPL_gv_player[init_i].lv_controlGroupJumpTimer[init_i1] = TimerCreate();
        }
        for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
            libSCPL_gv_player[init_i].lv_controlGroupAutoAdd[init_i1] = true;
        }
        libSCPL_gv_player[init_i].lv_resourceTip = c_invalidDialogId;
        libSCPL_gv_player[init_i].lv_isInTargetingMode = true;
    }
    libSCPL_gv_uI.lv_resourceMineralSpend = c_invalidDialogControlId;
    libSCPL_gv_uI.lv_resourceVespeneSpend = c_invalidDialogControlId;
    libSCPL_gv_uI.lv_resourceMineralSpendAttention = c_invalidDialogControlId;
    libSCPL_gv_uI.lv_resourceVespeneSpendAttention = c_invalidDialogControlId;
    libSCPL_gv_uI.lv_consoleActiveCommandCard = c_invalidDialogControlId;
    libSCPL_gv_uI.lv_gameOptionGameTips = c_invalidDialogControlId;
    libSCPL_gv_uI.lv_consoleRallyCommandCard = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libSCPL_gv_uI.lv_consoleControlGroupButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libSCPL_gv_uI.lv_consoleControlGroupButtonAdd[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libSCPL_gv_uI.lv_consoleControlGroupButtonAssign[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libSCPL_gv_uI.lv_consoleControlGroupIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libSCPL_gv_uI.lv_consoleControlGroupLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libSCPL_gv_uI.lv_playerProductionTab[init_i1] = c_invalidDialogControlId;
    }
}

// Presets
string libSCPL_ge_GenericEvent_Ident (int lp_val) {
         if (lp_val == libSCPL_ge_GenericEvent_ResourceSpend) { return "ResourceSpend"; }
    else if (lp_val == libSCPL_ge_GenericEvent_TownHallSaturated) { return "TownHallSaturated"; }
    else if (lp_val == libSCPL_ge_GenericEvent_HarvesterUpdate) { return "HarvesterUpdate"; }
    else if (lp_val == libSCPL_ge_GenericEvent_ControlGroupComposition) { return "ControlGroupComposition"; }
    else if (lp_val == libSCPL_ge_GenericEvent_TerranAddonTestReactor) { return "TerranAddonTestReactor"; }
    else if (lp_val == libSCPL_ge_GenericEvent_TerranAddonTestTechLab) { return "TerranAddonTestTechLab"; }
    return null;
}

string libSCPL_ge_GenericParameter_Ident (int lp_val) {
         if (lp_val == libSCPL_ge_GenericParameter_TriggeringPlayer) { return "TriggeringPlayer"; }
    else if (lp_val == libSCPL_ge_GenericParameter_ControlGroup) { return "ControlGroup"; }
    return null;
}

// Functions
unit libSCPL_gf_UnitGroupBestUnit (unitgroup lp_unitGroup) {
    unitgroup auto57522E2A_g;
    int auto57522E2A_u;
    unitgroup auto3CF2CBB0_g;
    int auto3CF2CBB0_u;

    // Variable Declarations
    unitgroup lv_unitGroupActual;
    unitgroup lv_unitGroupIdle;
    unitgroup lv_unitGroupExclude;
    unit lv_bestUnit;
    unit lv_unit;

    // Variable Initialization
    lv_unitGroupActual = UnitGroupEmpty();
    lv_unitGroupIdle = UnitGroupEmpty();
    lv_unitGroupExclude = UnitGroupEmpty();

    // Implementation
    lv_unitGroupActual = lp_unitGroup;
    auto57522E2A_g = lv_unitGroupActual;
    auto57522E2A_u = 1;
    for ( ; auto57522E2A_u <= UnitGroupCount(auto57522E2A_g, c_unitCountAll) ; auto57522E2A_u += BoolToInt(lv_unit == UnitGroupUnit(auto57522E2A_g, auto57522E2A_u)) ) {
        lv_unit = UnitGroupUnit(auto57522E2A_g, auto57522E2A_u);
        if (((libNtve_gf_UnitIsUnderConstruction(lv_unit) == true) || (UnitIsAlive(lv_unit) == false) || (libSCPL_gf_UnitMorphProgress(lv_unit) != 0.0) || ((UnitGetType(lv_unit) == "Barracks") && (UnitHasBehavior2(lv_unit, "GameUCBBarracksAddon") == false)) || ((UnitGetType(lv_unit) == "Factory") && (UnitHasBehavior2(lv_unit, "GameUCBFactoryAddon") == false)) || ((UnitGetType(lv_unit) == "Starport") && (UnitHasBehavior2(lv_unit, "GameUCBStarportAddon") == false)))) {
            UnitGroupAdd(lv_unitGroupExclude, lv_unit);
        }
    }
    UnitGroupRemoveUnitGroup(lv_unitGroupActual, lv_unitGroupExclude);
    lv_unitGroupExclude = UnitGroupEmpty();
    lv_unitGroupIdle = UnitGroupCopy(lv_unitGroupActual);
    auto3CF2CBB0_g = lv_unitGroupIdle;
    auto3CF2CBB0_u = 1;
    for ( ; auto3CF2CBB0_u <= UnitGroupCount(auto3CF2CBB0_g, c_unitCountAll) ; auto3CF2CBB0_u += BoolToInt(lv_unit == UnitGroupUnit(auto3CF2CBB0_g, auto3CF2CBB0_u)) ) {
        lv_unit = UnitGroupUnit(auto3CF2CBB0_g, auto3CF2CBB0_u);
        if ((UnitOrderCount(lv_unit) > 0)) {
            UnitGroupAdd(lv_unitGroupExclude, lv_unit);
        }
    }
    UnitGroupRemoveUnitGroup(lv_unitGroupIdle, lv_unitGroupExclude);
    if ((UnitGroupCount(lv_unitGroupIdle, c_unitCountAlive) >= 1)) {
        lv_bestUnit = UnitGroupUnit(lv_unitGroupIdle, 1);
        return lv_bestUnit;
    }
    lv_bestUnit = UnitGroupUnit(lv_unitGroupActual, 1);
    return lv_bestUnit;
}

void libSCPL_gf_DebugSpawnBuildingsZerg (int lp_playerIndex) {
    // Variable Declarations
    fixed lv_distance;

    // Variable Initialization

    // Implementation
    lv_distance = 12.0;
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "Lair", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "Hive", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "SpawningPool", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "EvolutionChamber", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "CreepTumorBurrowed", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "RoachWarren", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "BanelingNest", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "SporeCrawler", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "SpineCrawler", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "CreepTumorBurrowed", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "HydraliskDen", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "LurkerDenMP", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "Spire", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "GreaterSpire", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "CreepTumorBurrowed", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "InfestationPit", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "UltraliskCavern", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "NydusNetwork", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "CreepTumorBurrowed", lv_distance);
}

void libSCPL_gf_DebugSpawnBuildingsTerran (int lp_playerIndex) {
    // Variable Declarations
    fixed lv_distance;
    fixed lv_distance2;

    // Variable Initialization

    // Implementation
    lv_distance = 12.0;
    lv_distance = 16.0;
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "SupplyDepot", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "Barracks", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "EngineeringBay", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "Factory", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "SensorTower", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "Bunker", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "MissileTurret", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "Starport", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "FusionCore", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "GhostAcademy", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "OrbitalCommand", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "PlanetaryFortress", lv_distance);
    libSCPL_gf_DebugCreateUnitNearBase(lp_playerIndex, "TechLab", lv_distance2);
}

unit libSCPL_gf_DebugPlayerUnit (int lp_playerIndex, string lp_unitType) {
    // Implementation
    return UnitGroupUnit(UnitGroup(lp_unitType, lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
}

unit libSCPL_gf_DebugSelectedUnit (int lp_playerIndex) {
    // Implementation
    return UnitGroupUnit(UnitGroupSelected(lp_playerIndex), 1);
}

void libSCPL_gf_DebugCreateUnitNearBase (int lp_playerIndex, string lp_unitType, fixed lp_offset) {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, lp_playerIndex, PointWithOffsetPolar(PlayerStartLocation(lp_playerIndex), lp_offset, AngleBetweenPoints(PlayerStartLocation(lp_playerIndex), RegionGetCenter(RegionEntireMap()))));
}

void libSCPL_gf_DebugCreateUnitNearBaseEnemies (int lp_playerIndex, int lp_enemyIndex, string lp_unitType, fixed lp_offset) {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, lp_enemyIndex, PointWithOffsetPolar(PlayerStartLocation(lp_playerIndex), lp_offset, AngleBetweenPoints(PlayerStartLocation(lp_playerIndex), RegionGetCenter(RegionEntireMap()))));
}

void libSCPL_gf_SCPBankInitialize () {
    playergroup autoDF98E9B8_g;
    int autoDF98E9B8_p;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_globalCaster;

    // Variable Initialization

    // Implementation
    autoDF98E9B8_g = PlayerGroupActive(); 
    autoDF98E9B8_p = 1;
    for ( ; autoDF98E9B8_p <= PlayerGroupCount(autoDF98E9B8_g) ; autoDF98E9B8_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(autoDF98E9B8_g, autoDF98E9B8_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoDF98E9B8_g, autoDF98E9B8_p);
        BankLoad("SCPBank", lv_playerIndex);
        libSCPL_gv_player[lv_playerIndex].lv_bank = BankLastCreated();
        libSCPL_gv_player[lv_playerIndex].lv_global_ShowTips = libSCPL_gf_SCPBankOption(("OptionShowTips"), lv_playerIndex);
        libSCPL_gv_player[lv_playerIndex].lv_globalTerran_AutoWallToggle = libSCPL_gf_SCPBankOption(("GlobalToggleTerranAutoWall"), lv_playerIndex);
        libSCPL_gv_player[lv_playerIndex].lv_globalZerg_CreepSpreadToggle = libSCPL_gf_SCPBankOption(("GlobalToggleZergCreepSpread"), lv_playerIndex);
        libSCPL_gv_player[lv_playerIndex].lv_globalZerg_DroneMorphToggle = libSCPL_gf_SCPBankOption(("GlobalToggleZergDroneMorph"), lv_playerIndex);
        libSCPL_gv_player[lv_playerIndex].lv_globalZerg_LarvaSpawnToggle = libSCPL_gf_SCPBankOption(("GlobalToggleZergLarvaInject"), lv_playerIndex);
        if ((PlayerRace(lv_playerIndex) == "Terr")) {
            libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[1] = libSCPL_gf_SCPBankOption(("GlobalRallyTerrT1"), lv_playerIndex);
            libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[2] = libSCPL_gf_SCPBankOption(("GlobalRallyTerrT2"), lv_playerIndex);
            libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[2] = libSCPL_gf_SCPBankOption(("GlobalRallyTerrT3"), lv_playerIndex);
        }
        else if ((PlayerRace(lv_playerIndex) == "Prot")) {
            libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[1] = libSCPL_gf_SCPBankOption(("GlobalRallyProtT1"), lv_playerIndex);
            libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[2] = libSCPL_gf_SCPBankOption(("GlobalRallyProtT2"), lv_playerIndex);
            libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[2] = libSCPL_gf_SCPBankOption(("GlobalRallyProtT3"), lv_playerIndex);
        }
        else if ((PlayerRace(lv_playerIndex) == "Zerg")) {
            libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[1] = libSCPL_gf_SCPBankOption(("GlobalRallyZergT1"), lv_playerIndex);
            libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[2] = libSCPL_gf_SCPBankOption(("GlobalRallyZergT2"), lv_playerIndex);
            libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[2] = libSCPL_gf_SCPBankOption(("GlobalRallyZergT3"), lv_playerIndex);
        }
        if ((PlayerRace(lv_playerIndex) == "Terr") && (libSCPL_gv_player[lv_playerIndex].lv_globalTerran_AutoWallToggle == false)) {
            lv_globalCaster = UnitGroupUnit(UnitGroup("SdbTAbils1", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
            UnitCreateEffectUnit(lv_globalCaster, "AutoWallToggleUCBOff", lv_globalCaster);
        }
        if ((PlayerRace(lv_playerIndex) == "Zerg") && (libSCPL_gv_player[lv_playerIndex].lv_globalZerg_CreepSpreadToggle == false)) {
            lv_globalCaster = UnitGroupUnit(UnitGroup("SdbZAbils1", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
            UnitCreateEffectUnit(lv_globalCaster, "UCBAutoCreepSpreadToggleOff", lv_globalCaster);
        }
        if ((PlayerRace(lv_playerIndex) == "Zerg") && (libSCPL_gv_player[lv_playerIndex].lv_globalZerg_DroneMorphToggle == false)) {
            lv_globalCaster = UnitGroupUnit(UnitGroup("SdbZAbils1", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        }
        if ((PlayerRace(lv_playerIndex) == "Zerg") && (libSCPL_gv_player[lv_playerIndex].lv_globalZerg_LarvaSpawnToggle == false)) {
            lv_globalCaster = UnitGroupUnit(UnitGroup("SdbZAbils1", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
            UnitCreateEffectUnit(lv_globalCaster, "UCBSpawnLarvaToggleOff", lv_globalCaster);
        }
        lv_globalCaster = UnitGroupUnit(UnitGroup("GameGlobalRallyCaster", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        if ((libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[1] == false)) {
            UnitCreateEffectUnit(lv_globalCaster, "UCBGlobalRallyT1Off", lv_globalCaster);
        }
        if ((libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[2] == false)) {
            UnitCreateEffectUnit(lv_globalCaster, "UCBGlobalRallyT2Off", lv_globalCaster);
        }
        if ((libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[3] == false)) {
            UnitCreateEffectUnit(lv_globalCaster, "UCBGlobalRallyT3Off", lv_globalCaster);
        }
        if ((libSCPL_gv_player[lv_playerIndex].lv_global_ShowTips == true)) {
            libNtve_gf_SetDialogItemChecked(libSCPL_gv_uI.lv_gameOptionGameTips, true, PlayerGroupSingle(lv_playerIndex));
        }
    }
}

void libSCPL_gf_SCPBankOptionSave (string lp_bankOptionInstance, int lp_playerIndex, bool lp_bankOptionSetting) {
    // Variable Declarations
    bank lv_bank;

    // Variable Initialization

    // Implementation
    lv_bank = libSCPL_gv_player[lp_playerIndex].lv_bank;
    if ((lp_bankOptionSetting == true)) {
        BankValueSetFromInt(lv_bank, "Options", lp_bankOptionInstance, 0);
    }
    else {
        BankValueSetFromInt(lv_bank, "Options", lp_bankOptionInstance, 1);
    }
    BankSave(lv_bank);
}

bool libSCPL_gf_SCPBankOption (string lp_bankOptionInstance, int lp_playerIndex) {
    // Variable Declarations
    bank lv_bank;
    int lv_bankOptionSetting;

    // Variable Initialization

    // Implementation
    lv_bank = libSCPL_gv_player[lp_playerIndex].lv_bank;
    lv_bankOptionSetting = BankValueGetAsInt(lv_bank, "Options", lp_bankOptionInstance);
    if ((lv_bankOptionSetting == 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libSCPL_gf_SCPBankControlGroupToggle (int lp_playerIndex, int lp_controlIndex, bool lp_bankOptionSetting) {
    // Variable Declarations
    bool lv_bankOptionSetting;
    string lv_bankOptionInstance;

    // Variable Initialization
    lv_bankOptionInstance = "";

    // Implementation
    lv_bankOptionInstance = ("GlobalRally" + (PlayerRace(lp_playerIndex)) + "T" + IntToString(lp_controlIndex));
    libSCPL_gf_SCPBankOptionSave(lv_bankOptionInstance, lp_playerIndex, lp_bankOptionSetting);
}

void libSCPL_gf_InitializeSpendOverTime () {
    playergroup auto2BCF2D93_g;
    int auto2BCF2D93_p;

    // Variable Declarations
    playergroup lv_gamePlayers;
    int lv_playerIndex;

    // Variable Initialization
    lv_gamePlayers = PlayerGroupEmpty();

    // Implementation
    lv_gamePlayers = PlayerGroupActive();
    UISetResourceVisible(lv_gamePlayers, c_resourceTypeMinerals, false);
    UISetResourceVisible(lv_gamePlayers, c_resourceTypeVespene, false);
    UISetResourceVisible(lv_gamePlayers, c_resourceTypeTerrazine, true);
    UISetResourceVisible(lv_gamePlayers, c_resourceTypeCustom, true);
    auto2BCF2D93_g = lv_gamePlayers; 
    auto2BCF2D93_p = 1;
    for ( ; auto2BCF2D93_p <= PlayerGroupCount(auto2BCF2D93_g) ; auto2BCF2D93_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto2BCF2D93_g, auto2BCF2D93_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto2BCF2D93_g, auto2BCF2D93_p);
        PlayerOptionOverride(lv_playerIndex, "simplecommandcard", "0");
        PlayerModifyPropertyInt(lv_playerIndex, c_playerPropMinerals, c_playerPropOperAdd, libSCPL_gv_constants.lv_spendBufferMinerals);
        PlayerModifyPropertyInt(lv_playerIndex, c_playerPropVespene, c_playerPropOperAdd, libSCPL_gv_constants.lv_spendBufferVespene);
        PlayerScoreValueSetFromInt(lv_playerIndex, "MineralsCollected", 0);
        PlayerScoreValueSetFromInt(lv_playerIndex, "VespeneCollected", 0);
        PlayerModifyPropertyInt(lv_playerIndex, c_playerPropTerrazine, c_playerPropOperSetTo, FixedToInt(libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex)));
        PlayerModifyPropertyInt(lv_playerIndex, c_playerPropCustom, c_playerPropOperSetTo, FixedToInt(libSCPL_gf_PlayerAvailableVespene(lv_playerIndex)));
        libSCPL_gf_GenericEventResourceSpendChanges(lv_playerIndex);
    }
}

void libSCPL_gf_PlayerResourcesAdd (int lp_playerIndex, fixed lp_minerals, fixed lp_vespene) {
    // Implementation
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropMinerals, c_playerPropOperAdd, lp_minerals);
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropVespene, c_playerPropOperAdd, lp_vespene);
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropTerrazine, c_playerPropOperAdd, lp_minerals);
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropCustom, c_playerPropOperAdd, lp_vespene);
}

void libSCPL_gf_PlayerResourcesReset (int lp_playerIndex) {
    // Implementation
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropMinerals, c_playerPropOperSetTo, libSCPL_gv_constants.lv_spendBufferMinerals);
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropVespene, c_playerPropOperSetTo, libSCPL_gv_constants.lv_spendBufferVespene);
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropTerrazine, c_playerPropOperSetTo, 0.0);
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropCustom, c_playerPropOperSetTo, 0.0);
}

void libSCPL_gf_PlayerResourcesSubtract (int lp_playerIndex, fixed lp_minerals, fixed lp_vespene) {
    // Implementation
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropMinerals, c_playerPropOperSubtract, lp_minerals);
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropVespene, c_playerPropOperSubtract, lp_vespene);
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropTerrazine, c_playerPropOperSubtract, lp_minerals);
    PlayerModifyPropertyFixed(lp_playerIndex, c_playerPropCustom, c_playerPropOperSubtract, lp_vespene);
}

void libSCPL_gf_UnitStatusPauseProgressBar (unit lp_statusUnit, unit lp_progressUnit, int lp_progressIndex, bool lp_pause) {
    // Variable Declarations
    actor lv_unitActorMain;
    int lv_unitStatusProgress;
    int lv_progressIndexActual;

    // Variable Initialization
    lv_unitStatusProgress = c_invalidDialogControlId;

    // Implementation
    lv_progressIndexActual = lp_progressIndex;
    if ((DataTableGetString(true, (IntToString(UnitGetTag(lp_statusUnit)) + "-slot2")) != "")) {
        lv_progressIndexActual += 1;
    }
    lv_unitActorMain = libNtve_gf_MainActorofUnit(lp_statusUnit);
    DialogControlHookupUnitStatus(c_triggerControlTypePanel, ("StatusIcon" + IntToString(lv_progressIndexActual)), lp_statusUnit);
    lv_unitStatusProgress = DialogControlLastCreated();
    if ((lp_pause == true)) {
        libSCPL_gf_GenericEventResourceSpendChanges(UnitGetOwner(lp_progressUnit));
        UnitSetProgressStage(lp_progressUnit, lp_progressIndex, c_unitProgressStagePause);
        DialogControlSetAnimationState(lv_unitStatusProgress, PlayerGroupSingle(UnitGetOwner(lp_statusUnit)), "ProgressState", "Paused");
    }
    else {
        libSCPL_gf_GenericEventResourceSpendChanges(UnitGetOwner(lp_progressUnit));
        UnitSetProgressStage(lp_progressUnit, lp_progressIndex, c_unitProgressStageResume);
        DialogControlSetAnimationState(lv_unitStatusProgress, PlayerGroupSingle(UnitGetOwner(lp_statusUnit)), "ProgressState", "Normal");
    }
}

void libSCPL_gf_UnitStatusPauseProgressUnit (unit lp_statusUnit, unit lp_progressUnit, int lp_progressIndex, bool lp_pause) {
    // Variable Declarations
    actor lv_unitActorMain;
    int lv_unitStatusProgress;

    // Variable Initialization
    lv_unitStatusProgress = c_invalidDialogControlId;

    // Implementation
    lv_unitActorMain = libNtve_gf_MainActorofUnit(lp_statusUnit);
    DialogControlHookupUnitStatus(c_triggerControlTypePanel, ("StatusIcon" + IntToString(lp_progressIndex)), lp_statusUnit);
    lv_unitStatusProgress = DialogControlLastCreated();
    if ((lp_pause == true)) {
        libSCPL_gf_GenericEventResourceSpendChanges(UnitGetOwner(lp_progressUnit));
        libNtve_gf_PauseUnit(lp_progressUnit, true);
        DialogControlSetAnimationState(lv_unitStatusProgress, PlayerGroupSingle(UnitGetOwner(lp_statusUnit)), "ProgressState", "Paused");
    }
    else {
        libSCPL_gf_GenericEventResourceSpendChanges(UnitGetOwner(lp_progressUnit));
        libNtve_gf_PauseUnit(lp_progressUnit, false);
        DialogControlSetAnimationState(lv_unitStatusProgress, PlayerGroupSingle(UnitGetOwner(lp_statusUnit)), "ProgressState", "Normal");
    }
}

int libSCPL_gf_UsedTrainingSlotCount (unit lp_unit) {
    // Implementation
    return MinI(UnitQueueGetProperty(lp_unit, c_unitQueuePropertyUsed), UnitQueueGetProperty(lp_unit, c_unitQueuePropertyCount));
}

fixed libSCPL_gf_PlayerAvailableMinerals (int lp_playerIndex) {
    // Variable Declarations
    int lv_minerals;

    // Variable Initialization

    // Implementation
    lv_minerals = (PlayerGetPropertyInt(lp_playerIndex, c_playerPropMinerals) - libSCPL_gv_constants.lv_spendBufferMinerals);
    return lv_minerals;
}

fixed libSCPL_gf_PlayerAvailableVespene (int lp_playerIndex) {
    // Variable Declarations
    int lv_vespene;

    // Variable Initialization

    // Implementation
    lv_vespene = (PlayerGetPropertyInt(lp_playerIndex, c_playerPropVespene) - libSCPL_gv_constants.lv_spendBufferVespene);
    return lv_vespene;
}

bool libSCPL_gf_UnitProgressStateIsProgressing (unit lp_unit, int lp_slot) {
    // Variable Declarations
    fixed lv_value;

    // Variable Initialization

    // Implementation
    lv_value = UnitGetCustomValue(lp_unit, (lp_slot));
    return (lv_value == 1.0);
}

void libSCPL_gf_UnitProtossProgressSet (unit lp_unit, fixed lp_progress) {
    // Implementation
    UnitSetCustomValue(lp_unit, (9), lp_progress);
}

fixed libSCPL_gf_UnitProtossProgress (unit lp_unit) {
    // Variable Declarations
    fixed lv_progress;

    // Variable Initialization

    // Implementation
    lv_progress = UnitGetCustomValue(lp_unit, (9));
    return lv_progress;
}

void libSCPL_gf_UnitProtossProgressMineralsSet (unit lp_unit, fixed lp_progress) {
    // Implementation
    UnitSetCustomValue(lp_unit, (10), lp_progress);
}

fixed libSCPL_gf_UnitProtossProgressMinerals (unit lp_unit) {
    // Variable Declarations
    fixed lv_progress;

    // Variable Initialization

    // Implementation
    lv_progress = UnitGetCustomValue(lp_unit, (10));
    return lv_progress;
}

void libSCPL_gf_UnitProtossProgressVespeneSet (unit lp_unit, fixed lp_progress) {
    // Implementation
    UnitSetCustomValue(lp_unit, (11), lp_progress);
}

fixed libSCPL_gf_UnitProtossProgressVespene (unit lp_unit) {
    // Variable Declarations
    fixed lv_progress;

    // Variable Initialization

    // Implementation
    lv_progress = UnitGetCustomValue(lp_unit, (11));
    return lv_progress;
}

fixed libSCPL_gf_TickIncrementActual (unit lp_parentUnit) {
    // Implementation
    if ((UnitHasBehavior2(lp_parentUnit, "TimeWarpProduction") == true)) {
        return libSCPL_gv_constants.lv_spendTickIncrementBoosted;
    }
    else {
        return libSCPL_gv_constants.lv_spendTickIncrement;
    }
}

fixed libSCPL_gf_TimeExpectedActual (unit lp_parentUnit, int lp_slot) {
    // Variable Declarations
    fixed lv_timeElapsed;

    // Variable Initialization

    // Implementation
    lv_timeElapsed = UnitQueueItemTime(lp_parentUnit, c_unitQueueTimeElapsed, lp_slot);
    if ((UnitHasBehavior2(lp_parentUnit, "TimeWarpProduction") == true)) {
        return UnitQueueItemTime(lp_parentUnit, c_unitQueueTimeElapsed, lp_slot);
    }
    else {
        return UnitQueueItemTime(lp_parentUnit, c_unitQueueTimeElapsed, lp_slot);
    }
}

fixed libSCPL_gf_NormalizeBuildingProgress (fixed lp_value) {
    // Variable Declarations
    fixed lv_normalizedValue;

    // Variable Initialization

    // Implementation
    lv_normalizedValue = (lp_value * 10.0);
    lv_normalizedValue = Round(lv_normalizedValue);
    lv_normalizedValue = (lv_normalizedValue - ModF(lv_normalizedValue, 5.0));
    lv_normalizedValue = (lv_normalizedValue * 0.1);
    return lv_normalizedValue;
}

void libSCPL_gf_UnitProgressRefundSet (unit lp_unit, int lp_resource, fixed lp_refundValue) {
    // Implementation
    UnitSetCustomValue(lp_unit, (lp_resource), lp_refundValue);
}

fixed libSCPL_gf_UnitProgressRefund (unit lp_unit, int lp_resource) {
    // Variable Declarations
    fixed lv_refund;

    // Variable Initialization

    // Implementation
    lv_refund = UnitGetCustomValue(lp_unit, (lp_resource));
    return lv_refund;
}

void libSCPL_gf_UnitProgressCarryOverSet (unit lp_unit, int lp_resource, fixed lp_refundValue) {
    // Implementation
    UnitSetCustomValue(lp_unit, (lp_resource), lp_refundValue);
}

fixed libSCPL_gf_UnitProgressCarryOver (unit lp_unit, int lp_resource) {
    // Variable Declarations
    fixed lv_refund;

    // Variable Initialization

    // Implementation
    lv_refund = UnitGetCustomValue(lp_unit, (lp_resource));
    return lv_refund;
}

void libSCPL_gf_BuildingPauseStateSet (unit lp_unit, bool lp_state) {
    // Implementation
    UnitSetCustomValue(lp_unit, (7), BoolToInt(lp_state));
}

bool libSCPL_gf_BuildingPauseState (unit lp_unit) {
    // Variable Declarations
    fixed lv_pauseStae;

    // Variable Initialization

    // Implementation
    lv_pauseStae = UnitGetCustomValue(lp_unit, (7));
    if ((lv_pauseStae == 1)) {
        return true;
    }
    else {
        return false;
    }
}

string libSCPL_gf_AbilityMorphUnit (string lp_ability, unit lp_unit) {
    // Variable Declarations
    string lv_parentUnit;
    string lv_morphUnit;
    int lv_morphIndex;

    // Variable Initialization

    // Implementation
    lv_parentUnit = UnitGetType(lp_unit);
    if (((lv_parentUnit == "Hydralisk") || (lv_parentUnit == "Roach") || (lv_parentUnit == "Corruptor") || (lv_parentUnit == "Overlord") || (lv_parentUnit == "LurkerMPEgg") || (lv_parentUnit == "RavagerCocoon") || (lv_parentUnit == "BroodLordCocoon") || (lv_parentUnit == "TransportOverlordCocoon") || (lv_parentUnit == "OverlordCocoon"))) {
        lv_morphIndex = 1;
    }
    lv_morphUnit = (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, ("InfoArray[" + IntToString(lv_morphIndex) + "].Unit"), c_playerAny));
    return lv_morphUnit;
}

string libSCPL_gf_AbilityMorphParentUnit (unit lp_unit) {
    // Variable Declarations
    string lv_parentUnit;
    string lv_morphUnit;
    int lv_morphIndex;

    // Variable Initialization

    // Implementation
    lv_parentUnit = UnitGetType(lp_unit);
    if (((lv_parentUnit == "TransportOverlordCocoon") || (lv_parentUnit == "OverlordCocoon"))) {
        lv_parentUnit = "Overlord";
    }
    else if ((lv_parentUnit == "RavagerCocoon")) {
        lv_parentUnit = "Roach";
    }
    else if ((lv_parentUnit == "LurkerMPEgg")) {
        lv_parentUnit = "Hydralisk";
    }
    else if ((lv_parentUnit == "BroodLordCocoon")) {
        lv_parentUnit = "Corruptor";
    }
    return lv_parentUnit;
}

void libSCPL_gf_UnitMorphProgressSet (unit lp_unit, fixed lp_progress) {
    // Implementation
    UnitSetCustomValue(lp_unit, (8), lp_progress);
}

fixed libSCPL_gf_UnitMorphProgress (unit lp_unit) {
    // Variable Declarations
    fixed lv_refund;

    // Variable Initialization

    // Implementation
    lv_refund = UnitGetCustomValue(lp_unit, (8));
    return lv_refund;
}

bool libSCPL_gf_RegisterExists (string lp_unitType) {
    // Implementation
    return DataTableValueExists(true, ("Unit" + lp_unitType + "BuildTime"));
}

fixed libSCPL_gf_GetBuildTime (string lp_object) {
    // Implementation
    return DataTableGetFixed(true, ("Unit" + lp_object + "BuildTime"));
}

fixed libSCPL_gf_GetCostMinerals (string lp_object) {
    // Implementation
    return DataTableGetFixed(true, ("Unit" + lp_object + "CostM"));
}

fixed libSCPL_gf_GetCostVespene (string lp_object) {
    // Implementation
    return DataTableGetFixed(true, ("Unit" + lp_object + "CostV"));
}

void libSCPL_gf_RegisterBuildTime (string lp_object, fixed lp_cost) {
    // Implementation
    DataTableSetFixed(true, ("Unit" + lp_object + "BuildTime"), lp_cost);
}

void libSCPL_gf_RegisterCostMinerals (string lp_object, fixed lp_cost) {
    // Implementation
    DataTableSetFixed(true, ("Unit" + lp_object + "CostM"), lp_cost);
}

void libSCPL_gf_RegisterCostVespene (string lp_object, fixed lp_cost) {
    // Implementation
    DataTableSetFixed(true, ("Unit" + lp_object + "CostV"), lp_cost);
}

fixed libSCPL_gf_UnitProgressState (unit lp_unit, int lp_slot) {
    // Variable Declarations
    fixed lv_value;

    // Variable Initialization

    // Implementation
    lv_value = UnitGetCustomValue(lp_unit, (lp_slot));
    return lv_value;
}

void libSCPL_gf_UnitProgressStateSet (unit lp_unit, int lp_slot, fixed lp_value) {
    // Implementation
    UnitSetCustomValue(lp_unit, (lp_slot), lp_value);
}

void libSCPL_gf_DebugPanelUpdateSpendOverTime () {
    // Variable Declarations
    unit lv_unit;
    fixed lv_value;
    string lv_valueString;

    // Variable Initialization
    lv_valueString = "";

    // Implementation
    libPPRL_gf_DebugPanelSetFieldName(1, "Slot 1");
    libPPRL_gf_DebugPanelSetFieldName(2, "Slot 1 Unit");
    libPPRL_gf_DebugPanelSetFieldName(3, "Slot 1 Time");
    libPPRL_gf_DebugPanelSetFieldName(4, "Slot 2");
    libPPRL_gf_DebugPanelSetFieldName(5, "Slot 2 Unit");
    libPPRL_gf_DebugPanelSetFieldName(6, "Slot 2 Time");
    lv_value = UnitGetCustomValue(lv_unit, 1);
    if ((lv_value == 0.0)) {
        lv_valueString = "Empty";
    }
    else {
        lv_valueString = "Progress";
    }
    lv_value = UnitGetCustomValue(lv_unit, 5);
    if ((lv_value > 0.0)) {
        lv_valueString = (lv_valueString + " | Cancel");
    }
    libPPRL_gf_DebugPanelSetFieldValue(1, lv_valueString);
    lv_value = UnitGetCustomValue(lv_unit, 2);
    if ((lv_value == 0.0)) {
        lv_valueString = "Empty";
    }
    else {
        lv_valueString = "Progress";
    }
    lv_value = UnitGetCustomValue(lv_unit, 6);
    if ((lv_value > 0.0)) {
        lv_valueString = (lv_valueString + " | Cancel");
    }
    libPPRL_gf_DebugPanelSetFieldValue(4, lv_valueString);
    lv_value = UnitGetCustomValue(lv_unit, 40);
    libPPRL_gf_DebugPanelSetFieldValue(3, FixedToString(lv_value, 2));
    lv_value = UnitGetCustomValue(lv_unit, 41);
    libPPRL_gf_DebugPanelSetFieldValue(6, FixedToString(lv_value, 2));
}

void libSCPL_gf_InitializeGlobalRallyCaster (int lp_playerIndex) {
    // Implementation
    if ((PlayerRace(lp_playerIndex) == "Zerg")) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GameGlobalRallyCaster", c_unitCreateIgnorePlacement, lp_playerIndex, Point(0.0, 0.0));
        PlayerAddChargeUsed(lp_playerIndex, "UCB/GlobalRally00", -1.0);
        PlayerAddChargeUsed(lp_playerIndex, "UCB/GlobalRally01", -1.0);
        PlayerAddChargeUsed(lp_playerIndex, "UCB/GlobalRally02", -1.0);
        TriggerEnable(libSCPL_gt_GameTip_ZergOverlord, true);
    }
    else if (true) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GameGlobalRallyCaster", c_unitCreateIgnorePlacement, lp_playerIndex, Point(0.0, 0.0));
    }
    libSCPL_gv_player[lp_playerIndex].lv_globalRallyCaster = UnitLastCreated();
    libNtve_gf_SetDialogItemUnitGroup(libSCPL_gv_uI.lv_consoleRallyCommandCard, libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(lp_playerIndex));
}

trigger auto_libSCPL_gf_InitializeAutomatedWorkerProduction_Trigger = null;

void libSCPL_gf_InitializeAutomatedWorkerProduction () {
    if (auto_libSCPL_gf_InitializeAutomatedWorkerProduction_Trigger == null) {
        auto_libSCPL_gf_InitializeAutomatedWorkerProduction_Trigger = TriggerCreate("auto_libSCPL_gf_InitializeAutomatedWorkerProduction_TriggerFunc");
    }

    TriggerExecute(auto_libSCPL_gf_InitializeAutomatedWorkerProduction_Trigger, false, false);
}

bool auto_libSCPL_gf_InitializeAutomatedWorkerProduction_TriggerFunc (bool testConds, bool runActions) {
    playergroup autoA6110864_g;
    int autoA6110864_p;
    string auto4F338708_val;

    // Variable Declarations
    unit lv_townHall;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    autoA6110864_g = PlayerGroupActive(); 
    autoA6110864_p = 1;
    for ( ; autoA6110864_p <= PlayerGroupCount(autoA6110864_g) ; autoA6110864_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(autoA6110864_g, autoA6110864_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoA6110864_g, autoA6110864_p);
        lv_townHall = libSCPL_gf_PlayerTownHallClosest(PlayerStartLocation(lv_playerIndex), lv_playerIndex);
        auto4F338708_val = PlayerRace(lv_playerIndex);
        if (auto4F338708_val == "Terr") {
            UnitIssueOrder(lv_townHall, Order(AbilityCommand("CommandCenterTrain", 0)), c_orderQueueAddToEnd);
        }
        else if (auto4F338708_val == "Prot") {
            UnitIssueOrder(lv_townHall, Order(AbilityCommand("NexusTrain", 0)), c_orderQueueAddToEnd);
        }
        else if (auto4F338708_val == "Zerg") {
            libSCPL_gf_AutoWorkerProductionZergInitial(lv_townHall, lv_playerIndex, 0);
        }
        else {
        }
    }
    Wait(2.0, c_timeGame);
    TriggerEnable(libSCPL_gt_AutoWorkerProductionCheckWorkerSlotZerg, true);
    return true;
}

void libSCPL_gf_AutoWorkerProduction (unit lp_townHall, int lp_playerIndex) {
    string autoC236014B_val;

    // Implementation
    if ((UnitIsAlive(lp_townHall) == true) && (libSCPL_gf_PlayerTownHallWorkerCount(lp_townHall, lp_playerIndex) < libSCPL_gf_PlayerTownHallSaturationCount(lp_townHall, lp_playerIndex)) && (libSCPL_gf_PlayerTownHallWorkerQueue(lp_townHall, lp_playerIndex, false) == 0) && (libSCPL_gf_PlayerWorkerCount(lp_playerIndex) < libSCPL_gv_constants.lv_harvesterAutoCap)) {
        autoC236014B_val = PlayerRace(lp_playerIndex);
        if (autoC236014B_val == "Terr") {
            UnitIssueOrder(lp_townHall, Order(AbilityCommand("CommandCenterTrain", 0)), c_orderQueueAddToEnd);
        }
        else if (autoC236014B_val == "Prot") {
            UnitIssueOrder(lp_townHall, Order(AbilityCommand("NexusTrain", 0)), c_orderQueueAddToEnd);
        }
        else if (autoC236014B_val == "Zerg") {
            libSCPL_gf_AutoWorkerProductionZerg(lp_townHall, lp_playerIndex, 1);
        }
        else {
        }
        if ((libSCPL_gf_PlayerTownHallWorkerCount(lp_townHall, lp_playerIndex) > libSCPL_gf_PlayerTownHallSaturationCount(lp_townHall, lp_playerIndex))) {
            libSCPL_gf_GameTipCreateInstance("GlobalTownHallSaturated", lp_playerIndex);
        }
    }
}

void libSCPL_gf_AutoWorkerProductionZerg (unit lp_townHall, int lp_playerIndex, int lp_larvaLeftover) {
    int auto8CD8C38B_ae;
    int auto8CD8C38B_ai;

    // Variable Declarations
    int lv_droneProductionCurrent;
    int lv_droneProductionMaximum;
    int lv_dronesNeeded;
    int lv_larvaAvailable;
    int lv_larvaToDrones;
    int lv_larvaCount;
    int lv_larvaIndex;
    unitgroup lv_larvaGroup;
    unit lv_larva;
    region lv_townHallRegion;

    // Variable Initialization
    lv_larvaGroup = UnitGroupEmpty();

    // Implementation
    if ((libSCPL_gv_player[lp_playerIndex].lv_globalZerg_DroneMorphToggle == false)) {
        return ;
    }
    lv_droneProductionMaximum = 2;
    lv_townHallRegion = RegionCircle(UnitGetPosition(lp_townHall), 8.0);
    lv_larvaGroup = libPPRL_gf_UnitsInUnitGroupMatchingBehavior(UnitGroup("Larva", lp_playerIndex, lv_townHallRegion, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), "GameDroneMorphMarker", false);
    lv_droneProductionCurrent = UnitGroupCount(libPPRL_gf_UnitsInUnitGroupMatchingBehavior(UnitGroup("Egg", lp_playerIndex, lv_townHallRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), "GameDroneMorphMarker", true), c_unitCountAlive);
    lv_larvaCount = UnitGroupCount(lv_larvaGroup, c_unitCountAlive);
    lv_larvaAvailable = (lv_larvaCount - lp_larvaLeftover);
    lv_dronesNeeded = (libSCPL_gf_PlayerTownHallSaturationCount(lp_townHall, lp_playerIndex) - libSCPL_gf_PlayerTownHallWorkerCount(lp_townHall, lp_playerIndex));
    lv_larvaToDrones = MinI(MinI(lv_larvaAvailable, lv_dronesNeeded), (lv_droneProductionMaximum - lv_droneProductionCurrent));
    auto8CD8C38B_ae = lv_larvaToDrones;
    auto8CD8C38B_ai = 1;
    lv_larvaIndex = 1;
    for ( ; ( (auto8CD8C38B_ai >= 0 && lv_larvaIndex <= auto8CD8C38B_ae) || (auto8CD8C38B_ai <= 0 && lv_larvaIndex >= auto8CD8C38B_ae) ) ; lv_larvaIndex += auto8CD8C38B_ai ) {
        lv_larva = UnitGroupUnit(lv_larvaGroup, lv_larvaIndex);
        UnitIssueOrder(lv_larva, Order(AbilityCommand("LarvaTrain", 0)), c_orderQueueReplace);
        UnitBehaviorAdd(lv_larva, "GameDroneMorphMarker", lv_larva, 1);
    }
}

trigger auto_libSCPL_gf_AutoWorkerProductionZergInitial_Trigger = null;
unit auto_libSCPL_gf_AutoWorkerProductionZergInitial_lp_townHall;
int auto_libSCPL_gf_AutoWorkerProductionZergInitial_lp_playerIndex;
int auto_libSCPL_gf_AutoWorkerProductionZergInitial_lp_larvaLeftover;

void libSCPL_gf_AutoWorkerProductionZergInitial (unit lp_townHall, int lp_playerIndex, int lp_larvaLeftover) {
    auto_libSCPL_gf_AutoWorkerProductionZergInitial_lp_townHall = lp_townHall;
    auto_libSCPL_gf_AutoWorkerProductionZergInitial_lp_playerIndex = lp_playerIndex;
    auto_libSCPL_gf_AutoWorkerProductionZergInitial_lp_larvaLeftover = lp_larvaLeftover;

    if (auto_libSCPL_gf_AutoWorkerProductionZergInitial_Trigger == null) {
        auto_libSCPL_gf_AutoWorkerProductionZergInitial_Trigger = TriggerCreate("auto_libSCPL_gf_AutoWorkerProductionZergInitial_TriggerFunc");
    }

    TriggerExecute(auto_libSCPL_gf_AutoWorkerProductionZergInitial_Trigger, false, false);
}

bool auto_libSCPL_gf_AutoWorkerProductionZergInitial_TriggerFunc (bool testConds, bool runActions) {
    unit lp_townHall = auto_libSCPL_gf_AutoWorkerProductionZergInitial_lp_townHall;
    int lp_playerIndex = auto_libSCPL_gf_AutoWorkerProductionZergInitial_lp_playerIndex;
    int lp_larvaLeftover = auto_libSCPL_gf_AutoWorkerProductionZergInitial_lp_larvaLeftover;

    // Implementation
    UnitBehaviorAdd(lp_townHall, "GameUCBHatcheryHiveLair", lp_townHall, 1);
    Wait(0.125, c_timeGame);
    libSCPL_gf_AutoWorkerProductionZerg(lp_townHall, lp_playerIndex, lp_larvaLeftover);
    return true;
}

void libSCPL_gf_WarpGateUpdateUI (int lp_playerIndex) {
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/GlobalRallyPanel");
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupSingle(lp_playerIndex), "WarpState", "WarpGate");
}

void libSCPL_gf_WarpGatesCooldownSet (fixed lp_cooldown, int lp_playerIndex) {
    // Variable Declarations
    unitgroup lv_warpGatesAvailable;
    unit lv_warpGateChosen;

    // Variable Initialization
    lv_warpGatesAvailable = UnitGroupEmpty();

    // Implementation
    lv_warpGatesAvailable = libSCPL_gf_WarpGatesAvailable(lp_playerIndex);
    lv_warpGateChosen = UnitGroupUnit(lv_warpGatesAvailable, 1);
    UnitBehaviorAdd(lv_warpGateChosen, "GameProtossWarpGateTrainCharge", lv_warpGateChosen, 1);
    UnitBehaviorSetDuration(lv_warpGateChosen, "GameProtossWarpGateTrainCharge", lp_cooldown);
    if ((UnitGroupCount(lv_warpGatesAvailable, c_unitCountAlive) == 1)) {
        libSCPL_gf_WarpGatesLowestCooldownTransfer(lp_playerIndex);
    }
}

unitgroup libSCPL_gf_WarpGatesAvailable (int lp_playerIndex) {
    unitgroup auto81813610_g;
    int auto81813610_u;

    // Variable Declarations
    unitgroup lv_warpGatesAvailable;
    unitgroup lv_warpGates;
    unit lv_unit;

    // Variable Initialization
    lv_warpGatesAvailable = UnitGroupEmpty();
    lv_warpGates = UnitGroupEmpty();

    // Implementation
    lv_warpGates = UnitGroup("WarpGate", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81813610_g = lv_warpGates;
    auto81813610_u = 1;
    for ( ; auto81813610_u <= UnitGroupCount(auto81813610_g, c_unitCountAll) ; auto81813610_u += BoolToInt(lv_unit == UnitGroupUnit(auto81813610_g, auto81813610_u)) ) {
        lv_unit = UnitGroupUnit(auto81813610_g, auto81813610_u);
        if ((UnitHasBehavior2(lv_unit, "GameProtossWarpGateTrainCharge") == false) && (UnitHasBehavior2(lv_unit, "GameProtossWarpGateTrainChargeFinal") == false)) {
            UnitGroupAdd(lv_warpGatesAvailable, lv_unit);
        }
    }
    return lv_warpGatesAvailable;
}

void libSCPL_gf_WarpGatesLowestCooldownTransfer (int lp_playerIndex) {
    unitgroup auto6DD9DDB1_g;
    int auto6DD9DDB1_u;

    // Variable Declarations
    unitgroup lv_warpGates;
    unit lv_unit;
    fixed lv_cooldownRemaining;
    fixed lv_cooldownRemainingLowest;
    unit lv_warpGateNextAvailable;

    // Variable Initialization
    lv_warpGates = UnitGroupEmpty();

    // Implementation
    lv_warpGates = UnitGroup("WarpGate", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_cooldownRemainingLowest = 99.0;
    auto6DD9DDB1_g = lv_warpGates;
    auto6DD9DDB1_u = 1;
    for ( ; auto6DD9DDB1_u <= UnitGroupCount(auto6DD9DDB1_g, c_unitCountAll) ; auto6DD9DDB1_u += BoolToInt(lv_unit == UnitGroupUnit(auto6DD9DDB1_g, auto6DD9DDB1_u)) ) {
        lv_unit = UnitGroupUnit(auto6DD9DDB1_g, auto6DD9DDB1_u);
        if ((UnitHasBehavior2(lv_unit, "GameProtossWarpGateTrainCharge") == true)) {
            lv_cooldownRemaining = UnitBehaviorDuration(lv_unit, "GameProtossWarpGateTrainCharge");
            if ((lv_cooldownRemaining < lv_cooldownRemainingLowest)) {
                lv_cooldownRemainingLowest = lv_cooldownRemaining;
                lv_warpGateNextAvailable = lv_unit;
            }
        }
    }
    UnitBehaviorRemove(lv_warpGateNextAvailable, "GameProtossWarpGateTrainCharge", 1);
    PlayerAddChargeUsed(lp_playerIndex, "WarpGateTrain", 1.0);
    if ((UnitHasBehavior2(lv_warpGateNextAvailable, "TimeWarpProduction") == true)) {
        lv_cooldownRemainingLowest = (lv_cooldownRemainingLowest / 1.15);
    }
    PlayerAddChargeRegenRemaining(lp_playerIndex, "WarpGateTrain", lv_cooldownRemainingLowest);
    UnitBehaviorAdd(lv_warpGateNextAvailable, "GameProtossWarpGateTrainChargeFinal", lv_warpGateNextAvailable, 1);
    UnitBehaviorSetDuration(lv_warpGateNextAvailable, "GameProtossWarpGateTrainChargeFinal", lv_cooldownRemainingLowest);
}

void libSCPL_gf_UnitStatusEvaluateProgressBar (unit lp_statusUnit) {
    int init_i;

    int auto74EF74FF_ae;
    int auto74EF74FF_ai;
    int auto391CC29E_ae;
    int auto391CC29E_ai;

    // Variable Declarations
    actor lv_unitActorMain;
    int[4] lv_unitStatusProgress;
    int lv_progressIndex;
    bool lv_isPaused;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_unitStatusProgress[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    auto74EF74FF_ae = 3;
    auto74EF74FF_ai = 1;
    lv_progressIndex = 1;
    for ( ; ( (auto74EF74FF_ai >= 0 && lv_progressIndex <= auto74EF74FF_ae) || (auto74EF74FF_ai <= 0 && lv_progressIndex >= auto74EF74FF_ae) ) ; lv_progressIndex += auto74EF74FF_ai ) {
        DialogControlHookupUnitStatus(c_triggerControlTypePanel, ("StatusIcon" + IntToString(lv_progressIndex)), lp_statusUnit);
        lv_unitStatusProgress[lv_progressIndex] = DialogControlLastCreated();
        DialogControlSetAnimationState(lv_unitStatusProgress[lv_progressIndex], PlayerGroupSingle(UnitGetOwner(lp_statusUnit)), "ProgressState", "Normal");
    }
    if ((UnitQueueGetProperty(lp_statusUnit, c_unitQueuePropertyUsed) == 1)) {
        lv_progressIndex = 1;
        if ((UnitCheckProgressState(lp_statusUnit, lv_progressIndex, c_unitProgressStatePaused) == true)) {
            lv_isPaused = true;
            DialogControlSetAnimationState(lv_unitStatusProgress[lv_progressIndex], PlayerGroupSingle(UnitGetOwner(lp_statusUnit)), "ProgressState", "Paused");
        }
    }
    else {
        auto391CC29E_ae = 2;
        auto391CC29E_ai = 1;
        lv_progressIndex = 1;
        for ( ; ( (auto391CC29E_ai >= 0 && lv_progressIndex <= auto391CC29E_ae) || (auto391CC29E_ai <= 0 && lv_progressIndex >= auto391CC29E_ae) ) ; lv_progressIndex += auto391CC29E_ai ) {
            if ((UnitCheckProgressState(lp_statusUnit, lv_progressIndex, c_unitProgressStatePaused) == true)) {
                lv_isPaused = true;
                DialogControlSetAnimationState(lv_unitStatusProgress[(lv_progressIndex + 1)], PlayerGroupSingle(UnitGetOwner(lp_statusUnit)), "ProgressState", "Paused");
            }
        }
    }
    lv_unitActorMain = libNtve_gf_MainActorofUnit(lp_statusUnit);
    if ((lv_isPaused == true)) {
        libNtve_gf_SendActorMessageToUnit(lp_statusUnit, (("Create " + (UnitGetType(lp_statusUnit)) + "Paused")));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lp_statusUnit, (("Create " + (UnitGetType(lp_statusUnit)))));
    }
    ActorSend(libNtve_gf_ActorLastCreatedSend(), "EventMacroRun RunnableStatusBarPause");
    ActorSend(lv_unitActorMain, "Destroy");
}

void libSCPL_gf_AutoCreepTargetNodesInitialize () {
    playergroup autoFE5C722C_g;
    int autoFE5C722C_p;
    playergroup autoD54CD30E_g;
    int autoD54CD30E_p;

    // Variable Declarations
    int lv_playerIndex;
    playergroup lv_zergPlayers;

    // Variable Initialization
    lv_zergPlayers = PlayerGroupEmpty();

    // Implementation
    autoFE5C722C_g = PlayerGroupActive(); 
    autoFE5C722C_p = 1;
    for ( ; autoFE5C722C_p <= PlayerGroupCount(autoFE5C722C_g) ; autoFE5C722C_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(autoFE5C722C_g, autoFE5C722C_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoFE5C722C_g, autoFE5C722C_p);
        if ((PlayerRace(lv_playerIndex) == "Zerg")) {
            PlayerGroupAdd(lv_zergPlayers, lv_playerIndex);
        }
    }
    libSCPL_gf_AutoCreepTargetNodesGenerateGrid(lv_zergPlayers);
    autoD54CD30E_g = lv_zergPlayers; 
    autoD54CD30E_p = 1;
    for ( ; autoD54CD30E_p <= PlayerGroupCount(autoD54CD30E_g) ; autoD54CD30E_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(autoD54CD30E_g, autoD54CD30E_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoD54CD30E_g, autoD54CD30E_p);
        libSCPL_gf_AutoCreepTargetNodesGenerateBase(lv_playerIndex);
    }
}

void libSCPL_gf_AutoCreepTargetNodesGenerateBase (int lp_playerIndex) {
    unitgroup autoE3DCD47F_g;
    int autoE3DCD47F_u;

    // Variable Declarations
    point lv_basePoint;
    unitgroup lv_vespeneGeyserFree;
    unitgroup lv_vespeneGeyserBase;
    unit lv_vespeneGeyser;
    unit lv_vespeneGeyserBuddy;

    // Variable Initialization
    lv_vespeneGeyserFree = UnitGroupEmpty();
    lv_vespeneGeyserBase = UnitGroupEmpty();

    // Implementation
    lv_vespeneGeyserFree = UnitGroupCopy(libSCPL_gf_MapVespeneGeysers());
    autoE3DCD47F_g = lv_vespeneGeyserFree;
    autoE3DCD47F_u = 1;
    for ( ; autoE3DCD47F_u <= UnitGroupCount(autoE3DCD47F_g, c_unitCountAll) ; autoE3DCD47F_u += BoolToInt(lv_vespeneGeyser == UnitGroupUnit(autoE3DCD47F_g, autoE3DCD47F_u)) ) {
        lv_vespeneGeyser = UnitGroupUnit(autoE3DCD47F_g, autoE3DCD47F_u);
        UnitGroupRemove(lv_vespeneGeyserFree, lv_vespeneGeyser);
        lv_vespeneGeyserBuddy = UnitGroupClosestToPoint(lv_vespeneGeyserFree, UnitGetPosition(lv_vespeneGeyser));
        UnitGroupRemove(lv_vespeneGeyserFree, lv_vespeneGeyserBuddy);
        UnitGroupAdd(lv_vespeneGeyserBase, lv_vespeneGeyser);
        UnitGroupAdd(lv_vespeneGeyserBase, lv_vespeneGeyserBuddy);
        lv_basePoint = UnitGroupCenterOfGroup(lv_vespeneGeyserBase);
        lv_vespeneGeyserBase = UnitGroupEmpty();
        RegionAddRegion(libSCPL_gv_map.lv_baseRegion, RegionCircle(lv_basePoint, 6.0));
        if ((PointPathingCost(PlayerStartLocation(lp_playerIndex), lv_basePoint) >= 65536)) {
            continue;
        }
        if ((RegionContainsPoint(RegionCircle(PlayerStartLocation(lp_playerIndex), 4.0), lv_basePoint) == true)) {
            continue;
        }
        libSCPL_gf_AutoCreepTargetNodeCreate(lp_playerIndex, lv_basePoint);
    }
}

void libSCPL_gf_AutoCreepTargetNodesGenerateGrid (playergroup lp_zergPlayers) {
    fixed autoB044ED37_ae;
    fixed autoB044ED37_ai;
    fixed auto6382413E_ae;
    fixed auto6382413E_ai;
    playergroup auto16C9C74F_g;
    int auto16C9C74F_p;

    // Variable Declarations
    int lv_zergPlayer;
    fixed lv_mapWidth;
    fixed lv_mapHeight;
    fixed lv_incrementX;
    fixed lv_incrementY;
    fixed lv_startX;
    fixed lv_startY;
    fixed lv_pointX;
    fixed lv_pointY;
    point lv_gridPoint;

    // Variable Initialization

    // Implementation
    lv_mapWidth = libNtve_gf_WidthOfRegion(RegionPlayableMap());
    lv_mapHeight = libNtve_gf_HeightOfRegion(RegionPlayableMap());
    lv_incrementX = (lv_mapWidth * 0.25);
    lv_incrementY = (lv_mapHeight * 0.25);
    lv_startX = (PointGetX(RegionGetBoundsMin(RegionPlayableMap())) + (lv_incrementX * 0.5));
    lv_startY = (PointGetY(RegionGetBoundsMin(RegionPlayableMap())) + (lv_incrementY * 0.5));
    autoB044ED37_ae = lv_mapWidth;
    autoB044ED37_ai = lv_incrementX;
    lv_pointX = lv_startX;
    for ( ; ( (autoB044ED37_ai >= 0 && lv_pointX <= autoB044ED37_ae) || (autoB044ED37_ai <= 0 && lv_pointX >= autoB044ED37_ae) ) ; lv_pointX += autoB044ED37_ai ) {
        auto6382413E_ae = lv_mapHeight;
        auto6382413E_ai = lv_incrementY;
        lv_pointY = lv_startY;
        for ( ; ( (auto6382413E_ai >= 0 && lv_pointY <= auto6382413E_ae) || (auto6382413E_ai <= 0 && lv_pointY >= auto6382413E_ae) ) ; lv_pointY += auto6382413E_ai ) {
            lv_gridPoint = Point(lv_pointX, lv_pointY);
            auto16C9C74F_g = lp_zergPlayers; 
            auto16C9C74F_p = 1;
            for ( ; auto16C9C74F_p <= PlayerGroupCount(auto16C9C74F_g) ; auto16C9C74F_p += BoolToInt(lv_zergPlayer == PlayerGroupPlayer(auto16C9C74F_g, auto16C9C74F_p)) ) {
                lv_zergPlayer = PlayerGroupPlayer(auto16C9C74F_g, auto16C9C74F_p);
                if ((PointPathingCost(PlayerStartLocation(lv_zergPlayer), lv_gridPoint) >= 65536)) {
                    continue;
                }
                if ((RegionContainsPoint(RegionCircle(PlayerStartLocation(lv_zergPlayer), 12.0), lv_gridPoint) == true)) {
                    continue;
                }
                libSCPL_gf_AutoCreepTargetNodeCreate(lv_zergPlayer, lv_gridPoint);
            }
        }
    }
}

void libSCPL_gf_AutoCreepTargetNodeCreate (int lp_playerIndex, point lp_point) {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GameAutoCreepNodeTarget", 0, lp_playerIndex, lp_point);
    UnitGroupAdd(libSCPL_gv_player[lp_playerIndex].lv_globalZerg_AutoCreepNodeTargets, UnitLastCreated());
}

void libSCPL_gf_AutoCreepEvaluateLineageTargets (int lp_playerIndex) {
    int autoB37BDBCD_ae;
    int autoB37BDBCD_ai;
    unitgroup auto17EF132B_g;
    int auto17EF132B_u;
    unitgroup autoB56D4986_g;
    int autoB56D4986_u;

    // Variable Declarations
    int lv_lineageCount;
    int lv_targetIndex;
    int lv_lineageIndex;
    unit lv_head;
    unit lv_target;
    unitgroup lv_headsUnsorted;
    unitgroup lv_targetsUnclaimed;
    int lv_pathingScore;
    int lv_pathingScoreLowest;
    point lv_lineageHeadPosition;
    point lv_creepTargetPosition;
    unit lv_bestHead;
    unit lv_bestTarget;

    // Variable Initialization
    lv_headsUnsorted = UnitGroupEmpty();
    lv_targetsUnclaimed = UnitGroupEmpty();

    // Implementation
    lv_lineageCount = libSCPL_gv_player[lp_playerIndex].lv_globalZerg_AutoCreepLineageCount;
    autoB37BDBCD_ae = lv_lineageCount;
    autoB37BDBCD_ai = 1;
    lv_lineageIndex = 1;
    for ( ; ( (autoB37BDBCD_ai >= 0 && lv_lineageIndex <= autoB37BDBCD_ae) || (autoB37BDBCD_ai <= 0 && lv_lineageIndex >= autoB37BDBCD_ae) ) ; lv_lineageIndex += autoB37BDBCD_ai ) {
        lv_head = libSCPL_gv_player[lp_playerIndex].lv_globalZerg_AutoCreepLineage[lv_lineageIndex].lv_head;
        if ((UnitIsAlive(lv_head) == true)) {
            UnitGroupAdd(lv_headsUnsorted, lv_head);
        }
    }
    lv_targetsUnclaimed = UnitGroupCopy(libSCPL_gv_player[lp_playerIndex].lv_globalZerg_AutoCreepNodeTargets);
    if ((UnitGroupCount(lv_headsUnsorted, c_unitCountAlive) == 0)) {
        return ;
    }
    while ((UnitGroupCount(lv_headsUnsorted, c_unitCountAlive) > 0)) {
        lv_pathingScoreLowest = 9999;
        lv_bestHead = null;
        lv_bestTarget = null;
        auto17EF132B_g = lv_headsUnsorted;
        auto17EF132B_u = 1;
        for ( ; auto17EF132B_u <= UnitGroupCount(auto17EF132B_g, c_unitCountAll) ; auto17EF132B_u += BoolToInt(lv_head == UnitGroupUnit(auto17EF132B_g, auto17EF132B_u)) ) {
            lv_head = UnitGroupUnit(auto17EF132B_g, auto17EF132B_u);
            lv_lineageHeadPosition = UnitGetPosition(lv_head);
            autoB56D4986_g = lv_targetsUnclaimed;
            autoB56D4986_u = 1;
            for ( ; autoB56D4986_u <= UnitGroupCount(autoB56D4986_g, c_unitCountAll) ; autoB56D4986_u += BoolToInt(lv_target == UnitGroupUnit(autoB56D4986_g, autoB56D4986_u)) ) {
                lv_target = UnitGroupUnit(autoB56D4986_g, autoB56D4986_u);
                lv_creepTargetPosition = UnitGetPosition(lv_target);
                lv_pathingScore = PointPathingCost(lv_lineageHeadPosition, lv_creepTargetPosition);
                if ((lv_pathingScore < lv_pathingScoreLowest)) {
                    lv_pathingScoreLowest = lv_pathingScore;
                    lv_bestHead = lv_head;
                    lv_bestTarget = lv_target;
                }
            }
        }
        if ((lv_bestHead != null) && (lv_bestTarget != null)) {
            lv_lineageIndex = FixedToInt(libSCPL_gf_UnitChargeLink(lv_bestHead, "CreepParentIndex"));
            libSCPL_gv_player[lp_playerIndex].lv_globalZerg_AutoCreepLineage[lv_lineageIndex].lv_target = lv_bestTarget;
            UnitGroupRemove(lv_headsUnsorted, lv_bestHead);
            UnitGroupRemove(lv_targetsUnclaimed, lv_bestTarget);
        }
        else {
            break;
        }
    }
}

void libSCPL_gf_AutoCreepLineageSpread (int lp_playerIndex, unit lp_node) {
    // Variable Declarations
    int lv_lineageIndex;
    int lv_targetNodeIndex;
    int lv_targetNodeCount;
    unit lv_targetNode;
    point lv_bestPoint;

    // Variable Initialization

    // Implementation
    lv_lineageIndex = FixedToInt(libSCPL_gf_UnitChargeLink(lp_node, "CreepParentIndex"));
    lv_targetNode = libSCPL_gv_player[lp_playerIndex].lv_globalZerg_AutoCreepLineage[lv_lineageIndex].lv_target;
    if ((UnitGroupCount(libSCPL_gv_player[lp_playerIndex].lv_globalZerg_AutoCreepNodeTargets, c_unitCountAlive) == 0)) {
        UnitBehaviorRemove(lp_node, "GameAutoCreepSpreadReady", 1);
    }
    else if ((UnitIsAlive(lv_targetNode) == true)) {
        lv_bestPoint = libSCPL_gf_AutoCreepPointBest(lp_node, lv_targetNode);
        if ((lv_bestPoint != null)) {
            UnitIssueOrder(lp_node, OrderTargetingPoint(AbilityCommand("CreepTumorBuild", 0), lv_bestPoint), c_orderQueueReplace);
        }
        else if ((libSCPL_gf_UnitChargeLink(lp_node, "CreepNodeAttempts") < 3.0)) {
            libSCPL_gf_UnitChargeLinkAdd(lp_node, "CreepNodeAttempts", 1.0);
        }
        else if (true) {
            UnitBehaviorRemove(lp_node, "GameAutoCreepSpreadReady", 1);
        }
    }
}

bool libSCPL_gf_PointsHaveHeightDifference (point lp_pointA, point lp_pointB) {
    // Implementation
    if ((WorldHeight(c_heightMapGround, lp_pointA) == WorldHeight(c_heightMapGround, lp_pointB))) {
        return false;
    }
    else {
        return true;
    }
}

point libSCPL_gf_AutoCreepPointBest (unit lp_node, unit lp_target) {
    fixed auto82ACEA5A_ae;
    fixed auto82ACEA5A_ai;

    // Variable Declarations
    point lv_targetPoint;
    point lv_nodePoint;
    point lv_bestPoint;
    fixed lv_targetAngle;
    int lv_playerIndex;
    fixed lv_testAngle;
    point[65] lv_testPoint;
    fixed[65] lv_testPointCost;
    fixed lv_lowestCost;
    int lv_lowestCostIndex;
    int lv_testIndex;
    int lv_validPointTest;
    fixed lv_cRadiusA;
    fixed lv_cRadiusB;
    int lv_cPointValid;
    int lv_cPointRamp;

    // Variable Initialization

    // Implementation
    if (((UnitIsAlive(lp_target) == false) || (UnitIsAlive(lp_node) == false))) {
        return null;
    }
    lv_cPointValid = 0;
    lv_cPointRamp = 2;
    lv_cRadiusA = 8.5;
    lv_cRadiusB = 7.0;
    lv_lowestCostIndex = -1;
    lv_playerIndex = UnitGetOwner(lp_node);
    lv_nodePoint = UnitGetPosition(lp_node);
    lv_targetPoint = UnitGetPosition(lp_target);
    lv_targetAngle = AngleBetweenPoints(lv_nodePoint, lv_targetPoint);
    lv_lowestCost = PointPathingCost(lv_nodePoint, lv_targetPoint);
    auto82ACEA5A_ae = (lv_targetAngle + 150.0);
    auto82ACEA5A_ai = 15.0;
    lv_testAngle = (lv_targetAngle - 150.0);
    for ( ; ( (auto82ACEA5A_ai >= 0 && lv_testAngle <= auto82ACEA5A_ae) || (auto82ACEA5A_ai <= 0 && lv_testAngle >= auto82ACEA5A_ae) ) ; lv_testAngle += auto82ACEA5A_ai ) {
        lv_testPoint[lv_testIndex] = PointWithOffsetPolar(lv_nodePoint, lv_cRadiusA, lv_testAngle);
        lv_validPointTest = libSCPL_gf_AutoCreepPointValid(lp_node, lv_testPoint[lv_testIndex]);
        if ((lv_validPointTest == lv_cPointRamp)) {
            lv_testPoint[lv_testIndex] = PointWithOffsetPolar(lv_nodePoint, (lv_cRadiusB - 6.5), lv_testAngle);
            lv_validPointTest = libSCPL_gf_AutoCreepPointValid(lp_node, lv_testPoint[lv_testIndex]);
        }
        if ((lv_validPointTest == lv_cPointValid)) {
            lv_testPointCost[lv_testIndex] = PointPathingCost(lv_testPoint[lv_testIndex], lv_targetPoint);
            if ((libSCPL_gf_PointsHaveHeightDifference(lv_nodePoint, lv_testPoint[lv_testIndex]) == true)) {
                lv_testPointCost[lv_testIndex] -= 0.5;
            }
            if ((lv_testPointCost[lv_testIndex] < lv_lowestCost)) {
                lv_lowestCost = lv_testPointCost[lv_testIndex];
                lv_lowestCostIndex = lv_testIndex;
            }
            lv_testIndex += 1;
        }
        lv_testPoint[lv_testIndex] = PointWithOffsetPolar(lv_nodePoint, lv_cRadiusB, lv_testAngle);
        lv_validPointTest = libSCPL_gf_AutoCreepPointValid(lp_node, lv_testPoint[lv_testIndex]);
        if ((lv_validPointTest == lv_cPointRamp)) {
            lv_testPoint[lv_testIndex] = PointWithOffsetPolar(lv_nodePoint, (lv_cRadiusB - 6.0), lv_testAngle);
            lv_validPointTest = libSCPL_gf_AutoCreepPointValid(lp_node, lv_testPoint[lv_testIndex]);
        }
        if ((lv_validPointTest == lv_cPointValid)) {
            lv_testPointCost[lv_testIndex] = PointPathingCost(lv_testPoint[lv_testIndex], lv_targetPoint);
            if ((libSCPL_gf_PointsHaveHeightDifference(lv_nodePoint, lv_testPoint[lv_testIndex]) == true)) {
                lv_testPointCost[lv_testIndex] -= 0.5;
            }
            if ((lv_testPointCost[lv_testIndex] < lv_lowestCost)) {
                lv_lowestCost = lv_testPointCost[lv_testIndex];
                lv_lowestCostIndex = lv_testIndex;
            }
            lv_testIndex += 1;
        }
    }
    if ((lv_lowestCostIndex == -1)) {
        return null;
    }
    lv_bestPoint = lv_testPoint[lv_lowestCostIndex];
    return lv_bestPoint;
}

int libSCPL_gf_AutoCreepPointValid (unit lp_node, point lp_point) {
    // Variable Declarations
    point lv_nodePoint;
    fixed lv_nodeDistance;
    fixed lv_nodePathingCost;
    int lv_playerIndex;
    fixed lv_crowdRadius;
    int lv_crowdCount;

    // Variable Initialization

    // Implementation
    lv_playerIndex = UnitGetOwner(lp_node);
    lv_nodePoint = UnitGetPosition(lp_node);
    lv_nodeDistance = DistanceBetweenPoints(lp_point, lv_nodePoint);
    lv_nodePathingCost = PointPathingCost(lp_point, lv_nodePoint);
    lv_crowdRadius = 5.0;
    if ((RegionContainsPoint(libSCPL_gv_map.lv_baseRegion, lp_point) == true)) {
        return 1;
    }
    if ((lv_nodePathingCost > 10.0)) {
        return 1;
    }
    if (((WorldHeight(c_heightMapGround, lp_point) - WorldHeight(c_heightMapGround, lv_nodePoint)) > 1.0) && (VisIsVisibleForPlayer(lv_playerIndex, lp_point) == false)) {
        return 2;
    }
    if ((UnitOrderIsValid(lp_node, OrderTargetingPoint(AbilityCommand("CreepTumorBuild", 0), lp_point)) == false)) {
        return 1;
    }
    if ((CreepAdjacent(lp_point) < 5)) {
        return 1;
    }
    return 0;
}

void libSCPL_gf_AutoCreepDebugAll (int lp_playerIndex) {
    int autoAD2C4540_ae;
    int autoAD2C4540_ai;

    // Variable Declarations
    int lv_lineageIndex;

    // Variable Initialization

    // Implementation
    autoAD2C4540_ae = libSCPL_gv_player[lp_playerIndex].lv_globalZerg_AutoCreepLineageCount;
    autoAD2C4540_ai = 1;
    lv_lineageIndex = 1;
    for ( ; ( (autoAD2C4540_ai >= 0 && lv_lineageIndex <= autoAD2C4540_ae) || (autoAD2C4540_ai <= 0 && lv_lineageIndex >= autoAD2C4540_ae) ) ; lv_lineageIndex += autoAD2C4540_ai ) {
        UnitGroupLoopBegin(libSCPL_gv_player[lp_playerIndex].lv_globalZerg_AutoCreepLineage[lv_lineageIndex].lv_zzUnitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libSCPL_gf_AutoCreepDebug(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
}

void libSCPL_gf_AutoCreepDebug (unit lp_unit) {
    // Variable Declarations
    int lv_unitTag;
    unit lv_target;
    int lv_lineageIndex;
    int lv_targetIndex;
    int lv_playerIndex;
    string lv_key;
    string lv_textTagDisplay;
    int lv_textTag;

    // Variable Initialization
    lv_key = "";
    lv_textTagDisplay = "";
    lv_textTag = c_textTagNone;

    // Implementation
    lv_unitTag = UnitGetTag(lp_unit);
    lv_key = ("ACS-" + IntToString(lv_unitTag));
    lv_textTag = libNtve_gf_ValueFromDataTableTextTag(true, lv_key);
    lv_playerIndex = UnitGetOwner(lp_unit);
    lv_lineageIndex = FixedToInt(libSCPL_gf_UnitChargeLink(lp_unit, "CreepParentIndex"));
    lv_target = libSCPL_gv_player[lv_playerIndex].lv_globalZerg_AutoCreepLineage[lv_lineageIndex].lv_target;
    lv_targetIndex = FixedToInt(libSCPL_gf_UnitChargeLink(lp_unit, "CreepTargetIndex"));
    lv_textTagDisplay = ("[" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lv_lineageIndex) + "]" + " >> " + "[" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lv_targetIndex) + "]");
    if ((lv_textTag == c_textTagNone)) {
        TextTagCreate(StringToText(lv_textTagDisplay), 24, UnitGetPosition(lp_unit), 1.0, true, false, PlayerGroupAll());
        libNtve_gf_SaveDataTableValueTextTag(true, lv_key, TextTagLastCreated());
    }
    else {
        TextTagSetText(lv_textTag, StringToText(lv_textTagDisplay));
    }
}

void libSCPL_gf_InitializeUIHookups () {
    playergroup auto1771840D_g;
    int auto1771840D_p;
    int autoAAAC514B_ae;
    int autoAAAC514B_ai;

    // Variable Declarations
    int lv_frameIndex;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    auto1771840D_g = PlayerGroupActive(); 
    auto1771840D_p = 1;
    for ( ; auto1771840D_p <= PlayerGroupCount(auto1771840D_g) ; auto1771840D_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto1771840D_g, auto1771840D_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto1771840D_g, auto1771840D_p);
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/LeaderPlus/PlayerProduction" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lv_playerIndex)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_playerIndex), true);
    }
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/ResourceLabel2Spend");
    libSCPL_gv_uI.lv_resourceMineralSpend = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/ResourceLabel3Spend");
    libSCPL_gv_uI.lv_resourceVespeneSpend = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/ResourceLabel2SpendAttention");
    libSCPL_gv_uI.lv_resourceMineralSpendAttention = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/ResourceLabel3SpendAttention");
    libSCPL_gv_uI.lv_resourceVespeneSpendAttention = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCommandPanel, "UIContainer/ConsoleUIContainer/ActiveUnitCommandContainer/CommandCard");
    libSCPL_gv_uI.lv_consoleActiveCommandCard = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCommandPanel, "UIContainer/ConsoleUIContainer/GlobalRallyPanel");
    libSCPL_gv_uI.lv_consoleRallyCommandCard = DialogControlLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    autoAAAC514B_ae = 8;
    autoAAAC514B_ai = 1;
    lv_frameIndex = 1;
    for ( ; ( (autoAAAC514B_ai >= 0 && lv_frameIndex <= autoAAAC514B_ae) || (autoAAAC514B_ai <= 0 && lv_frameIndex >= autoAAAC514B_ae) ) ; lv_frameIndex += autoAAAC514B_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/ConsoleUIContainer/AxiomACGContainer/Group" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lv_frameIndex)));
        libSCPL_gv_uI.lv_consoleControlGroupButton[lv_frameIndex] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/ConsoleUIContainer/AxiomACGContainer/Assign" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lv_frameIndex)));
        libSCPL_gv_uI.lv_consoleControlGroupButtonAssign[lv_frameIndex] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/ConsoleUIContainer/AxiomACGContainer/Add" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lv_frameIndex)));
        libSCPL_gv_uI.lv_consoleControlGroupButtonAdd[lv_frameIndex] = DialogControlLastCreated();
        DialogControlHookup(libSCPL_gv_uI.lv_consoleControlGroupButton[lv_frameIndex], c_triggerControlTypeImage, "UnitImage");
        libSCPL_gv_uI.lv_consoleControlGroupIcon[lv_frameIndex] = DialogControlLastCreated();
        DialogControlHookup(libSCPL_gv_uI.lv_consoleControlGroupButton[lv_frameIndex], c_triggerControlTypeLabel, "CountLabel");
        libSCPL_gv_uI.lv_consoleControlGroupLabel[lv_frameIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemCurrentValue(libSCPL_gv_uI.lv_consoleControlGroupButton[lv_frameIndex], lv_frameIndex, PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(libSCPL_gv_uI.lv_consoleControlGroupButtonAdd[lv_frameIndex], lv_frameIndex, PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(libSCPL_gv_uI.lv_consoleControlGroupButtonAssign[lv_frameIndex], lv_frameIndex, PlayerGroupAll());
        libSCPL_gf_TriggerEventRegisterDialogItemClicked(libSCPL_gt_ControlGroupSelect, libSCPL_gv_uI.lv_consoleControlGroupButton[lv_frameIndex]);
        libSCPL_gf_TriggerEventRegisterDialogItemClicked(libSCPL_gt_ControlGroupAdd, libSCPL_gv_uI.lv_consoleControlGroupButtonAdd[lv_frameIndex]);
        libSCPL_gf_TriggerEventRegisterDialogItemClicked(libSCPL_gt_ControlGroupAssign, libSCPL_gv_uI.lv_consoleControlGroupButtonAssign[lv_frameIndex]);
    }
    DialogControlHookupStandard(c_triggerControlTypeCheckBox, "UIContainer/ConsoleUIContainer/TutorialTipsCheckBox");
    libSCPL_gv_uI.lv_gameOptionGameTips = DialogControlLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
}

trigger auto_libSCPL_gf_GameTipCreateInstance_Trigger = null;
string auto_libSCPL_gf_GameTipCreateInstance_lp_tipInstance;
int auto_libSCPL_gf_GameTipCreateInstance_lp_playerIndex;

void libSCPL_gf_GameTipCreateInstance (string lp_tipInstance, int lp_playerIndex) {
    auto_libSCPL_gf_GameTipCreateInstance_lp_tipInstance = lp_tipInstance;
    auto_libSCPL_gf_GameTipCreateInstance_lp_playerIndex = lp_playerIndex;

    if (auto_libSCPL_gf_GameTipCreateInstance_Trigger == null) {
        auto_libSCPL_gf_GameTipCreateInstance_Trigger = TriggerCreate("auto_libSCPL_gf_GameTipCreateInstance_TriggerFunc");
    }

    TriggerExecute(auto_libSCPL_gf_GameTipCreateInstance_Trigger, false, false);
}

bool auto_libSCPL_gf_GameTipCreateInstance_TriggerFunc (bool testConds, bool runActions) {
    string lp_tipInstance = auto_libSCPL_gf_GameTipCreateInstance_lp_tipInstance;
    int lp_playerIndex = auto_libSCPL_gf_GameTipCreateInstance_lp_playerIndex;

    // Variable Declarations
    int lv_dialog;
    string lv_frameTemplate;
    int lv_frameLabel;
    int lv_frame;

    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_frameTemplate = "";
    lv_frameLabel = c_invalidDialogControlId;
    lv_frame = c_invalidDialogControlId;

    // Implementation
    if (((DataTableGetBool(true, ((lp_tipInstance) + "|" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lp_playerIndex))) == true) || (libSCPL_gv_player[lp_playerIndex].lv_global_ShowTips == false))) {
        return true;
    }
    DataTableSetBool(true, ((lp_tipInstance) + "|" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lp_playerIndex)), true);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    lv_dialog = DialogLastCreated();
    DialogSetImageVisible(lv_dialog, false);
    DialogSetFullscreen(lv_dialog, true);
    lv_frameTemplate = ("PlusGameTipsTemplates/GameTip" + (UserDataGetUserInstance("SCPTipData", lp_tipInstance, "Position", 1)));
    DialogControlCreateFromTemplate(lv_dialog, c_triggerControlTypePanel, lv_frameTemplate);
    lv_frame = DialogControlLastCreated();
    DialogControlHookup(lv_frame, c_triggerControlTypeLabel, "TipText");
    lv_frameLabel = DialogControlLastCreated();
    DialogSetVisible(lv_dialog, PlayerGroupSingle(lp_playerIndex), true);
    libNtve_gf_SetDialogItemText(lv_frameLabel, StringToText(UserDataGetString("SCPTipData", lp_tipInstance, "Text", 1)), PlayerGroupAll());
    Wait(13.0, c_timeReal);
    DialogDestroy(lv_dialog);
    return true;
}

trigger auto_libSCPL_gf_GameTipCreateResource_Trigger = null;
string auto_libSCPL_gf_GameTipCreateResource_lp_tipInstance;
string auto_libSCPL_gf_GameTipCreateResource_lp_tipPosition;
int auto_libSCPL_gf_GameTipCreateResource_lp_playerIndex;

void libSCPL_gf_GameTipCreateResource (string lp_tipInstance, string lp_tipPosition, int lp_playerIndex) {
    auto_libSCPL_gf_GameTipCreateResource_lp_tipInstance = lp_tipInstance;
    auto_libSCPL_gf_GameTipCreateResource_lp_tipPosition = lp_tipPosition;
    auto_libSCPL_gf_GameTipCreateResource_lp_playerIndex = lp_playerIndex;

    if (auto_libSCPL_gf_GameTipCreateResource_Trigger == null) {
        auto_libSCPL_gf_GameTipCreateResource_Trigger = TriggerCreate("auto_libSCPL_gf_GameTipCreateResource_TriggerFunc");
    }

    TriggerExecute(auto_libSCPL_gf_GameTipCreateResource_Trigger, false, false);
}

bool auto_libSCPL_gf_GameTipCreateResource_TriggerFunc (bool testConds, bool runActions) {
    string lp_tipInstance = auto_libSCPL_gf_GameTipCreateResource_lp_tipInstance;
    string lp_tipPosition = auto_libSCPL_gf_GameTipCreateResource_lp_tipPosition;
    int lp_playerIndex = auto_libSCPL_gf_GameTipCreateResource_lp_playerIndex;

    // Variable Declarations
    int lv_dialog;
    string lv_frameTemplate;
    int lv_frameLabel;
    int lv_frame;

    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_frameTemplate = "";
    lv_frameLabel = c_invalidDialogControlId;
    lv_frame = c_invalidDialogControlId;

    // Implementation
    if (((DataTableGetBool(true, ((lp_tipInstance) + "|" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lp_playerIndex))) == true) || (libSCPL_gv_player[lp_playerIndex].lv_global_ShowTips == false) || (libSCPL_gv_player[lp_playerIndex].lv_resourceTip != c_invalidDialogId))) {
        return true;
    }
    DataTableSetBool(true, ((lp_tipInstance) + "|" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lp_playerIndex)), true);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    lv_dialog = DialogLastCreated();
    libSCPL_gv_player[lp_playerIndex].lv_resourceTip = lv_dialog;
    DialogSetImageVisible(lv_dialog, false);
    DialogSetFullscreen(lv_dialog, true);
    lv_frameTemplate = ("PlusGameTipsTemplates/GameTip" + lp_tipPosition);
    DialogControlCreateFromTemplate(lv_dialog, c_triggerControlTypePanel, lv_frameTemplate);
    lv_frame = DialogControlLastCreated();
    DialogControlHookup(lv_frame, c_triggerControlTypeLabel, "TipText");
    lv_frameLabel = DialogControlLastCreated();
    DialogSetVisible(lv_dialog, PlayerGroupSingle(lp_playerIndex), true);
    libNtve_gf_SetDialogItemText(lv_frameLabel, StringToText(UserDataGetString("SCPTipData", lp_tipInstance, "Text", 1)), PlayerGroupAll());
    Wait(13.0, c_timeReal);
    DialogDestroy(lv_dialog);
    libSCPL_gv_player[lp_playerIndex].lv_resourceTip = c_invalidDialogId;
    return true;
}

trigger auto_libSCPL_gf_GameTipCreateControlGroup_Trigger = null;
string auto_libSCPL_gf_GameTipCreateControlGroup_lp_tipInstance;
int auto_libSCPL_gf_GameTipCreateControlGroup_lp_controlGroup;
int auto_libSCPL_gf_GameTipCreateControlGroup_lp_playerIndex;

void libSCPL_gf_GameTipCreateControlGroup (string lp_tipInstance, int lp_controlGroup, int lp_playerIndex) {
    auto_libSCPL_gf_GameTipCreateControlGroup_lp_tipInstance = lp_tipInstance;
    auto_libSCPL_gf_GameTipCreateControlGroup_lp_controlGroup = lp_controlGroup;
    auto_libSCPL_gf_GameTipCreateControlGroup_lp_playerIndex = lp_playerIndex;

    if (auto_libSCPL_gf_GameTipCreateControlGroup_Trigger == null) {
        auto_libSCPL_gf_GameTipCreateControlGroup_Trigger = TriggerCreate("auto_libSCPL_gf_GameTipCreateControlGroup_TriggerFunc");
    }

    TriggerExecute(auto_libSCPL_gf_GameTipCreateControlGroup_Trigger, false, false);
}

bool auto_libSCPL_gf_GameTipCreateControlGroup_TriggerFunc (bool testConds, bool runActions) {
    string lp_tipInstance = auto_libSCPL_gf_GameTipCreateControlGroup_lp_tipInstance;
    int lp_controlGroup = auto_libSCPL_gf_GameTipCreateControlGroup_lp_controlGroup;
    int lp_playerIndex = auto_libSCPL_gf_GameTipCreateControlGroup_lp_playerIndex;

    // Variable Declarations
    int lv_dialog;
    string lv_frameTemplate;
    int lv_frameLabel;
    int lv_frame;

    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_frameTemplate = "";
    lv_frameLabel = c_invalidDialogControlId;
    lv_frame = c_invalidDialogControlId;

    // Implementation
    if (((libSCPL_gv_player[lp_playerIndex].lv_global_ShowTips == false) || (DataTableGetBool(true, ((lp_tipInstance) + "|" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lp_playerIndex))) == true) || (libSCPL_gv_player[lp_playerIndex].lv_controlGroupTip[lp_controlGroup] != c_invalidDialogId))) {
        return true;
    }
    DataTableSetBool(true, ((lp_tipInstance) + "|" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lp_playerIndex)), true);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    lv_dialog = DialogLastCreated();
    libSCPL_gv_player[lp_playerIndex].lv_controlGroupTip[lp_controlGroup] = lv_dialog;
    DialogSetImageVisible(lv_dialog, false);
    DialogSetFullscreen(lv_dialog, true);
    lv_frameTemplate = ("PlusGameTipsTemplates/GameTip" + "ControlGroup" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lp_controlGroup));
    DialogControlCreateFromTemplate(lv_dialog, c_triggerControlTypePanel, lv_frameTemplate);
    lv_frame = DialogControlLastCreated();
    DialogControlHookup(lv_frame, c_triggerControlTypeLabel, "TipText");
    lv_frameLabel = DialogControlLastCreated();
    DialogSetVisible(lv_dialog, PlayerGroupSingle(lp_playerIndex), true);
    libNtve_gf_SetDialogItemText(lv_frameLabel, StringToText(UserDataGetString("SCPTipData", lp_tipInstance, "Text", 1)), PlayerGroupAll());
    Wait(13.0, c_timeReal);
    libSCPL_gv_player[lp_playerIndex].lv_controlGroupTip[lp_controlGroup] = c_invalidDialogId;
    DialogDestroy(lv_dialog);
    return true;
}

trigger auto_libSCPL_gf_GameTipCreateSimple_Trigger = null;
string auto_libSCPL_gf_GameTipCreateSimple_lp_tipPosition;
string auto_libSCPL_gf_GameTipCreateSimple_lp_tipString;
int auto_libSCPL_gf_GameTipCreateSimple_lp_playerIndex;

void libSCPL_gf_GameTipCreateSimple (string lp_tipPosition, string lp_tipString, int lp_playerIndex) {
    auto_libSCPL_gf_GameTipCreateSimple_lp_tipPosition = lp_tipPosition;
    auto_libSCPL_gf_GameTipCreateSimple_lp_tipString = lp_tipString;
    auto_libSCPL_gf_GameTipCreateSimple_lp_playerIndex = lp_playerIndex;

    if (auto_libSCPL_gf_GameTipCreateSimple_Trigger == null) {
        auto_libSCPL_gf_GameTipCreateSimple_Trigger = TriggerCreate("auto_libSCPL_gf_GameTipCreateSimple_TriggerFunc");
    }

    TriggerExecute(auto_libSCPL_gf_GameTipCreateSimple_Trigger, false, false);
}

bool auto_libSCPL_gf_GameTipCreateSimple_TriggerFunc (bool testConds, bool runActions) {
    string lp_tipPosition = auto_libSCPL_gf_GameTipCreateSimple_lp_tipPosition;
    string lp_tipString = auto_libSCPL_gf_GameTipCreateSimple_lp_tipString;
    int lp_playerIndex = auto_libSCPL_gf_GameTipCreateSimple_lp_playerIndex;

    // Variable Declarations
    int lv_dialog;
    string lv_frameTemplate;
    int lv_frameLabel;
    int lv_frame;

    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_frameTemplate = "";
    lv_frameLabel = c_invalidDialogControlId;
    lv_frame = c_invalidDialogControlId;

    // Implementation
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    lv_dialog = DialogLastCreated();
    DialogSetImageVisible(lv_dialog, false);
    DialogSetFullscreen(lv_dialog, true);
    lv_frameTemplate = ("PlusGameTipsTemplates/GameTip" + lp_tipPosition);
    DialogControlCreateFromTemplate(lv_dialog, c_triggerControlTypePanel, lv_frameTemplate);
    lv_frame = DialogControlLastCreated();
    DialogControlHookup(lv_frame, c_triggerControlTypeLabel, "TipText");
    lv_frameLabel = DialogControlLastCreated();
    DialogSetVisible(lv_dialog, PlayerGroupSingle(lp_playerIndex), true);
    libNtve_gf_SetDialogItemText(lv_frameLabel, StringToText(lp_tipString), PlayerGroupAll());
    Wait(13.0, c_timeReal);
    DialogDestroy(lv_dialog);
    return true;
}

void libSCPL_gf_UpgradeNotificationsRemoveRunningUpgrade (int lp_slot, int lp_playerIndex) {
    int auto8614652F_ae;
    int auto8614652F_ai;

    // Variable Declarations
    int lv_count;
    string lv_upgrade;
    int lv_sLOT_MAX_INDEX1;
    playergroup lv_pLAYER;

    // Variable Initialization
    lv_sLOT_MAX_INDEX1 = (libSCPL_gv_upgradeNotificationsMaxUISlots + 1);
    lv_pLAYER = PlayerGroupEmpty();

    // Implementation
    lv_pLAYER = PlayerGroupSingle(lp_playerIndex);
    auto8614652F_ae = libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex];
    auto8614652F_ai = 1;
    lv_count = (lp_slot + 1);
    for ( ; ( (auto8614652F_ai >= 0 && lv_count <= auto8614652F_ae) || (auto8614652F_ai <= 0 && lv_count >= auto8614652F_ae) ) ; lv_count += auto8614652F_ai ) {
        if ((lv_count <= libSCPL_gv_upgradeNotificationsMaxUISlots)) {
            libSCPL_gf_UpgradeNotificationsSetSlotData((lv_count - 1), libNtve_gf_DialogItemText(libSCPL_gv_upgradeNotifications.lv_itemName[lv_count], lp_playerIndex), (libNtve_gf_DialogItemImage(libSCPL_gv_upgradeNotifications.lv_itemIcon[lv_count], lp_playerIndex)), DialogControlIsVisible(libSCPL_gv_upgradeNotifications.lv_itemPanel[lv_count], lp_playerIndex), lp_playerIndex);
            libSCPL_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)][lp_playerIndex] = libSCPL_gv_upgradeNotifications.lv_timerDestruction[lv_count][lp_playerIndex];
            libNtve_gf_SetDialogItemCurrentValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[(lv_count - 1)], libNtve_gf_DialogItemValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[lv_count], lp_playerIndex), lv_pLAYER);
            libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], libNtve_gf_DialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[lv_count], lp_playerIndex), lv_pLAYER);
            libSCPL_gv_upgradeNotifications.lv_slotStatus[(lv_count - 1)][lp_playerIndex] = libSCPL_gv_upgradeNotifications.lv_slotStatus[lv_count][lp_playerIndex];
            if ((TimerGetElapsed(libSCPL_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)][lp_playerIndex]) <= 0.0)) {
                libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], StringToText(""), lv_pLAYER);
                DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], lv_pLAYER, true);
                DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], lv_pLAYER, false);
            }
            else {
                libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], libNtve_gf_DialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[lv_count], lp_playerIndex), lv_pLAYER);
            }
        }
        else {
            libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], libNtve_gf_DialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[lv_count], lp_playerIndex), lv_pLAYER);
            if ((lv_count == lv_sLOT_MAX_INDEX1)) {
                lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(libSCPL_gv_upgradeNotifications.lv_slotFacility[lv_count][lp_playerIndex], 1, 1);
                libSCPL_gf_UpgradeNotificationsSetSlotData((lv_count - 1), libSCPL_gf_UpgradeNotificationsUpgradeName(lv_upgrade, lp_playerIndex), libSCPL_gf_UpgradeNotificationsUpgradeImage(lv_upgrade, lp_playerIndex), libSCPL_gf_UpgradeNotificationsUpgradeNeedsToBeVisible(UnitQueueItemTime(libSCPL_gv_upgradeNotifications.lv_slotFacility[lv_count][lp_playerIndex], c_unitQueueTimeRemaining, 1)), lp_playerIndex);
                libSCPL_gv_upgradeNotifications.lv_slotStatus[(lv_count - 1)][lp_playerIndex] = libSCPL_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
                libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], StringToText(""), lv_pLAYER);
                DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], lv_pLAYER, true);
                DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], lv_pLAYER, false);
                libSCPL_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)][lp_playerIndex] = TimerCreate();
            }

        }
        libSCPL_gv_upgradeNotifications.lv_slotFacility[(lv_count - 1)][lp_playerIndex] = libSCPL_gv_upgradeNotifications.lv_slotFacility[lv_count][lp_playerIndex];
    }
    libSCPL_gv_upgradeNotifications.lv_slotFacility[libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex]][lp_playerIndex] = null;
    if ((libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex] <= libSCPL_gv_upgradeNotificationsMaxUISlots)) {
        DialogControlSendAnimationEvent(libSCPL_gv_upgradeNotifications.lv_itemPanel[libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex]], lv_pLAYER, "EventHide");
    }
    libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex] -= 1;
}

void libSCPL_gf_UpgradeNotificationsRemoveRunningUpgradeImmediate (int lp_slot, int lp_playerIndex) {
    int auto30D7FA82_ae;
    int auto30D7FA82_ai;

    // Variable Declarations
    int lv_count;
    string lv_upgrade;
    int lv_sLOT_MAX_INDEX1;
    playergroup lv_pLAYER;

    // Variable Initialization
    lv_sLOT_MAX_INDEX1 = (libSCPL_gv_upgradeNotificationsMaxUISlots + 1);
    lv_pLAYER = PlayerGroupEmpty();

    // Implementation
    lv_pLAYER = PlayerGroupSingle(lp_playerIndex);
    auto30D7FA82_ae = libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex];
    auto30D7FA82_ai = 1;
    lv_count = (lp_slot + 1);
    for ( ; ( (auto30D7FA82_ai >= 0 && lv_count <= auto30D7FA82_ae) || (auto30D7FA82_ai <= 0 && lv_count >= auto30D7FA82_ae) ) ; lv_count += auto30D7FA82_ai ) {
        if ((lv_count <= libSCPL_gv_upgradeNotificationsMaxUISlots)) {
            libSCPL_gf_UpgradeNotificationsSetSlotData((lv_count - 1), libNtve_gf_DialogItemText(libSCPL_gv_upgradeNotifications.lv_itemName[lv_count], lp_playerIndex), (libNtve_gf_DialogItemImage(libSCPL_gv_upgradeNotifications.lv_itemIcon[lv_count], lp_playerIndex)), DialogControlIsVisible(libSCPL_gv_upgradeNotifications.lv_itemPanel[lv_count], lp_playerIndex), lp_playerIndex);
            libSCPL_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)][lp_playerIndex] = libSCPL_gv_upgradeNotifications.lv_timerDestruction[lv_count][lp_playerIndex];
            libNtve_gf_SetDialogItemCurrentValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[(lv_count - 1)], libNtve_gf_DialogItemValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[lv_count], lp_playerIndex), lv_pLAYER);
            libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], libNtve_gf_DialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[lv_count], lp_playerIndex), lv_pLAYER);
            libSCPL_gv_upgradeNotifications.lv_slotStatus[(lv_count - 1)][lp_playerIndex] = libSCPL_gv_upgradeNotifications.lv_slotStatus[lv_count][lp_playerIndex];
            if ((TimerGetElapsed(libSCPL_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)][lp_playerIndex]) <= 0.0)) {
                libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], StringToText(""), lv_pLAYER);
                DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], lv_pLAYER, true);
                DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], lv_pLAYER, false);
            }
            else {
                libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], libNtve_gf_DialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[lv_count], lp_playerIndex), lv_pLAYER);
            }
        }
        else {
            libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], libNtve_gf_DialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[lv_count], lp_playerIndex), lv_pLAYER);
            if ((lv_count == lv_sLOT_MAX_INDEX1)) {
                lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(libSCPL_gv_upgradeNotifications.lv_slotFacility[lv_count][lp_playerIndex], 1, 1);
                libSCPL_gf_UpgradeNotificationsSetSlotData((lv_count - 1), libSCPL_gf_UpgradeNotificationsUpgradeName(lv_upgrade, lp_playerIndex), libSCPL_gf_UpgradeNotificationsUpgradeImage(lv_upgrade, lp_playerIndex), libSCPL_gf_UpgradeNotificationsUpgradeNeedsToBeVisible(UnitQueueItemTime(libSCPL_gv_upgradeNotifications.lv_slotFacility[lv_count][lp_playerIndex], c_unitQueueTimeRemaining, 1)), lp_playerIndex);
                libSCPL_gv_upgradeNotifications.lv_slotStatus[(lv_count - 1)][lp_playerIndex] = libSCPL_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
                libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], StringToText(""), lv_pLAYER);
                DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], lv_pLAYER, true);
                DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], lv_pLAYER, false);
                libSCPL_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)][lp_playerIndex] = TimerCreate();
            }

        }
        libSCPL_gv_upgradeNotifications.lv_slotFacility[(lv_count - 1)][lp_playerIndex] = libSCPL_gv_upgradeNotifications.lv_slotFacility[lv_count][lp_playerIndex];
    }
    libSCPL_gv_upgradeNotifications.lv_slotFacility[libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex]][lp_playerIndex] = null;
    if ((libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex] <= libSCPL_gv_upgradeNotificationsMaxUISlots)) {
        libSCPL_gf_UpgradeNotificationsSetSlotData(libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex], StringToText(""), "Assets\\Textures\\black.dds", false, lp_playerIndex);
        libSCPL_gv_upgradeNotifications.lv_slotStatus[libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex]][lp_playerIndex] = libSCPL_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
        libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex]], StringToText(""), lv_pLAYER);
        libNtve_gf_SetDialogItemCurrentValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex]], 0.0, lv_pLAYER);
        libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex]], StringToText(""), lv_pLAYER);
        libSCPL_gv_upgradeNotifications.lv_timerDestruction[libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex]][lp_playerIndex] = TimerCreate();
    }
    libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex] -= 1;
}

int libSCPL_gf_UpgradeNotificationsFacilitySlot (unit lp_facility, int lp_playerIndex) {
    int autoDF4E1DBE_ae;
    int autoDF4E1DBE_ai;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    autoDF4E1DBE_ae = libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex];
    autoDF4E1DBE_ai = 1;
    lv_count = 0;
    for ( ; ( (autoDF4E1DBE_ai >= 0 && lv_count <= autoDF4E1DBE_ae) || (autoDF4E1DBE_ai <= 0 && lv_count >= autoDF4E1DBE_ae) ) ; lv_count += autoDF4E1DBE_ai ) {
        if ((libSCPL_gv_upgradeNotifications.lv_slotFacility[lv_count][lp_playerIndex] == lp_facility) && ((libSCPL_gv_upgradeNotifications.lv_slotStatus[lv_count][lp_playerIndex] == libSCPL_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade) || (libSCPL_gv_upgradeNotifications.lv_slotStatus[lv_count][lp_playerIndex] == libSCPL_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade))) {
            return lv_count;
        }
    }
    return -1;
}

string libSCPL_gf_UpgradeNotificationsUpgradeImage (string lp_upgrade, int lp_playerIndex) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Icon", lp_playerIndex));
}

text libSCPL_gf_UpgradeNotificationsUpgradeName (string lp_upgrade, int lp_playerIndex) {
    string autoF5081664_val;
    string autoD17A1825_val;

    // Variable Declarations
    string lv_unittype;

    // Variable Initialization

    // Implementation
    autoF5081664_val = lp_upgrade;
    if (autoF5081664_val == "ProtossGroundWeaponsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_DCAE8CF0");
    }
    else if (autoF5081664_val == "ProtossGroundWeaponsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_FFCF9FAD");
    }
    else if (autoF5081664_val == "ProtossGroundWeaponsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_42975F88");
    }
    else if (autoF5081664_val == "ProtossGroundArmorsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_F140373A");
    }
    else if (autoF5081664_val == "ProtossGroundArmorsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_28359667");
    }
    else if (autoF5081664_val == "ProtossGroundArmorsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_58EE146C");
    }
    else if (autoF5081664_val == "ProtossShieldsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_283F79C7");
    }
    else if (autoF5081664_val == "ProtossShieldsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_260F9D44");
    }
    else if (autoF5081664_val == "ProtossShieldsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_87C323B4");
    }
    else if (autoF5081664_val == "ProtossAirWeaponsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_B03CC18D");
    }
    else if (autoF5081664_val == "ProtossAirWeaponsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_1D2AE741");
    }
    else if (autoF5081664_val == "ProtossAirWeaponsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_971E6079");
    }
    else if (autoF5081664_val == "ProtossAirArmorsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_DCF677EB");
    }
    else if (autoF5081664_val == "ProtossAirArmorsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_297BE571");
    }
    else if (autoF5081664_val == "ProtossAirArmorsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_FD49BB3C");
    }
    else if (autoF5081664_val == "PsiStormTech") {
        return StringExternal("Param/Value/lib_SCPL_B7138B79");
    }
    else if (autoF5081664_val == "haltech") {
        return StringExternal("Param/Value/lib_SCPL_A4C6AA07");
    }
    else if (autoF5081664_val == "BlinkTech") {
        return StringExternal("Param/Value/lib_SCPL_D7BFAED5");
    }
    else if (autoF5081664_val == "WarpGateResearch") {
        return StringExternal("Param/Value/lib_SCPL_53655C25");
    }
    else if (autoF5081664_val == "CarrierLaunchSpeedUpgrade") {
        return StringExternal("Param/Value/lib_SCPL_37AE81D3");
    }
    else if (autoF5081664_val == "ExtendedThermalLance") {
        return StringExternal("Param/Value/lib_SCPL_49EACCC1");
    }
    else if (autoF5081664_val == "ObserverGraviticBooster") {
        return StringExternal("Param/Value/lib_SCPL_8BBDE51E");
    }
    else if (autoF5081664_val == "GraviticDrive") {
        return StringExternal("Param/Value/lib_SCPL_E41DC998");
    }
    else if (autoF5081664_val == "Charge") {
        return StringExternal("Param/Value/lib_SCPL_A223E8B9");
    }
    else if (autoF5081664_val == "TerranInfantryWeaponsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_A2E66935");
    }
    else if (autoF5081664_val == "TerranInfantryWeaponsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_C22343DA");
    }
    else if (autoF5081664_val == "TerranInfantryWeaponsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_A84B8F63");
    }
    else if (autoF5081664_val == "TerranInfantryArmorsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_6A6CE349");
    }
    else if (autoF5081664_val == "TerranInfantryArmorsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_777F6039");
    }
    else if (autoF5081664_val == "TerranInfantryArmorsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_E112C887");
    }
    else if (autoF5081664_val == "TerranShipWeaponsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_1D239EED");
    }
    else if (autoF5081664_val == "TerranShipWeaponsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_22DDD9F8");
    }
    else if (autoF5081664_val == "TerranShipWeaponsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_454A5087");
    }
    else if (autoF5081664_val == "TerranShipArmorsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_29D6BF90");
    }
    else if (autoF5081664_val == "TerranShipArmorsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_E08A5638");
    }
    else if (autoF5081664_val == "TerranShipArmorsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_F6E71BB9");
    }
    else if (autoF5081664_val == "TerranVehicleWeaponsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_82F18745");
    }
    else if (autoF5081664_val == "TerranVehicleWeaponsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_31B36035");
    }
    else if (autoF5081664_val == "TerranVehicleWeaponsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_3FF09317");
    }
    else if (autoF5081664_val == "TerranVehicleArmorsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_025CBB60");
    }
    else if (autoF5081664_val == "TerranVehicleArmorsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_3E394597");
    }
    else if (autoF5081664_val == "TerranVehicleArmorsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_CC951DDB");
    }
    else if (autoF5081664_val == "BansheeCloak") {
        return StringExternal("Param/Value/lib_SCPL_446A6674");
    }
    else if (autoF5081664_val == "PersonalCloaking") {
        return StringExternal("Param/Value/lib_SCPL_23D2DD6B");
    }
    else if (autoF5081664_val == "HighCapacityBarrels") {
        return StringExternal("Param/Value/lib_SCPL_86DBD6A1");
    }
    else if (autoF5081664_val == "PunisherGrenades") {
        return StringExternal("Param/Value/lib_SCPL_8796D3E7");
    }
    else if (autoF5081664_val == "HunterSeeker") {
        return StringExternal("Param/Value/lib_SCPL_3BDC6E5E");
    }
    else if (autoF5081664_val == "SiegeTech") {
        return StringExternal("Param/Value/lib_SCPL_546AA758");
    }
    else if (autoF5081664_val == "Stimpack") {
        return StringExternal("Param/Value/lib_SCPL_1D4ACF86");
    }
    else if (autoF5081664_val == "BattlecruiserEnableSpecializations") {
        return StringExternal("Param/Value/lib_SCPL_C2EDAB79");
    }
    else if (autoF5081664_val == "BattlecruiserBehemothReactor") {
        return StringExternal("Param/Value/lib_SCPL_3095848B");
    }
    else if (autoF5081664_val == "NeosteelFrame") {
        return StringExternal("Param/Value/lib_SCPL_B3EFA97B");
    }
    else if (autoF5081664_val == "GhostMoebiusReactor") {
        return StringExternal("Param/Value/lib_SCPL_40FE5D53");
    }
    else if (autoF5081664_val == "HiSecAutoTracking") {
        return StringExternal("Param/Value/lib_SCPL_00AFF88E");
    }
    else if (autoF5081664_val == "ShieldWall") {
        return StringExternal("Param/Value/lib_SCPL_B932CA0A");
    }
    else if (autoF5081664_val == "MedivacCaduceusReactor") {
        return StringExternal("Param/Value/lib_SCPL_F2EA3576");
    }
    else if (autoF5081664_val == "RavenCorvidReactor") {
        return StringExternal("Param/Value/lib_SCPL_95E125EC");
    }
    else if (autoF5081664_val == "DurableMaterials") {
        return StringExternal("Param/Value/lib_SCPL_E584E573");
    }
    else if (autoF5081664_val == "ReaperSpeed") {
        return StringExternal("Param/Value/lib_SCPL_BCDE05EB");
    }
    else if (autoF5081664_val == "TerranBuildingArmor") {
        return StringExternal("Param/Value/lib_SCPL_95A64B80");
    }
    else if (autoF5081664_val == "ZergMeleeWeaponsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_861050BC");
    }
    else if (autoF5081664_val == "ZergMeleeWeaponsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_DB9930FA");
    }
    else if (autoF5081664_val == "ZergMeleeWeaponsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_452D0D6A");
    }
    else if (autoF5081664_val == "ZergMissileWeaponsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_6FEB266F");
    }
    else if (autoF5081664_val == "ZergMissileWeaponsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_DAD60B23");
    }
    else if (autoF5081664_val == "ZergMissileWeaponsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_E920244D");
    }
    else if (autoF5081664_val == "ZergGroundArmorsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_CF8D2A5F");
    }
    else if (autoF5081664_val == "ZergGroundArmorsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_EA9F8E17");
    }
    else if (autoF5081664_val == "ZergGroundArmorsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_27F66D5E");
    }
    else if (autoF5081664_val == "ZergFlyerWeaponsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_B57B0D01");
    }
    else if (autoF5081664_val == "ZergFlyerWeaponsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_1333D60B");
    }
    else if (autoF5081664_val == "ZergFlyerWeaponsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_11275019");
    }
    else if (autoF5081664_val == "ZergFlyerArmorsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_18A272CF");
    }
    else if (autoF5081664_val == "ZergFlyerArmorsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_CDD560F4");
    }
    else if (autoF5081664_val == "ZergFlyerArmorsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_95DE8464");
    }
    else if (autoF5081664_val == "CentrificalHooks") {
        return StringExternal("Param/Value/lib_SCPL_87A1E312");
    }
    else if (autoF5081664_val == "Burrow") {
        return StringExternal("Param/Value/lib_SCPL_B2B3371E");
    }
    else if (autoF5081664_val == "hydraliskspeed") {
        return StringExternal("Param/Value/lib_SCPL_E658D072");
    }
    else if (autoF5081664_val == "InfestorEnergyUpgrade") {
        return StringExternal("Param/Value/lib_SCPL_8A9925E6");
    }
    else if (autoF5081664_val == "overlordspeed") {
        return StringExternal("Param/Value/lib_SCPL_FA23BFC2");
    }
    else if (autoF5081664_val == "overlordtransport") {
        return StringExternal("Param/Value/lib_SCPL_2615D62C");
    }
    else if (autoF5081664_val == "GlialReconstitution") {
        return StringExternal("Param/Value/lib_SCPL_A7B376FC");
    }
    else if (autoF5081664_val == "TunnelingClaws") {
        return StringExternal("Param/Value/lib_SCPL_E04671DF");
    }
    else if (autoF5081664_val == "ChitinousPlating") {
        return StringExternal("Param/Value/lib_SCPL_5C1A1F49");
    }
    else if (autoF5081664_val == "zerglingattackspeed") {
        return StringExternal("Param/Value/lib_SCPL_49834BAA");
    }
    else if (autoF5081664_val == "zerglingmovementspeed") {
        return StringExternal("Param/Value/lib_SCPL_4DFF6AE6");
    }
    else {
    }
    autoD17A1825_val = (lp_upgrade);
    if (autoD17A1825_val == "PhoenixRangeUpgrade") {
        return StringExternal("Param/Value/lib_SCPL_9E8FF45B");
    }
    else if (autoD17A1825_val == "TerranVehicleAndShipArmorsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_435CB8F5");
    }
    else if (autoD17A1825_val == "TerranVehicleAndShipArmorsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_DA61236E");
    }
    else if (autoD17A1825_val == "TerranVehicleAndShipArmorsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_2339C1F2");
    }
    else if (autoD17A1825_val == "TerranVehicleAndShipWeaponsLevel1") {
        return StringExternal("Param/Value/lib_SCPL_28277442");
    }
    else if (autoD17A1825_val == "TerranVehicleAndShipWeaponsLevel2") {
        return StringExternal("Param/Value/lib_SCPL_B1B45ECA");
    }
    else if (autoD17A1825_val == "TerranVehicleAndShipWeaponsLevel3") {
        return StringExternal("Param/Value/lib_SCPL_48F54F47");
    }
    else if (autoD17A1825_val == "DrillClaws") {
        return StringExternal("Param/Value/lib_SCPL_B248EA6C");
    }
    else if (autoD17A1825_val == "TransformationServos") {
        return StringExternal("Param/Value/lib_SCPL_B32111D2");
    }
    else if (autoD17A1825_val == "LocustLifetimeIncrease") {
        return StringExternal("Param/Value/lib_SCPL_39EA1A3F");
    }
    else if (autoD17A1825_val == "NeuralParasite") {
        return StringExternal("Param/Value/lib_SCPL_9FA30676");
    }
    else {
    }
    return StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Name", lp_playerIndex));
}

bool libSCPL_gf_UpgradeNotificationsUpgradeNeedsToBeVisible (fixed lp_remainingTime) {
    // Implementation
    if ((lp_remainingTime <= libSCPL_gv_upgradeNotificationsVisibleTime)) {
        return true;
    }
    return false;
}

trigger auto_libSCPL_gf_UpgradeNotificationsUpdateThread_Trigger = null;
int auto_libSCPL_gf_UpgradeNotificationsUpdateThread_lp_playerIndex;

void libSCPL_gf_UpgradeNotificationsUpdateThread (int lp_playerIndex) {
    auto_libSCPL_gf_UpgradeNotificationsUpdateThread_lp_playerIndex = lp_playerIndex;

    if (auto_libSCPL_gf_UpgradeNotificationsUpdateThread_Trigger == null) {
        auto_libSCPL_gf_UpgradeNotificationsUpdateThread_Trigger = TriggerCreate("auto_libSCPL_gf_UpgradeNotificationsUpdateThread_TriggerFunc");
    }

    TriggerExecute(auto_libSCPL_gf_UpgradeNotificationsUpdateThread_Trigger, false, false);
}

bool auto_libSCPL_gf_UpgradeNotificationsUpdateThread_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerIndex = auto_libSCPL_gf_UpgradeNotificationsUpdateThread_lp_playerIndex;

    int auto5F488D10_ae;
    int auto5F488D10_ai;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    while ((libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex] >= 0)) {
        auto5F488D10_ae = MinI(libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lp_playerIndex], 5);
        auto5F488D10_ai = 1;
        lv_count = 0;
        for ( ; ( (auto5F488D10_ai >= 0 && lv_count <= auto5F488D10_ae) || (auto5F488D10_ai <= 0 && lv_count >= auto5F488D10_ae) ) ; lv_count += auto5F488D10_ai ) {
            if (((lv_count > libSCPL_gv_upgradeNotificationsMaxUISlots) || (libSCPL_gv_upgradeNotifications.lv_slotStatus[lv_count][lp_playerIndex] == libSCPL_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade)) && (libSCPL_gf_UpgradeNotificationsUpgradeNeedsToBeVisible(UnitQueueItemTime(libSCPL_gv_upgradeNotifications.lv_slotFacility[lv_count][lp_playerIndex], c_unitQueueTimeRemaining, 1)) == true)) {
                if ((lv_count <= libSCPL_gv_upgradeNotificationsMaxUISlots)) {
                    DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemPanel[lv_count], PlayerGroupSingle(lp_playerIndex), true);
                    libSCPL_gv_upgradeNotifications.lv_slotStatus[lv_count][lp_playerIndex] = libSCPL_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade;
                }
                libSCPL_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne(lv_count, lp_playerIndex);
            }
            if ((libSCPL_gv_upgradeNotifications.lv_slotStatus[lv_count][lp_playerIndex] == libSCPL_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade)) {
                libSCPL_gf_UpgradeNotificationsUpdateProgressData(lv_count, lp_playerIndex);
            }
        }
        Wait(0.0625, c_timeGame);
        Wait(0.0, c_timeGame);
    }
    libSCPL_gv_upgradeNotifications.lv_updateThreadRunning[lp_playerIndex] = false;
    return true;
}

void libSCPL_gf_UpgradeNotificationsSetStatusLabel (int lp_slot, text lp_status, int lp_playerIndex) {
    // Implementation
    DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[lp_slot], PlayerGroupSingle(lp_playerIndex), false);
    DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[lp_slot], PlayerGroupSingle(lp_playerIndex), true);
    libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[lp_slot], lp_status, PlayerGroupSingle(lp_playerIndex));
}

void libSCPL_gf_UpgradeNotificationsSetSlotData (int lp_slot, text lp_name, string lp_icon, bool lp_visible, int lp_playerIndex) {
    // Variable Declarations
    color lv_color;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemName[lp_slot], lp_name, PlayerGroupSingle(lp_playerIndex));
    libNtve_gf_SetDialogItemImage(libSCPL_gv_upgradeNotifications.lv_itemIcon[lp_slot], lp_icon, PlayerGroupSingle(lp_playerIndex));
    DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemPanel[lp_slot], PlayerGroupSingle(lp_playerIndex), lp_visible);
}

void libSCPL_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne (int lp_slot, int lp_playerIndex) {
    int auto0C1145F3_ae;
    int auto0C1145F3_ai;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    auto0C1145F3_ae = (lp_slot - 1);
    auto0C1145F3_ai = 1;
    lv_count = 0;
    for ( ; ( (auto0C1145F3_ai >= 0 && lv_count <= auto0C1145F3_ae) || (auto0C1145F3_ai <= 0 && lv_count >= auto0C1145F3_ae) ) ; lv_count += auto0C1145F3_ai ) {
        if ((libSCPL_gv_upgradeNotifications.lv_slotStatus[lv_count][lp_playerIndex] == libSCPL_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade)) {
            libSCPL_gf_UpgradeNotificationsSwapSlotInformation(lv_count, lp_slot, lp_playerIndex);
            return ;
        }
    }
}

void libSCPL_gf_UpgradeNotificationsSwapSlotInformation (int lp_slotA, int lp_slotB, int lp_playerIndex) {
    int init_i;

    // Variable Declarations
    int[2] lv_status;
    bool[2] lv_visibility;
    text[2] lv_name;
    string[2] lv_icon;
    color[2] lv_color;
    fixed[2] lv_value;
    timer[2] lv_timer;
    unit lv_facility;

    // Variable Initialization
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_status[init_i] = libSCPL_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_icon[init_i] = "Assets\\Textures\\blank.dds";
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_color[init_i] = Color(100,100,100);
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_timer[init_i] = TimerCreate();
    }

    // Implementation
    if ((lp_slotA <= libSCPL_gv_upgradeNotificationsMaxUISlots)) {
        lv_status[0] = libSCPL_gv_upgradeNotifications.lv_slotStatus[lp_slotA][lp_playerIndex];
        lv_visibility[0] = DialogControlIsVisible(libSCPL_gv_upgradeNotifications.lv_itemPanel[lp_slotA], lp_playerIndex);
        lv_name[0] = libNtve_gf_DialogItemText(libSCPL_gv_upgradeNotifications.lv_itemName[lp_slotA], lp_playerIndex);
        lv_icon[0] = (libNtve_gf_DialogItemImage(libSCPL_gv_upgradeNotifications.lv_itemIcon[lp_slotA], lp_playerIndex));
        lv_color[0] = libNtve_gf_DialogItemColor(libSCPL_gv_upgradeNotifications.lv_itemPanel[lp_slotA], lp_playerIndex);
        lv_value[0] = libNtve_gf_DialogItemValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[lp_slotA], lp_playerIndex);
        lv_timer[0] = libSCPL_gv_upgradeNotifications.lv_timerDestruction[lp_slotA][lp_playerIndex];
    }
    if ((lp_slotB <= libSCPL_gv_upgradeNotificationsMaxUISlots)) {
        lv_status[1] = libSCPL_gv_upgradeNotifications.lv_slotStatus[lp_slotB][lp_playerIndex];
        lv_visibility[1] = DialogControlIsVisible(libSCPL_gv_upgradeNotifications.lv_itemPanel[lp_slotB], lp_playerIndex);
        lv_name[1] = libNtve_gf_DialogItemText(libSCPL_gv_upgradeNotifications.lv_itemName[lp_slotB], lp_playerIndex);
        lv_icon[1] = (libNtve_gf_DialogItemImage(libSCPL_gv_upgradeNotifications.lv_itemIcon[lp_slotB], lp_playerIndex));
        lv_color[1] = libNtve_gf_DialogItemColor(libSCPL_gv_upgradeNotifications.lv_itemPanel[lp_slotB], lp_playerIndex);
        lv_value[1] = libNtve_gf_DialogItemValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[lp_slotB], lp_playerIndex);
        lv_timer[1] = libSCPL_gv_upgradeNotifications.lv_timerDestruction[lp_slotB][lp_playerIndex];
    }
    if ((lp_slotA <= libSCPL_gv_upgradeNotificationsMaxUISlots)) {
        libSCPL_gv_upgradeNotifications.lv_slotStatus[lp_slotA][lp_playerIndex] = lv_status[1];
        libSCPL_gf_UpgradeNotificationsSetSlotData(lp_slotA, lv_name[1], lv_icon[1], lv_visibility[1], lp_playerIndex);
        libNtve_gf_SetDialogItemCurrentValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[lp_slotA], lv_value[1], PlayerGroupSingle(lp_playerIndex));
        libSCPL_gv_upgradeNotifications.lv_timerDestruction[lp_slotA][lp_playerIndex] = lv_timer[1];
    }
    if ((lp_slotB <= libSCPL_gv_upgradeNotificationsMaxUISlots)) {
        libSCPL_gv_upgradeNotifications.lv_slotStatus[lp_slotB][lp_playerIndex] = lv_status[0];
        libSCPL_gf_UpgradeNotificationsSetSlotData(lp_slotB, lv_name[0], lv_icon[0], lv_visibility[0], lp_playerIndex);
        libNtve_gf_SetDialogItemCurrentValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[lp_slotB], lv_value[0], PlayerGroupSingle(lp_playerIndex));
        libSCPL_gv_upgradeNotifications.lv_timerDestruction[lp_slotB][lp_playerIndex] = lv_timer[0];
    }
    lv_facility = libSCPL_gv_upgradeNotifications.lv_slotFacility[lp_slotA][lp_playerIndex];
    libSCPL_gv_upgradeNotifications.lv_slotFacility[lp_slotA][lp_playerIndex] = libSCPL_gv_upgradeNotifications.lv_slotFacility[lp_slotB][lp_playerIndex];
    libSCPL_gv_upgradeNotifications.lv_slotFacility[lp_slotB][lp_playerIndex] = lv_facility;
}

void libSCPL_gf_UpgradeNotificationsUpdateProgressData (int lp_slot, int lp_playerIndex) {
    // Variable Declarations
    fixed lv_remainingTime;
    int lv_remainingSeconds;
    int lv_remainingMilliseconds;
    text lv_extraZero;

    // Variable Initialization
    lv_remainingTime = UnitQueueItemTime(libSCPL_gv_upgradeNotifications.lv_slotFacility[lp_slot][lp_playerIndex], c_unitQueueTimeRemaining, 1);
    lv_remainingSeconds = TruncI(lv_remainingTime);
    lv_remainingMilliseconds = TruncI(((lv_remainingTime - lv_remainingSeconds) * 10.0));

    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[lp_slot], (libSCPL_gv_upgradeNotificationsVisibleTime - lv_remainingTime), PlayerGroupSingle(lp_playerIndex));
    libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[lp_slot], (StringExternal("Param/Value/lib_SCPL_16CF1B5C") + (IntToText(lv_remainingSeconds) + ((StringExternal("Param/Value/lib_SCPL_4E70CEBA") + StringExternal("Param/Value/lib_SCPL_8B856A4B")) + ((StringExternal("Param/Value/lib_SCPL_16BEFEF4") + lv_extraZero) + IntToText(lv_remainingMilliseconds))))), PlayerGroupSingle(lp_playerIndex));
}

bool libSCPL_gf_LabelsPlusUnitUsesCustomStatusBar (unit lp_unit) {
    // Variable Declarations
    bool lv_boolean;

    // Variable Initialization

    // Implementation
    if (((UnitGetType(lp_unit) == "Armory") || (UnitGetType(lp_unit) == "Barracks") || (UnitGetType(lp_unit) == "CommandCenter") || (UnitGetType(lp_unit) == "EngineeringBay") || (UnitGetType(lp_unit) == "Factory") || (UnitGetType(lp_unit) == "FusionCore") || (UnitGetType(lp_unit) == "GhostAcademy") || (UnitGetType(lp_unit) == "OrbitalCommand") || (UnitGetType(lp_unit) == "PlanetaryFortress") || (UnitGetType(lp_unit) == "Starport") || (UnitGetType(lp_unit) == "TechLab") || (UnitGetType(lp_unit) == "BarracksTechLab") || (UnitGetType(lp_unit) == "FactoryTechLab") || (UnitGetType(lp_unit) == "StarportTechLab") || (UnitGetType(lp_unit) == "SupplyDepotConstructor") || (UnitGetType(lp_unit) == "SupplyDepot") || (UnitGetType(lp_unit) == "Refinery") || (UnitGetType(lp_unit) == "MissileTurret") || (UnitGetType(lp_unit) == "SensorTower") || (UnitGetType(lp_unit) == "Bunker") || (UnitGetType(lp_unit) == "Reactor") || (UnitGetType(lp_unit) == "BarracksReactor") || (UnitGetType(lp_unit) == "FactoryReactor") || (UnitGetType(lp_unit) == "StarportReactor") || (UnitGetType(lp_unit) == "CyberneticsCore") || (UnitGetType(lp_unit) == "DarkShrine") || (UnitGetType(lp_unit) == "FleetBeacon") || (UnitGetType(lp_unit) == "Forge") || (UnitGetType(lp_unit) == "Gateway") || (UnitGetType(lp_unit) == "Nexus") || (UnitGetType(lp_unit) == "RoboticsBay") || (UnitGetType(lp_unit) == "RoboticsFacility") || (UnitGetType(lp_unit) == "Stargate") || (UnitGetType(lp_unit) == "TemplarArchive") || (UnitGetType(lp_unit) == "TwilightCouncil") || (UnitGetType(lp_unit) == "WarpGate") || (UnitGetType(lp_unit) == "Assimilator") || (UnitGetType(lp_unit) == "PhotonCannon") || (UnitGetType(lp_unit) == "Pylon") || (UnitGetType(lp_unit) == "MothershipCore") || (UnitGetType(lp_unit) == "BanelingNest") || (UnitGetType(lp_unit) == "EvolutionChamber") || (UnitGetType(lp_unit) == "Lair") || (UnitGetType(lp_unit) == "LurkerDenMP") || (UnitGetType(lp_unit) == "GreaterSpire") || (UnitGetType(lp_unit) == "Hatchery") || (UnitGetType(lp_unit) == "Hive") || (UnitGetType(lp_unit) == "HydraliskDen") || (UnitGetType(lp_unit) == "InfestationPit") || (UnitGetType(lp_unit) == "RoachWarren") || (UnitGetType(lp_unit) == "SpawningPool") || (UnitGetType(lp_unit) == "Spire") || (UnitGetType(lp_unit) == "UltraliskCavern") || (UnitGetType(lp_unit) == "Extractor") || (UnitGetType(lp_unit) == "NydusNetwork") || (UnitGetType(lp_unit) == "SpineCrawler") || (UnitGetType(lp_unit) == "SporeCrawler") || (UnitGetType(lp_unit) == "Larva") || (UnitGetType(lp_unit) == "Egg") || (UnitGetType(lp_unit) == "Zergling") || (UnitGetType(lp_unit) == "BanelingCocoon") || (UnitGetType(lp_unit) == "Roach") || (UnitGetType(lp_unit) == "Hydralisk") || (UnitGetType(lp_unit) == "Corruptor") || (UnitGetType(lp_unit) == "Overlord"))) {
        lv_boolean = true;
    }
    else {
        lv_boolean = false;
    }
    return lv_boolean;
}

bool libSCPL_gf_LabelsPlusUnitMorphTwoStage (unit lp_unit) {
    // Variable Declarations
    bool lv_boolean;

    // Variable Initialization

    // Implementation
    if (((UnitGetType(lp_unit) == "Overlord") || (UnitGetType(lp_unit) == "Roach") || (UnitGetType(lp_unit) == "Hydralisk") || (UnitGetType(lp_unit) == "Corruptor"))) {
        lv_boolean = true;
    }
    else {
        lv_boolean = false;
    }
    return lv_boolean;
}

int libSCPL_gf_LabelsPlusUnitIconSize (unit lp_productionUnit) {
    // Variable Declarations
    int lv_iconSize;

    // Variable Initialization

    // Implementation
    lv_iconSize = libSCPL_gv_labels.lv_iconSize;
    if (((UnitGetType(lp_productionUnit) == "Egg") || (UnitGetType(lp_productionUnit) == "BanelingCocoon") || (UnitGetType(lp_productionUnit) == "RavagerCocoon") || (UnitGetType(lp_productionUnit) == "LurkerMPEgg") || (UnitGetType(lp_productionUnit) == "BroodLordCocoon") || (UnitGetType(lp_productionUnit) == "TransportOverlordCocoon") || (UnitGetType(lp_productionUnit) == "OverlordCocoon") || (UnitGetType(lp_productionUnit) == "Larva") || (UnitGetType(lp_productionUnit) == "Zergling") || (UnitGetType(lp_productionUnit) == "Roach") || (UnitGetType(lp_productionUnit) == "Hydralisk") || (UnitGetType(lp_productionUnit) == "Corruptor") || (UnitGetType(lp_productionUnit) == "Overlord"))) {
        lv_iconSize = libSCPL_gv_labels.lv_iconSizeEgg;
    }
    else if (((UnitGetType(lp_productionUnit) == "TechLab") || (UnitGetType(lp_productionUnit) == "BarracksTechLab") || (UnitGetType(lp_productionUnit) == "FactoryTechLab") || (UnitGetType(lp_productionUnit) == "StarportTechLab") || (UnitGetType(lp_productionUnit) == "MothershipCore"))) {
        lv_iconSize = libSCPL_gv_labels.lv_iconSizeTechLab;
    }
    return lv_iconSize;
}

void libSCPL_gf_ResourceDisplayGainAdd (int lp_playerIndex, fixed lp_minerals, fixed lp_vespene) {
    // Implementation
    libSCPL_gv_player[lp_playerIndex].lv_resourceGainMinerals += lp_minerals;
    libSCPL_gv_player[lp_playerIndex].lv_resourceGainVespene += lp_vespene;
    libSCPL_gf_GenericEventResourceSpendChanges(lp_playerIndex);
}

void libSCPL_gf_ResourceDisplaySpendAdd (int lp_playerIndex, fixed lp_minerals, fixed lp_vespene) {
    // Implementation
    libSCPL_gv_player[lp_playerIndex].lv_resourceSpendMinerals += lp_minerals;
    libSCPL_gv_player[lp_playerIndex].lv_resourceSpendVespene += lp_vespene;
    libSCPL_gf_GenericEventResourceSpendChanges(lp_playerIndex);
}

void libSCPL_gf_ResourceDisplaySpendSubtract (int lp_playerIndex, fixed lp_minerals, fixed lp_vespene) {
    // Implementation
    libSCPL_gv_player[lp_playerIndex].lv_resourceSpendMinerals -= lp_minerals;
    libSCPL_gv_player[lp_playerIndex].lv_resourceSpendVespene -= lp_vespene;
    libSCPL_gf_GenericEventResourceSpendChanges(lp_playerIndex);
}

void libSCPL_gf_ResourceDisplaySpendUpdate (unit lp_unit, fixed lp_costTime, fixed lp_costMinerals, fixed lp_costVespene) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_timeActual;
    fixed lv_currentMinerals;
    fixed lv_currentVespene;
    fixed lv_tickMinerals;
    fixed lv_tickVespene;

    // Variable Initialization

    // Implementation
    lv_playerIndex = UnitGetOwner(lp_unit);
    lv_currentMinerals = libSCPL_gf_UnitProtossProgressMinerals(lp_unit);
    lv_currentVespene = libSCPL_gf_UnitProtossProgressVespene(lp_unit);
    lv_timeActual = lp_costTime;
    if ((UnitHasBehavior2(lp_unit, "TimeWarpProduction") == true)) {
        lv_timeActual = (lv_timeActual / 1.15);
    }
    lv_tickVespene = (lp_costVespene / lv_timeActual);
    lv_tickMinerals = (lp_costMinerals / lv_timeActual);
    if (((lv_currentMinerals != lv_tickMinerals) || (lv_currentVespene != lv_tickVespene))) {
        libSCPL_gv_player[lv_playerIndex].lv_resourceSpendMinerals -= lv_currentMinerals;
        libSCPL_gv_player[lv_playerIndex].lv_resourceSpendVespene -= lv_currentVespene;
        libSCPL_gf_UnitProtossProgressMineralsSet(lp_unit, lv_tickMinerals);
        libSCPL_gf_UnitProtossProgressVespeneSet(lp_unit, lv_tickVespene);
        libSCPL_gv_player[lv_playerIndex].lv_resourceSpendMinerals += lv_tickMinerals;
        libSCPL_gv_player[lv_playerIndex].lv_resourceSpendVespene += lv_tickVespene;
        libSCPL_gf_GenericEventResourceSpendChanges(lv_playerIndex);
    }
}

void libSCPL_gf_ControlGroupUnitPreserve (unit lp_parentUnit, unit lp_childUnit) {
    int auto7145AD08_ae;
    int auto7145AD08_ai;

    // Variable Declarations
    int lv_controlGroupIndex;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    lv_playerIndex = UnitGetOwner(lp_parentUnit);
    auto7145AD08_ae = 28;
    auto7145AD08_ai = 1;
    lv_controlGroupIndex = 21;
    for ( ; ( (auto7145AD08_ai >= 0 && lv_controlGroupIndex <= auto7145AD08_ae) || (auto7145AD08_ai <= 0 && lv_controlGroupIndex >= auto7145AD08_ae) ) ; lv_controlGroupIndex += auto7145AD08_ai ) {
        if ((UnitGetCustomValue(lp_parentUnit, lv_controlGroupIndex) == 1)) {
            libSCPL_gf_ControlGroupUnitsAdd(libNtve_gf_ConvertUnitToUnitGroup(lp_childUnit), (lv_controlGroupIndex - 20), lv_playerIndex);
            libSCPL_gf_ControlGroupUnitsUpdate((lv_controlGroupIndex - 20), lv_playerIndex);
        }
    }
}

void libSCPL_gf_ControlGroupDamagePulse (unit lp_unit) {
    int auto4A02EB2A_ae;
    int auto4A02EB2A_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_controlGroupIndex;

    // Variable Initialization

    // Implementation
    lv_playerIndex = UnitGetOwner(lp_unit);
    auto4A02EB2A_ae = 28;
    auto4A02EB2A_ai = 1;
    lv_controlGroupIndex = 21;
    for ( ; ( (auto4A02EB2A_ai >= 0 && lv_controlGroupIndex <= auto4A02EB2A_ae) || (auto4A02EB2A_ai <= 0 && lv_controlGroupIndex >= auto4A02EB2A_ae) ) ; lv_controlGroupIndex += auto4A02EB2A_ai ) {
        if ((UnitGetCustomValue(lp_unit, lv_controlGroupIndex) == 1)) {
            DialogControlSendAnimationEvent(libSCPL_gv_uI.lv_consoleControlGroupButton[(lv_controlGroupIndex - 20)], PlayerGroupSingle(lv_playerIndex), "EventDamage");
            libSCPL_gf_GameTipCreateControlGroup("GlobalControlGroupAttacked", (lv_controlGroupIndex - 20), lv_playerIndex);
            if ((PlayerRace(lv_playerIndex) == "Prot")) {
                libSCPL_gf_GameTipCreateControlGroup("ProtossShields", (lv_controlGroupIndex - 20), lv_playerIndex);
            }
        }
    }
}

void libSCPL_gf_ControlGroupColorize (int lp_playerIndex, int lp_controlGroupIndex) {
    // Variable Declarations
    int lv_colorIndex;
    unitgroup lv_controlGroup;
    int lv_controlGroupCount;

    // Variable Initialization
    lv_controlGroup = UnitGroupEmpty();

    // Implementation
    lv_controlGroup = libSCPL_gv_player[lp_playerIndex].lv_controlGroup[lp_controlGroupIndex];
    lv_controlGroupCount = UnitGroupCount(lv_controlGroup, c_unitCountAlive);
    if ((lv_controlGroupCount == 0)) {
        return ;
    }
    lv_colorIndex = libSCPL_gf_UnitGroupHealthIndex(lv_controlGroup);
    DialogControlSendAnimationEvent(libSCPL_gv_uI.lv_consoleControlGroupButton[lp_controlGroupIndex], PlayerGroupSingle(lp_playerIndex), "EventColorize");
    DialogControlSetAnimationTime(libSCPL_gv_uI.lv_consoleControlGroupButton[lp_controlGroupIndex], PlayerGroupSingle(lp_playerIndex), "ColorizeVitals", lv_colorIndex);
    DialogControlSendAnimationEvent(libSCPL_gv_uI.lv_consoleControlGroupButton[lp_controlGroupIndex], PlayerGroupSingle(lp_playerIndex), "EventPause");
}

int libSCPL_gf_UnitGroupHealthIndex (unitgroup lp_unitGroup) {
    unitgroup autoABB6BC2E_g;
    int autoABB6BC2E_u;

    // Variable Declarations
    fixed lv_healthIndex;
    int lv_unitGroupCount;
    unit lv_unit;

    // Variable Initialization

    // Implementation
    lv_unitGroupCount = UnitGroupCount(lp_unitGroup, c_unitCountAlive);
    autoABB6BC2E_g = lp_unitGroup;
    autoABB6BC2E_u = 1;
    for ( ; autoABB6BC2E_u <= UnitGroupCount(autoABB6BC2E_g, c_unitCountAll) ; autoABB6BC2E_u += BoolToInt(lv_unit == UnitGroupUnit(autoABB6BC2E_g, autoABB6BC2E_u)) ) {
        lv_unit = UnitGroupUnit(autoABB6BC2E_g, autoABB6BC2E_u);
        if ((UnitHasBehavior2(lv_unit, "PowerUserWarpable") == true)) {
            lv_unitGroupCount -= 1;
        }
        else {
            lv_healthIndex += UnitGetPropertyFixed(lv_unit, c_unitPropVitalityPercent, c_unitPropCurrent);
        }
    }
    if ((lv_unitGroupCount > 0)) {
        lv_healthIndex /= lv_unitGroupCount;
        lv_healthIndex = (100 - FixedToInt(lv_healthIndex));
    }
    return FixedToInt(lv_healthIndex);
}

void libSCPL_gf_ControlGroupUnitsAssign (unitgroup lp_unitGroup, int lp_controlGroupIndex, int lp_playerIndex) {
    unitgroup auto4FE71402_g;
    int auto4FE71402_u;

    // Variable Declarations
    unit lv_unit;
    unitgroup lv_controlGroup;

    // Variable Initialization
    lv_controlGroup = UnitGroupEmpty();

    // Implementation
    auto4FE71402_g = libSCPL_gv_player[lp_playerIndex].lv_controlGroup[lp_controlGroupIndex];
    auto4FE71402_u = 1;
    for ( ; auto4FE71402_u <= UnitGroupCount(auto4FE71402_g, c_unitCountAll) ; auto4FE71402_u += BoolToInt(lv_unit == UnitGroupUnit(auto4FE71402_g, auto4FE71402_u)) ) {
        lv_unit = UnitGroupUnit(auto4FE71402_g, auto4FE71402_u);
        UnitSetCustomValue(lv_unit, (20 + lp_controlGroupIndex), 0.0);
    }
    lv_controlGroup = UnitGroupFilter(null, lp_playerIndex, lp_unitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libSCPL_gv_player[lp_playerIndex].lv_controlGroup[lp_controlGroupIndex] = UnitGroupEmpty();
    libSCPL_gf_ControlGroupUnitsAdd(lv_controlGroup, lp_controlGroupIndex, lp_playerIndex);
}

void libSCPL_gf_ControlGroupUnitsAdd (unitgroup lp_unitGroup, int lp_controlGroupIndex, int lp_playerIndex) {
    unitgroup auto9CA46B02_g;
    int auto9CA46B02_u;

    // Variable Declarations
    unitgroup lv_filterGroup;
    unitgroup lv_controlGroup;
    unit lv_unit;

    // Variable Initialization
    lv_filterGroup = UnitGroupEmpty();
    lv_controlGroup = UnitGroupEmpty();

    // Implementation
    lv_filterGroup = UnitGroupFilter(null, lp_playerIndex, lp_unitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_controlGroup = libSCPL_gv_player[lp_playerIndex].lv_controlGroup[lp_controlGroupIndex];
    if ((UnitGroupCount(lv_controlGroup, c_unitCountAlive) > 0) && (UnitGetType(UnitGroupUnit(lv_filterGroup, 1)) != UnitGetType(UnitGroupUnit(lv_controlGroup, 1)))) {
        libSCPL_gf_GenericEventResourceSpendChanges2(lp_playerIndex, lp_controlGroupIndex);
    }
    UnitGroupAddUnitGroup(libSCPL_gv_player[lp_playerIndex].lv_controlGroup[lp_controlGroupIndex], lv_filterGroup);
    auto9CA46B02_g = lv_filterGroup;
    auto9CA46B02_u = 1;
    for ( ; auto9CA46B02_u <= UnitGroupCount(auto9CA46B02_g, c_unitCountAll) ; auto9CA46B02_u += BoolToInt(lv_unit == UnitGroupUnit(auto9CA46B02_g, auto9CA46B02_u)) ) {
        lv_unit = UnitGroupUnit(auto9CA46B02_g, auto9CA46B02_u);
        UnitSetCustomValue(lv_unit, (20 + lp_controlGroupIndex), 1.0);
    }
}

void libSCPL_gf_ControlGroupUnitsUpdate (int lp_controlGroupIndex, int lp_playerIndex) {
    // Variable Declarations
    string lv_unitType;
    unitgroup lv_controlGroup;
    int lv_controlGroupCount;
    string lv_controlGroupIcon;
    string lv_race;

    // Variable Initialization
    lv_controlGroup = UnitGroupEmpty();
    lv_race = "";

    // Implementation
    lv_controlGroup = libSCPL_gv_player[lp_playerIndex].lv_controlGroup[lp_controlGroupIndex];
    lv_controlGroup = UnitGroupFilter(null, lp_playerIndex, lv_controlGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_controlGroupCount = UnitGroupCount(lv_controlGroup, c_unitCountAlive);
    if ((lv_controlGroupCount == 0)) {
        DialogControlSendAnimationEvent(libSCPL_gv_uI.lv_consoleControlGroupButton[lp_controlGroupIndex], PlayerGroupSingle(lp_playerIndex), "EventReset");
        libNtve_gf_SetDialogItemText(libSCPL_gv_uI.lv_consoleControlGroupLabel[lp_controlGroupIndex], StringToText(""), PlayerGroupSingle(lp_playerIndex));
        libNtve_gf_SetDialogItemImage(libSCPL_gv_uI.lv_consoleControlGroupIcon[lp_controlGroupIndex], "Assets\\Textures\\black.dds", PlayerGroupSingle(lp_playerIndex));
        if ((lp_controlGroupIndex != 1)) {
            DialogControlSetVisible(libSCPL_gv_uI.lv_consoleControlGroupButton[lp_controlGroupIndex], PlayerGroupSingle(lp_playerIndex), false);
        }
    }
    else {
        lv_controlGroupIcon = "Assets\\Textures\\black.dds";
        lv_unitType = libSCPL_gf_ControlGroupUnitsGetPriorityType(lv_controlGroup);
        if ((StringContains(lv_unitType, "Burrowed", c_stringAnywhere, c_stringNoCase) == true)) {
            lv_unitType = (StringReplaceWord(lv_unitType, "Burrowed", "", 1, c_stringNoCase));
        }
        if ((CatalogEntryIsValid(c_gameCatalogActor, lv_unitType) == true)) {
            lv_controlGroupIcon = CatalogFieldValueGet(c_gameCatalogActor, lv_unitType, "UnitIcon", c_playerAny);;
        }
        DialogControlSetVisible(libSCPL_gv_uI.lv_consoleControlGroupButton[lp_controlGroupIndex], PlayerGroupSingle(lp_playerIndex), true);
        DialogControlFadeTransparency(libSCPL_gv_uI.lv_consoleControlGroupButton[lp_controlGroupIndex], PlayerGroupSingle(lp_playerIndex), 0.0, 0.0);
        libNtve_gf_SetDialogItemText(libSCPL_gv_uI.lv_consoleControlGroupLabel[lp_controlGroupIndex], IntToText(lv_controlGroupCount), PlayerGroupSingle(lp_playerIndex));
        libNtve_gf_SetDialogItemImage(libSCPL_gv_uI.lv_consoleControlGroupIcon[lp_controlGroupIndex], lv_controlGroupIcon, PlayerGroupSingle(lp_playerIndex));
        libSCPL_gf_ControlGroupColorize(lp_playerIndex, lp_controlGroupIndex);
    }
}

void libSCPL_gf_ControlGroupUnitsUpdateFromUnit (unit lp_unit) {
    int auto7EAB1379_ae;
    int auto7EAB1379_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_controlGroupIndex;

    // Variable Initialization

    // Implementation
    lv_playerIndex = UnitGetOwner(lp_unit);
    auto7EAB1379_ae = 28;
    auto7EAB1379_ai = 1;
    lv_controlGroupIndex = 21;
    for ( ; ( (auto7EAB1379_ai >= 0 && lv_controlGroupIndex <= auto7EAB1379_ae) || (auto7EAB1379_ai <= 0 && lv_controlGroupIndex >= auto7EAB1379_ae) ) ; lv_controlGroupIndex += auto7EAB1379_ai ) {
        if ((UnitGetCustomValue(lp_unit, lv_controlGroupIndex) == 1)) {
            libSCPL_gf_ControlGroupUnitsUpdate((lv_controlGroupIndex - 20), lv_playerIndex);
        }
    }
}

string libSCPL_gf_ControlGroupUnitsGetPriorityType (unitgroup lp_controlGroup) {
    unitgroup auto634AEBFD_g;
    int auto634AEBFD_u;

    // Variable Declarations
    unit lv_unit;
    string lv_unitType;
    string lv_unitTypeBest;
    int lv_unitScore;
    int lv_unitScoreBest;

    // Variable Initialization

    // Implementation
    auto634AEBFD_g = lp_controlGroup;
    auto634AEBFD_u = 1;
    for ( ; auto634AEBFD_u <= UnitGroupCount(auto634AEBFD_g, c_unitCountAll) ; auto634AEBFD_u += BoolToInt(lv_unit == UnitGroupUnit(auto634AEBFD_g, auto634AEBFD_u)) ) {
        lv_unit = UnitGroupUnit(auto634AEBFD_g, auto634AEBFD_u);
        if ((UnitGetType(lv_unit) == lv_unitType)) {
            continue;
        }
        lv_unitType = UnitGetType(lv_unit);
        lv_unitScore = CatalogFieldValueGetAsInt(c_gameCatalogUnit, (lv_unitType), "SubgroupPriority", c_playerAny);
        if ((lv_unitScore > lv_unitScoreBest)) {
            lv_unitScoreBest = lv_unitScore;
            lv_unitTypeBest = lv_unitType;
        }
    }
    return lv_unitTypeBest;
}

void libSCPL_gf_TriggerEventRegisterUnitDies (trigger lp_trigger, unit lp_unit) {
    // Implementation
    TriggerAddEventUnitDied(lp_trigger, UnitRefFromUnit(lp_unit));
}

void libSCPL_gf_TriggerEventRegisterDialogItemClicked (trigger lp_trigger, int lp_dialogItem) {
    // Implementation
    TriggerAddEventDialogControl(lp_trigger, c_playerAny, lp_dialogItem, c_triggerControlEventTypeClick);
}

trigger auto_libSCPL_gf_DebugTextTag_Trigger = null;
point auto_libSCPL_gf_DebugTextTag_lp_point;
string auto_libSCPL_gf_DebugTextTag_lp_string;
fixed auto_libSCPL_gf_DebugTextTag_lp_duration;

void libSCPL_gf_DebugTextTag (point lp_point, string lp_string, fixed lp_duration) {
    auto_libSCPL_gf_DebugTextTag_lp_point = lp_point;
    auto_libSCPL_gf_DebugTextTag_lp_string = lp_string;
    auto_libSCPL_gf_DebugTextTag_lp_duration = lp_duration;

    if (auto_libSCPL_gf_DebugTextTag_Trigger == null) {
        auto_libSCPL_gf_DebugTextTag_Trigger = TriggerCreate("auto_libSCPL_gf_DebugTextTag_TriggerFunc");
    }

    TriggerExecute(auto_libSCPL_gf_DebugTextTag_Trigger, false, false);
}

bool auto_libSCPL_gf_DebugTextTag_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_libSCPL_gf_DebugTextTag_lp_point;
    string lp_string = auto_libSCPL_gf_DebugTextTag_lp_string;
    fixed lp_duration = auto_libSCPL_gf_DebugTextTag_lp_duration;

    // Variable Declarations
    int lv_textTag;

    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Implementation
    TextTagCreate(StringToText(lp_string), 24, lp_point, 1.0, true, false, PlayerGroupAll());
    lv_textTag = TextTagLastCreated();
    if ((lp_duration <= 0.0)) {
        return true;
    }
    Wait(lp_duration, c_timeGame);
    Wait(lp_duration, c_timeGame);
    Wait(lp_duration, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

unitgroup libSCPL_gf_MapVespeneGeysers () {
    unitgroup auto6F888030_g;
    int auto6F888030_u;

    // Variable Declarations
    unitgroup lv_vespene;
    unit lv_resource;

    // Variable Initialization
    lv_vespene = UnitGroupEmpty();

    // Implementation
    auto6F888030_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6F888030_u = 1;
    for ( ; auto6F888030_u <= UnitGroupCount(auto6F888030_g, c_unitCountAll) ; auto6F888030_u += BoolToInt(lv_resource == UnitGroupUnit(auto6F888030_g, auto6F888030_u)) ) {
        lv_resource = UnitGroupUnit(auto6F888030_g, auto6F888030_u);
        UnitGroupAdd(lv_vespene, lv_resource);
    }
    return lv_vespene;
}

int libSCPL_gf_PlayerWorkerCount (int lp_playerIndex) {
    unitgroup auto15F31DD4_g;
    int auto15F31DD4_u;

    // Variable Declarations
    region lv_workerRegion;
    unitgroup lv_workersTotal;
    int lv_workersTotalCount;
    unit lv_townHall;

    // Variable Initialization
    lv_workersTotal = UnitGroupEmpty();

    // Implementation
    lv_workersTotal = UnitGroup(null, lp_playerIndex, null, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupRemoveUnitGroup(lv_workersTotal, UnitGroupFilter("MULE", lp_playerIndex, lv_workersTotal, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    lv_workersTotalCount = UnitGroupCount(lv_workersTotal, c_unitCountAlive);
    auto15F31DD4_g = libSCPL_gf_PlayerTownHalls(lp_playerIndex);
    auto15F31DD4_u = 1;
    for ( ; auto15F31DD4_u <= UnitGroupCount(auto15F31DD4_g, c_unitCountAll) ; auto15F31DD4_u += BoolToInt(lv_townHall == UnitGroupUnit(auto15F31DD4_g, auto15F31DD4_u)) ) {
        lv_townHall = UnitGroupUnit(auto15F31DD4_g, auto15F31DD4_u);
        lv_workersTotalCount += libSCPL_gf_PlayerTownHallWorkerQueue(lv_townHall, lp_playerIndex, true);
    }
    return lv_workersTotalCount;
}

unit libSCPL_gf_PlayerTownHallClosest (point lp_point, int lp_playerIndex) {
    // Variable Declarations
    unitgroup lv_townHallUnits;
    unit lv_townHall;

    // Variable Initialization
    lv_townHallUnits = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_townHallUnits, UnitGroup("CommandCenter", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_townHallUnits, UnitGroup("OrbitalCommand", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_townHallUnits, UnitGroup("PlanetaryFortress", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_townHallUnits, UnitGroup("Nexus", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_townHallUnits, UnitGroup("Hatchery", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_townHallUnits, UnitGroup("Lair", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_townHallUnits, UnitGroup("Hive", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((UnitGroupCount(lv_townHallUnits, c_unitCountAlive) == 0)) {
        return null;
    }
    lv_townHall = UnitGroupClosestToPoint(lv_townHallUnits, lp_point);
    return lv_townHall;
}

int libSCPL_gf_PlayerTownHallSaturationCount (unit lp_townHall, int lp_playerIndex) {
    // Variable Declarations
    unitgroup lv_resourceGroup;
    region lv_resourceRegion;
    int lv_townHallSaturationCount;

    // Variable Initialization
    lv_resourceGroup = UnitGroupEmpty();

    // Implementation
    lv_resourceRegion = RegionCircle(UnitGetPosition(lp_townHall), libSCPL_gv_constants.lv_townHallResourceRadius);
    lv_resourceGroup = UnitGroup(null, c_playerAny, lv_resourceRegion, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_townHallSaturationCount = (UnitGroupCount(lv_resourceGroup, c_unitCountAlive) * 2);
    UnitGroupLoopBegin(lv_resourceGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Assimilator") || (UnitGetType(UnitGroupLoopCurrent()) == "Refinery") || (UnitGetType(UnitGroupLoopCurrent()) == "Extractor"))) {
            lv_townHallSaturationCount = (lv_townHallSaturationCount + 1);
        }
    }
    UnitGroupLoopEnd();
    return lv_townHallSaturationCount;
}

int libSCPL_gf_PlayerTownHallWorkerCount (unit lp_townHall, int lp_playerIndex) {
    // Variable Declarations
    region lv_workerRegion;
    unitgroup lv_workersLiving;
    int lv_workersLivingCount;
    int lv_workersTotal;

    // Variable Initialization
    lv_workersLiving = UnitGroupEmpty();

    // Implementation
    lv_workerRegion = RegionCircle(UnitGetPosition(lp_townHall), libSCPL_gv_constants.lv_townHallResourceRadius);
    lv_workersLiving = UnitGroup(null, lp_playerIndex, lv_workerRegion, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupRemoveUnitGroup(lv_workersLiving, UnitGroupFilter("MULE", lp_playerIndex, lv_workersLiving, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    lv_workersLivingCount = UnitGroupCount(lv_workersLiving, c_unitCountAlive);
    lv_workersTotal = (lv_workersLivingCount + libSCPL_gf_PlayerTownHallWorkerQueue(lp_townHall, lp_playerIndex, true));
    return lv_workersTotal;
}

int libSCPL_gf_PlayerTownHallVespeneTappedCount (unit lp_townHall, int lp_playerIndex) {
    // Variable Declarations
    region lv_townHallRegion;
    unitgroup lv_vespeneTapped;
    int lv_vespeneTappedCount;

    // Variable Initialization
    lv_vespeneTapped = UnitGroupEmpty();

    // Implementation
    lv_townHallRegion = RegionCircle(UnitGetPosition(lp_townHall), libSCPL_gv_constants.lv_townHallResourceRadius);
    UnitGroupAddUnitGroup(lv_vespeneTapped, UnitGroup("Extractor", lp_playerIndex, lv_townHallRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_vespeneTapped, UnitGroup("Assimilator", lp_playerIndex, lv_townHallRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_vespeneTapped, UnitGroup("Refinery", lp_playerIndex, lv_townHallRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    lv_vespeneTappedCount = UnitGroupCount(lv_vespeneTapped, c_unitCountAlive);
    return lv_vespeneTappedCount;
}

unitgroup libSCPL_gf_PlayerTownHallVespeneTapped (unit lp_townHall, int lp_playerIndex) {
    // Variable Declarations
    region lv_townHallRegion;
    unitgroup lv_vespeneTapped;
    int lv_vespeneTappedCount;

    // Variable Initialization
    lv_vespeneTapped = UnitGroupEmpty();

    // Implementation
    lv_townHallRegion = RegionCircle(UnitGetPosition(lp_townHall), libSCPL_gv_constants.lv_townHallResourceRadius);
    UnitGroupAddUnitGroup(lv_vespeneTapped, UnitGroup("Extractor", lp_playerIndex, lv_townHallRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_vespeneTapped, UnitGroup("Assimilator", lp_playerIndex, lv_townHallRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_vespeneTapped, UnitGroup("Refinery", lp_playerIndex, lv_townHallRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    return lv_vespeneTapped;
}

int libSCPL_gf_PlayerTownHallWorkerVespeneCount (unit lp_townHall, int lp_playerIndex) {
    unitgroup auto93E0DE1E_g;
    int auto93E0DE1E_u;

    // Variable Declarations
    region lv_workerRegion;
    unitgroup lv_workers;
    unitgroup lv_workersVespene;
    unit lv_worker;
    int lv_workersCount;

    // Variable Initialization
    lv_workers = UnitGroupEmpty();
    lv_workersVespene = UnitGroupEmpty();

    // Implementation
    lv_workerRegion = RegionCircle(UnitGetPosition(lp_townHall), libSCPL_gv_constants.lv_townHallResourceRadius);
    lv_workers = UnitGroup(null, lp_playerIndex, lv_workerRegion, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupRemoveUnitGroup(lv_workers, UnitGroupFilter("MULE", lp_playerIndex, lv_workers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto93E0DE1E_g = lv_workers;
    auto93E0DE1E_u = 1;
    for ( ; auto93E0DE1E_u <= UnitGroupCount(auto93E0DE1E_g, c_unitCountAll) ; auto93E0DE1E_u += BoolToInt(lv_worker == UnitGroupUnit(auto93E0DE1E_g, auto93E0DE1E_u)) ) {
        lv_worker = UnitGroupUnit(auto93E0DE1E_g, auto93E0DE1E_u);
        if (((UnitHasBehavior2(lv_worker, "GameResourceMarkerVespene") == true) || (UnitGetType(OrderGetTargetUnit(UnitOrder(lv_worker, 0))) == "Assimilator") || (UnitGetType(OrderGetTargetUnit(UnitOrder(lv_worker, 0))) == "Extractor") || (UnitGetType(OrderGetTargetUnit(UnitOrder(lv_worker, 0))) == "Refinery"))) {
            UnitGroupAdd(lv_workersVespene, lv_worker);
        }
    }
    lv_workersCount = UnitGroupCount(lv_workersVespene, c_unitCountAlive);
    return lv_workersCount;
}

int libSCPL_gf_PlayerTownHallWorkerVespenePERGEYSER (unit lp_geyser, int lp_playerIndex) {
    unitgroup autoB76B8673_g;
    int autoB76B8673_u;

    // Variable Declarations
    region lv_workerRegion;
    unitgroup lv_workers;
    unitgroup lv_workersVespene;
    unit lv_worker;
    int lv_workersCount;

    // Variable Initialization
    lv_workers = UnitGroupEmpty();
    lv_workersVespene = UnitGroupEmpty();

    // Implementation
    lv_workerRegion = RegionCircle(UnitGetPosition(lp_geyser), 6.0);
    lv_workers = UnitGroup(null, lp_playerIndex, lv_workerRegion, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupRemoveUnitGroup(lv_workers, UnitGroupFilter("MULE", lp_playerIndex, lv_workers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoB76B8673_g = lv_workers;
    autoB76B8673_u = 1;
    for ( ; autoB76B8673_u <= UnitGroupCount(autoB76B8673_g, c_unitCountAll) ; autoB76B8673_u += BoolToInt(lv_worker == UnitGroupUnit(autoB76B8673_g, autoB76B8673_u)) ) {
        lv_worker = UnitGroupUnit(autoB76B8673_g, autoB76B8673_u);
        if (((UnitHasBehavior2(lv_worker, "GameResourceMarkerVespene") == true) || (OrderGetTargetUnit(UnitOrder(lv_worker, 0)) == lp_geyser))) {
            UnitGroupAdd(lv_workersVespene, lv_worker);
        }
    }
    UnitGroupAddUnitGroup(lv_workersVespene, UnitGroup(null, lp_playerIndex, RegionCircle(UnitGetPosition(lp_geyser), 1.0), UnitFilter((1 << c_targetFilterWorker), (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
    lv_workersCount = UnitGroupCount(lv_workersVespene, c_unitCountAlive);
    return lv_workersCount;
}

int libSCPL_gf_PlayerTownHallWorkerQueue (unit lp_townHall, int lp_playerIndex, bool lp_includeCocoons) {
    unitgroup auto35C57E1D_g;
    int auto35C57E1D_u;

    // Variable Declarations
    int lv_workerQueuedCount;
    unit lv_morphUnit;

    // Variable Initialization

    // Implementation
    auto35C57E1D_g = UnitGroup("Egg", lp_playerIndex, RegionCircle(UnitGetPosition(lp_townHall), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto35C57E1D_u = 1;
    for ( ; auto35C57E1D_u <= UnitGroupCount(auto35C57E1D_g, c_unitCountAll) ; auto35C57E1D_u += BoolToInt(lv_morphUnit == UnitGroupUnit(auto35C57E1D_g, auto35C57E1D_u)) ) {
        lv_morphUnit = UnitGroupUnit(auto35C57E1D_g, auto35C57E1D_u);
        if ((lp_includeCocoons == true) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_morphUnit, 1, 1) == "Drone")) {
            lv_workerQueuedCount += 1;
        }
    }
    if (((libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lp_townHall, 1, 1) == "SCV") || (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lp_townHall, 1, 1) == "Probe"))) {
        lv_workerQueuedCount += 1;
    }
    return lv_workerQueuedCount;
}

unitgroup libSCPL_gf_PlayerHarvestableMinerals (int lp_playerIndex) {
    unitgroup autoCF505826_g;
    int autoCF505826_u;

    // Variable Declarations
    unitgroup lv_harvestable;
    unit lv_resource;

    // Variable Initialization
    lv_harvestable = UnitGroupEmpty();

    // Implementation
    autoCF505826_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCF505826_u = 1;
    for ( ; autoCF505826_u <= UnitGroupCount(autoCF505826_g, c_unitCountAll) ; autoCF505826_u += BoolToInt(lv_resource == UnitGroupUnit(autoCF505826_g, autoCF505826_u)) ) {
        lv_resource = UnitGroupUnit(autoCF505826_g, autoCF505826_u);
        if (((UnitHasBehavior2(lv_resource, "MineralFieldMinerals") == true) || (UnitHasBehavior2(lv_resource, "MineralFieldMinerals750") == true) || (UnitHasBehavior2(lv_resource, "HighYieldMineralFieldMinerals") == true) || (UnitHasBehavior2(lv_resource, "HighYieldMineralFieldMinerals750") == true) || (UnitHasBehavior2(lv_resource, "MineralFieldMineralsNoRemove") == true)) && (UnitHasBehavior2(lv_resource, "GameMineralsNearTownHall") == true) && (UnitBehaviorEffectPlayer(lv_resource, "GameMineralsNearTownHall", c_effectPlayerSource, 0) == lp_playerIndex)) {
            UnitGroupAdd(lv_harvestable, lv_resource);
        }
    }
    return lv_harvestable;
}

unitgroup libSCPL_gf_PlayerHarvestableGas (int lp_playerIndex) {
    unitgroup auto21C76C5E_g;
    int auto21C76C5E_u;

    // Variable Declarations
    unitgroup lv_harvestable;
    unit lv_resource;

    // Variable Initialization
    lv_harvestable = UnitGroupEmpty();

    // Implementation
    auto21C76C5E_g = UnitGroup(null, lp_playerIndex, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto21C76C5E_u = 1;
    for ( ; auto21C76C5E_u <= UnitGroupCount(auto21C76C5E_g, c_unitCountAll) ; auto21C76C5E_u += BoolToInt(lv_resource == UnitGroupUnit(auto21C76C5E_g, auto21C76C5E_u)) ) {
        lv_resource = UnitGroupUnit(auto21C76C5E_g, auto21C76C5E_u);
        if (((UnitHasBehavior2(lv_resource, "HarvestableVespeneGeyserGas") == true) || (UnitHasBehavior2(lv_resource, "HarvestableVespeneGeyserGasProtoss") == true) || (UnitHasBehavior2(lv_resource, "HarvestableVespeneGeyserGasZerg") == true))) {
            UnitGroupAdd(lv_harvestable, lv_resource);
        }
    }
    return lv_harvestable;
}

unitgroup libSCPL_gf_PlayerTownHalls (int lp_playerIndex) {
    unitgroup auto06535721_g;
    int auto06535721_u;
    unitgroup autoE3E24BF4_g;
    int autoE3E24BF4_u;
    unitgroup autoF676D601_g;
    int autoF676D601_u;
    unitgroup auto60A9D51B_g;
    int auto60A9D51B_u;
    unitgroup auto7957ECD0_g;
    int auto7957ECD0_u;
    unitgroup autoF34E8B7B_g;
    int autoF34E8B7B_u;
    unitgroup autoB7CB30EC_g;
    int autoB7CB30EC_u;

    // Variable Declarations
    unitgroup lv_townHallGroup;
    unit lv_townHall;

    // Variable Initialization
    lv_townHallGroup = UnitGroupEmpty();

    // Implementation
    auto06535721_g = UnitGroup("CommandCenter", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto06535721_u = 1;
    for ( ; auto06535721_u <= UnitGroupCount(auto06535721_g, c_unitCountAll) ; auto06535721_u += BoolToInt(lv_townHall == UnitGroupUnit(auto06535721_g, auto06535721_u)) ) {
        lv_townHall = UnitGroupUnit(auto06535721_g, auto06535721_u);
        UnitGroupAdd(lv_townHallGroup, lv_townHall);
    }
    autoE3E24BF4_g = UnitGroup("OrbitalCommand", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE3E24BF4_u = 1;
    for ( ; autoE3E24BF4_u <= UnitGroupCount(autoE3E24BF4_g, c_unitCountAll) ; autoE3E24BF4_u += BoolToInt(lv_townHall == UnitGroupUnit(autoE3E24BF4_g, autoE3E24BF4_u)) ) {
        lv_townHall = UnitGroupUnit(autoE3E24BF4_g, autoE3E24BF4_u);
        UnitGroupAdd(lv_townHallGroup, lv_townHall);
    }
    autoF676D601_g = UnitGroup("PlanetaryFortress", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF676D601_u = 1;
    for ( ; autoF676D601_u <= UnitGroupCount(autoF676D601_g, c_unitCountAll) ; autoF676D601_u += BoolToInt(lv_townHall == UnitGroupUnit(autoF676D601_g, autoF676D601_u)) ) {
        lv_townHall = UnitGroupUnit(autoF676D601_g, autoF676D601_u);
        UnitGroupAdd(lv_townHallGroup, lv_townHall);
    }
    auto60A9D51B_g = UnitGroup("Nexus", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto60A9D51B_u = 1;
    for ( ; auto60A9D51B_u <= UnitGroupCount(auto60A9D51B_g, c_unitCountAll) ; auto60A9D51B_u += BoolToInt(lv_townHall == UnitGroupUnit(auto60A9D51B_g, auto60A9D51B_u)) ) {
        lv_townHall = UnitGroupUnit(auto60A9D51B_g, auto60A9D51B_u);
        UnitGroupAdd(lv_townHallGroup, lv_townHall);
    }
    auto7957ECD0_g = UnitGroup("Hatchery", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7957ECD0_u = 1;
    for ( ; auto7957ECD0_u <= UnitGroupCount(auto7957ECD0_g, c_unitCountAll) ; auto7957ECD0_u += BoolToInt(lv_townHall == UnitGroupUnit(auto7957ECD0_g, auto7957ECD0_u)) ) {
        lv_townHall = UnitGroupUnit(auto7957ECD0_g, auto7957ECD0_u);
        UnitGroupAdd(lv_townHallGroup, lv_townHall);
    }
    autoF34E8B7B_g = UnitGroup("Hive", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF34E8B7B_u = 1;
    for ( ; autoF34E8B7B_u <= UnitGroupCount(autoF34E8B7B_g, c_unitCountAll) ; autoF34E8B7B_u += BoolToInt(lv_townHall == UnitGroupUnit(autoF34E8B7B_g, autoF34E8B7B_u)) ) {
        lv_townHall = UnitGroupUnit(autoF34E8B7B_g, autoF34E8B7B_u);
        UnitGroupAdd(lv_townHallGroup, lv_townHall);
    }
    autoB7CB30EC_g = UnitGroup("Lair", lp_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB7CB30EC_u = 1;
    for ( ; autoB7CB30EC_u <= UnitGroupCount(autoB7CB30EC_g, c_unitCountAll) ; autoB7CB30EC_u += BoolToInt(lv_townHall == UnitGroupUnit(autoB7CB30EC_g, autoB7CB30EC_u)) ) {
        lv_townHall = UnitGroupUnit(autoB7CB30EC_g, autoB7CB30EC_u);
        UnitGroupAdd(lv_townHallGroup, lv_townHall);
    }
    return lv_townHallGroup;
}

unitgroup libSCPL_gf_MapHarvestableMinerals () {
    unitgroup auto3A82A7DF_g;
    int auto3A82A7DF_u;

    // Variable Declarations
    unitgroup lv_harvestable;
    unit lv_resource;

    // Variable Initialization
    lv_harvestable = UnitGroupEmpty();

    // Implementation
    auto3A82A7DF_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3A82A7DF_u = 1;
    for ( ; auto3A82A7DF_u <= UnitGroupCount(auto3A82A7DF_g, c_unitCountAll) ; auto3A82A7DF_u += BoolToInt(lv_resource == UnitGroupUnit(auto3A82A7DF_g, auto3A82A7DF_u)) ) {
        lv_resource = UnitGroupUnit(auto3A82A7DF_g, auto3A82A7DF_u);
        if (((UnitHasBehavior2(lv_resource, "MineralFieldMinerals") == true) || (UnitHasBehavior2(lv_resource, "MineralFieldMinerals750") == true) || (UnitHasBehavior2(lv_resource, "HighYieldMineralFieldMinerals") == true) || (UnitHasBehavior2(lv_resource, "HighYieldMineralFieldMinerals750") == true) || (UnitHasBehavior2(lv_resource, "MineralFieldMineralsNoRemove") == true))) {
            UnitGroupAdd(lv_harvestable, lv_resource);
        }
    }
    return lv_harvestable;
}

unitgroup libSCPL_gf_UnitsInUnitGroupMatchingChargeLink (unitgroup lp_unitGroup, string lp_chargeLink, fixed lp_chargeValue) {
    unitgroup autoBE7DE37B_g;
    int autoBE7DE37B_u;

    // Variable Declarations
    unitgroup lv_chargeLinkUnits;
    unit lv_unit;

    // Variable Initialization
    lv_chargeLinkUnits = UnitGroupEmpty();

    // Implementation
    autoBE7DE37B_g = lp_unitGroup;
    autoBE7DE37B_u = 1;
    for ( ; autoBE7DE37B_u <= UnitGroupCount(autoBE7DE37B_g, c_unitCountAll) ; autoBE7DE37B_u += BoolToInt(lv_unit == UnitGroupUnit(autoBE7DE37B_g, autoBE7DE37B_u)) ) {
        lv_unit = UnitGroupUnit(autoBE7DE37B_g, autoBE7DE37B_u);
        if ((libSCPL_gf_UnitChargeLink(lv_unit, lp_chargeLink) == lp_chargeValue)) {
            UnitGroupAdd(lv_chargeLinkUnits, lv_unit);
        }
    }
    return lv_chargeLinkUnits;
}

void libSCPL_gf_UnitChargeLinkSet (unit lp_unit, string lp_chargeLink, fixed lp_chargeValue) {
    // Implementation
    libNtve_gf_UnitRemoveChargeUsed(lp_unit, (lp_chargeLink));
    UnitAddChargeUsed(lp_unit, (lp_chargeLink), lp_chargeValue);
}

void libSCPL_gf_UnitChargeLinkAdd (unit lp_unit, string lp_chargeLink, fixed lp_chargeValue) {
    // Implementation
    UnitAddChargeUsed(lp_unit, (lp_chargeLink), lp_chargeValue);
}

fixed libSCPL_gf_UnitChargeLink (unit lp_unit, string lp_chargeLink) {
    // Implementation
    return UnitGetChargeUsed(lp_unit, (lp_chargeLink));
}

void TriggerAddEventWorkerSaturationCountReached (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, "WorkerSaturationCountReached");
}

void libSCPL_gf_ResourceSpendChanges (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libSCPL_ge_GenericEvent_Ident(libSCPL_ge_GenericEvent_ResourceSpend));
}

void libSCPL_gf_ControlGroupComposition (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libSCPL_ge_GenericEvent_Ident(libSCPL_ge_GenericEvent_ControlGroupComposition));
}

void libSCPL_gf_UCBTerranAddonTestReactor (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libSCPL_ge_GenericEvent_Ident(libSCPL_ge_GenericEvent_TerranAddonTestReactor));
}

void libSCPL_gf_UCBTerranAddonTestTechLab (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libSCPL_ge_GenericEvent_Ident(libSCPL_ge_GenericEvent_TerranAddonTestTechLab));
}

void libSCPL_gf_GenericEventResourceSpendChanges3 (int lp_triggeringPlayer) {
    // Variable Declarations
    string lv_event;
    string lv_param;

    // Variable Initialization
    lv_event = "";
    lv_param = "";

    // Implementation
    lv_event = libSCPL_ge_GenericEvent_Ident(libSCPL_ge_GenericEvent_TownHallSaturated);
    lv_param = libSCPL_ge_GenericParameter_Ident(libSCPL_ge_GenericParameter_TriggeringPlayer);
    DataTableSetInt(false, TriggerEventParamName(lv_event, lv_param), lp_triggeringPlayer);
    TriggerSendEvent(lv_event);
}

void libSCPL_gf_GenericEventResourceSpendChanges (int lp_triggeringPlayer) {
    // Variable Declarations
    string lv_event;
    string lv_param;

    // Variable Initialization
    lv_event = "";
    lv_param = "";

    // Implementation
    lv_event = libSCPL_ge_GenericEvent_Ident(libSCPL_ge_GenericEvent_ResourceSpend);
    lv_param = libSCPL_ge_GenericParameter_Ident(libSCPL_ge_GenericParameter_TriggeringPlayer);
    DataTableSetInt(false, TriggerEventParamName(lv_event, lv_param), lp_triggeringPlayer);
    TriggerSendEvent(lv_event);
}

void libSCPL_gf_GenericEventResourceSpendChanges2 (int lp_triggeringPlayer, int lp_controlGroup) {
    // Variable Declarations
    string lv_event;
    string lv_param;

    // Variable Initialization
    lv_event = "";
    lv_param = "";

    // Implementation
    lv_event = libSCPL_ge_GenericEvent_Ident(libSCPL_ge_GenericEvent_ControlGroupComposition);
    lv_param = libSCPL_ge_GenericParameter_Ident(libSCPL_ge_GenericParameter_TriggeringPlayer);
    DataTableSetInt(false, TriggerEventParamName(lv_event, lv_param), lp_triggeringPlayer);
    lv_param = libSCPL_ge_GenericParameter_Ident(libSCPL_ge_GenericParameter_ControlGroup);
    DataTableSetInt(false, TriggerEventParamName(lv_event, lv_param), lp_controlGroup);
    TriggerSendEvent(lv_event);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization Plus
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_InitializationPlus_Func (bool testConds, bool runActions) {
    playergroup autoE8E742EE_g;
    int autoE8E742EE_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gv_map.lv_baseRegion = RegionCircle(Point(0.0, 0.0), 0.125);
    libSCPL_gv_constants.lv_gameSpeedFactor = GameGetSpeed();
    libSCPL_gf_InitializeUIHookups();
    libSCPL_gf_InitializeSpendOverTime();
    libSCPL_gf_AutoCreepTargetNodesInitialize();
    libSCPL_gf_InitializeAutomatedWorkerProduction();
    autoE8E742EE_g = PlayerGroupActive(); 
    autoE8E742EE_p = 1;
    for ( ; autoE8E742EE_p <= PlayerGroupCount(autoE8E742EE_g) ; autoE8E742EE_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(autoE8E742EE_g, autoE8E742EE_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoE8E742EE_g, autoE8E742EE_p);
        libSCPL_gf_InitializeGlobalRallyCaster(lv_playerIndex);
    }
    libSCPL_gf_SCPBankInitialize();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_InitializationPlus_Init () {
    libSCPL_gt_InitializationPlus = TriggerCreate("libSCPL_gt_InitializationPlus_Func");
    TriggerAddEventTimeElapsed(libSCPL_gt_InitializationPlus, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Morph Command
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBMorphCommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_unitGroup;
    order lv_order;
    unit lv_bestUnit;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = DataTableGetInt(false, TriggerEventParamName("GenericEventMorphCommand", "TestPlayer"));
    lv_unitGroup = DataTableGetUnitGroup(false, TriggerEventParamName("GenericEventMorphCommand", "TestUnits"));
    lv_order = DataTableGetOrder(false, TriggerEventParamName("GenericEventMorphCommand", "TestOrder"));
    lv_bestUnit = libSCPL_gf_UnitGroupBestUnit(lv_unitGroup);
    if ((OrderGetAbilityCommand(lv_order) == AbilityCommand("ArchonWarp", 0))) {
        UnitGroupIssueOrder(lv_unitGroup, lv_order, c_orderQueueReplace);
        return true;
    }
    if ((UnitIsAlive(lv_bestUnit) == true)) {
        UnitIssueOrder(lv_bestUnit, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_bestUnit, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_bestUnit, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_bestUnit, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_bestUnit, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_bestUnit, Order(AbilityCommand("que5CancelToSelection", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_bestUnit, Order(AbilityCommand("que5CancelToSelection", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_bestUnit, Order(AbilityCommand("que5CancelToSelection", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_bestUnit, Order(AbilityCommand("que5CancelToSelection", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_bestUnit, Order(AbilityCommand("que5CancelToSelection", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_bestUnit, lv_order, c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBMorphCommand_Init () {
    libSCPL_gt_UCBMorphCommand = TriggerCreate("libSCPL_gt_UCBMorphCommand_Func");
    TriggerAddEventGeneric(libSCPL_gt_UCBMorphCommand, "GenericEventMorphCommand");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Morph Refund 01
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressMorphRefund01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_progressUnitType;
    string lv_parentUnitType;
    string lv_triggeringAbility;
    string lv_registerName;
    int lv_progressIndex;
    fixed lv_costMinerals;
    fixed lv_costVespene;
    fixed lv_costTime;

    // Variable Initialization
    lv_registerName = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_progressIndex = AbilityCommandGetCommand(OrderGetAbilityCommand(EventUnitOrder()));
    lv_triggeringAbility = AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder()));
    lv_registerName = CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].Unit", c_playerAny);
    lv_progressUnitType = (CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, ("InfoArray[" + IntToString(lv_progressIndex) + "].Unit"), c_playerAny));
    lv_progressUnitType = UnitGetType(EventUnit());
    if (((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("UpgradeToOrbitalUCB", 0)) || (OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("UpgradeToPlanetaryFortressUCB", 0)))) {
        lv_progressUnitType = "CommandCenter";
    }
    else if ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("UpgradeToGreaterSpireUCB", 0))) {
        lv_progressUnitType = "Spire";
    }
    else if ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("UpgradeToLurkerDenMPUCB", 0))) {
        lv_progressUnitType = "HydraliskDen";
    }
    else if ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("UpgradeToLairUCB", 0))) {
        lv_progressUnitType = "Hatchery";
    }
    else if ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("UpgradeToHiveUCB", 0))) {
        lv_progressUnitType = "Lair";
    }
    else if ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("MorphZerglingToBanelingUCB", 0))) {
        lv_progressUnitType = "Zergling";
    }
    lv_costMinerals = (UnitTypeGetCost(UnitTypeFromString(lv_registerName), c_unitCostMinerals) - UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals));
    lv_costVespene = (UnitTypeGetCost(UnitTypeFromString(lv_registerName), c_unitCostVespene) - UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene));
    lv_costTime = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].SectionArray[" + IntToString(0) + "].DurationArray[" + IntToString(0) + "]", c_playerAny));
    if ((libSCPL_gf_RegisterExists(lv_registerName) == false)) {
        libSCPL_gf_RegisterBuildTime(lv_registerName, lv_costTime);
        libSCPL_gf_RegisterCostMinerals(lv_registerName, lv_costMinerals);
        libSCPL_gf_RegisterCostVespene(lv_registerName, lv_costVespene);
    }
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperAdd, lv_costMinerals);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperAdd, lv_costVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressMorphRefund01_Init () {
    libSCPL_gt_ProgressMorphRefund01 = TriggerCreate("libSCPL_gt_ProgressMorphRefund01_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToOrbital", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToPlanetaryFortress", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToOrbitalUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToPlanetaryFortressUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("MorphDummyTrainNukeUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("BarracksReactorMorphUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("FactoryReactorMorphUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("StarportReactorMorphUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("BarracksTechLabMorphUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("FactoryTechLabMorphUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("StarportTechLabMorphUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("MorphToMothership", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToLair", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToHive", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToGreaterSpire", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToLurkerDenMP", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToGreaterSpireUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToLurkerDenMPUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToLairUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("UpgradeToHiveUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund01, null, AbilityCommand("MorphZerglingToBanelingUCB", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Morph Start 01
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressMorphStart01_Func (bool testConds, bool runActions) {
    fixed auto41D1DAA8_ae;
    fixed auto41D1DAA8_ai;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_progressUnit;
    string lv_progressUnitType;
    string lv_progressAbility;
    fixed lv_totalCostMinerals;
    fixed lv_totalCostVespene;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_progressTime;
    int lv_progressIndex;
    fixed lv_expectedTime;
    fixed lv_tick;
    fixed lv_tickIncrement;
    fixed lv_tickCostBaseMinerals;
    fixed lv_tickCostBaseVespene;
    fixed lv_tickCostCarryOverMinerals;
    fixed lv_tickCostCarryOverVespene;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;
    bool lv_progressIsComplete;
    bool lv_progressIsCancelled;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lv_playerIndex = EventPlayer();
    lv_progressUnit = EventUnit();
    lv_progressIndex = 1;
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_progressAbility = AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(EventUnit(), 0)));
    lv_progressUnitType = libSCPL_gf_AbilityMorphUnit(AbilityCommandGetAbility(EventUnitAbility()), lv_progressUnit);
    lv_totalCostMinerals = libSCPL_gf_GetCostMinerals((lv_progressUnitType));
    lv_totalCostVespene = libSCPL_gf_GetCostVespene((lv_progressUnitType));
    lv_progressTime = libSCPL_gf_GetBuildTime((lv_progressUnitType));
    lv_progressTime = (Trunc((lv_progressTime / lv_tickIncrement)) * lv_tickIncrement);
    lv_tickCostBaseMinerals = (lv_totalCostMinerals / (lv_progressTime / lv_tickIncrement));
    lv_tickCostBaseVespene = (lv_totalCostVespene / (lv_progressTime / lv_tickIncrement));
    libSCPL_gf_ResourceDisplaySpendAdd(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    auto41D1DAA8_ae = (lv_progressTime - lv_tickIncrement);
    auto41D1DAA8_ai = lv_tickIncrement;
    lv_tick = 0.0;
    for ( ; ( (auto41D1DAA8_ai >= 0 && lv_tick <= auto41D1DAA8_ae) || (auto41D1DAA8_ai <= 0 && lv_tick >= auto41D1DAA8_ae) ) ; lv_tick += auto41D1DAA8_ai ) {
        if ((UnitIsAlive(lv_progressUnit) == false)) {
            break;
        }
        if ((lv_tick != 0.0) && ((lv_progressAbility != AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(EventUnit(), 0)))) || (libSCPL_gf_UnitMorphProgress(lv_progressUnit) != (lv_tick - lv_tickIncrement)))) {
            lv_progressIsCancelled = true;
            break;
        }
        lv_tickCostMinerals = (lv_tickCostBaseMinerals + lv_tickCostCarryOverMinerals);
        lv_tickCostVespene = (lv_tickCostBaseVespene + lv_tickCostCarryOverVespene);
        lv_tickCostCarryOverMinerals = ModF(lv_tickCostMinerals, 1.0);
        lv_tickCostCarryOverVespene = ModF(lv_tickCostVespene, 1.0);
        if (((lv_tickTotalMinerals + Round(lv_tickCostMinerals)) >= lv_totalCostMinerals) && ((lv_tickTotalVespene + Round(lv_tickCostVespene)) >= lv_totalCostVespene)) {
            lv_tickCostMinerals = (lv_totalCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_totalCostVespene - lv_tickTotalVespene);
            lv_progressIsComplete = true;
        }
        lv_progressCostMinerals = Trunc(lv_tickCostMinerals);
        lv_progressCostVespene = Trunc(lv_tickCostVespene);
        if (((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
            libSCPL_gf_UnitStatusPauseProgressUnit(lv_progressUnit, lv_progressUnit, 1, true);
            while ((UnitIsAlive(lv_progressUnit) == true) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene)) && (lv_progressAbility == AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(EventUnit(), 0)))) && ((lv_tick == 0.0) || (libSCPL_gf_UnitMorphProgress(lv_progressUnit) == (lv_tick - lv_tickIncrement)))) {
                Wait(lv_tickIncrement, c_timeGame);
            }
            if ((UnitIsAlive(lv_progressUnit) == false)) {
                break;
            }
            if (((lv_progressAbility != AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(EventUnit(), 0)))) || ((libSCPL_gf_UnitMorphProgress(lv_progressUnit) != (lv_tick - lv_tickIncrement)) && (lv_tick != 0.0)))) {
                lv_progressIsCancelled = true;
                break;
            }
            libSCPL_gf_UnitStatusPauseProgressUnit(lv_progressUnit, lv_progressUnit, 1, false);
        }
        lv_tickTotalMinerals += lv_progressCostMinerals;
        lv_tickTotalVespene += lv_progressCostVespene;
        libSCPL_gf_PlayerResourcesSubtract(lv_playerIndex, lv_progressCostMinerals, lv_progressCostVespene);
        libSCPL_gf_UnitMorphProgressSet(lv_progressUnit, lv_tick);
        if ((lv_progressIsComplete == true)) {
            Wait((lv_tickIncrement - 0.0625), c_timeGame);
            if ((libSCPL_gf_UnitMorphProgress(lv_progressUnit) != lv_tick)) {
                lv_progressIsCancelled = true;
            }
            continue;
        }
        Wait(lv_tickIncrement, c_timeGame);
    }
    libSCPL_gf_ResourceDisplaySpendSubtract(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    if ((lv_progressIsCancelled == true)) {
        lv_tickTotalMinerals *= 0.75;
        lv_tickTotalVespene *= 0.75;
        libSCPL_gf_PlayerResourcesAdd(lv_playerIndex, lv_tickTotalMinerals, lv_tickTotalVespene);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressMorphStart01_Init () {
    libSCPL_gt_ProgressMorphStart01 = TriggerCreate("libSCPL_gt_ProgressMorphStart01_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart01, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart01, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart01, null, AbilityCommand("MorphToMothership", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart01, null, AbilityCommand("UpgradeToLair", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart01, null, AbilityCommand("UpgradeToHive", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart01, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart01, null, AbilityCommand("UpgradeToLurkerDenMP", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Morph Refund  02
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressMorphRefund02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_progressUnitType;
    string lv_parentUnitType;
    string lv_triggeringAbility;
    string lv_registerName;
    int lv_progressIndex;
    fixed lv_costMinerals;
    fixed lv_costVespene;
    fixed lv_costTime;

    // Variable Initialization
    lv_registerName = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_progressIndex = 1;
    lv_triggeringAbility = AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder()));
    lv_registerName = CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].Unit", c_playerAny);
    lv_progressUnitType = (lv_registerName);
    lv_parentUnitType = libSCPL_gf_AbilityMorphParentUnit(EventUnit());
    if (((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("MorphToOverseerUCB", 0)) || (OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("MorphToTransportOverlordUCB", 0)))) {
        lv_parentUnitType = "Overlord";
    }
    else if ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("MorphToRavagerUCB", 0))) {
        lv_parentUnitType = "Roach";
    }
    else if ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("MorphToLurkerUCB", 0))) {
        lv_parentUnitType = "Hydralisk";
    }
    else if ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("MorphToBroodLordUCB", 0))) {
        lv_parentUnitType = "Corruptor";
    }
    lv_costMinerals = (UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals) - UnitTypeGetCost(lv_parentUnitType, c_unitCostMinerals));
    lv_costVespene = (UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene) - UnitTypeGetCost(lv_parentUnitType, c_unitCostVespene));
    lv_costTime = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].SectionArray[" + IntToString(0) + "].DurationArray[" + IntToString(0) + "]", c_playerAny));
    if ((libSCPL_gf_RegisterExists(lv_registerName) == false)) {
        libSCPL_gf_RegisterBuildTime(lv_registerName, lv_costTime);
        libSCPL_gf_RegisterCostMinerals(lv_registerName, lv_costMinerals);
        libSCPL_gf_RegisterCostVespene(lv_registerName, lv_costVespene);
    }
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperAdd, lv_costMinerals);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperAdd, lv_costVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressMorphRefund02_Init () {
    libSCPL_gt_ProgressMorphRefund02 = TriggerCreate("libSCPL_gt_ProgressMorphRefund02_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund02, null, AbilityCommand("MorphToTransportOverlord", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund02, null, AbilityCommand("MorphToOverseer", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund02, null, AbilityCommand("MorphToRavager", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund02, null, AbilityCommand("MorphToLurker", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund02, null, AbilityCommand("MorphToBroodLord", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund02, null, AbilityCommand("MorphToTransportOverlordUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund02, null, AbilityCommand("MorphToOverseerUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund02, null, AbilityCommand("MorphToRavagerUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund02, null, AbilityCommand("MorphToLurkerUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphRefund02, null, AbilityCommand("MorphToBroodLordUCB", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Morph Start 02
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressMorphStart02_Func (bool testConds, bool runActions) {
    fixed autoBF339C3B_ae;
    fixed autoBF339C3B_ai;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_progressUnit;
    string lv_progressUnitType;
    string lv_progressAbility;
    fixed lv_totalCostMinerals;
    fixed lv_totalCostVespene;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_progressTime;
    int lv_progressIndex;
    fixed lv_expectedTime;
    fixed lv_tick;
    fixed lv_tickIncrement;
    fixed lv_tickCostBaseMinerals;
    fixed lv_tickCostBaseVespene;
    fixed lv_tickCostCarryOverMinerals;
    fixed lv_tickCostCarryOverVespene;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;
    bool lv_progressIsComplete;
    bool lv_progressIsCancelled;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lv_playerIndex = EventPlayer();
    lv_progressUnit = EventUnit();
    lv_progressIndex = 1;
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_progressAbility = AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(EventUnit(), 0)));
    lv_progressUnitType = libSCPL_gf_AbilityMorphUnit(AbilityCommandGetAbility(EventUnitAbility()), lv_progressUnit);
    lv_totalCostMinerals = libSCPL_gf_GetCostMinerals((lv_progressUnitType));
    lv_totalCostVespene = libSCPL_gf_GetCostVespene((lv_progressUnitType));
    lv_progressTime = libSCPL_gf_GetBuildTime((lv_progressUnitType));
    lv_progressTime = (Trunc((lv_progressTime / lv_tickIncrement)) * lv_tickIncrement);
    lv_tickCostBaseMinerals = (lv_totalCostMinerals / (lv_progressTime / lv_tickIncrement));
    lv_tickCostBaseVespene = (lv_totalCostVespene / (lv_progressTime / lv_tickIncrement));
    libSCPL_gf_ResourceDisplaySpendAdd(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    autoBF339C3B_ae = (lv_progressTime - lv_tickIncrement);
    autoBF339C3B_ai = lv_tickIncrement;
    lv_tick = 0.0;
    for ( ; ( (autoBF339C3B_ai >= 0 && lv_tick <= autoBF339C3B_ae) || (autoBF339C3B_ai <= 0 && lv_tick >= autoBF339C3B_ae) ) ; lv_tick += autoBF339C3B_ai ) {
        if ((UnitIsAlive(lv_progressUnit) == false)) {
            break;
        }
        if ((lv_tick != 0.0) && ((lv_progressAbility != AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(EventUnit(), 0)))) || (libSCPL_gf_UnitMorphProgress(lv_progressUnit) != (lv_tick - lv_tickIncrement)))) {
            lv_progressIsCancelled = true;
            break;
        }
        lv_tickCostMinerals = (lv_tickCostBaseMinerals + lv_tickCostCarryOverMinerals);
        lv_tickCostVespene = (lv_tickCostBaseVespene + lv_tickCostCarryOverVespene);
        lv_tickCostCarryOverMinerals = ModF(lv_tickCostMinerals, 1.0);
        lv_tickCostCarryOverVespene = ModF(lv_tickCostVespene, 1.0);
        if (((lv_tickTotalMinerals + Round(lv_tickCostMinerals)) >= lv_totalCostMinerals) && ((lv_tickTotalVespene + Round(lv_tickCostVespene)) >= lv_totalCostVespene)) {
            lv_tickCostMinerals = (lv_totalCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_totalCostVespene - lv_tickTotalVespene);
            lv_progressIsComplete = true;
        }
        lv_progressCostMinerals = Trunc(lv_tickCostMinerals);
        lv_progressCostVespene = Trunc(lv_tickCostVespene);
        if (((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
            libSCPL_gf_UnitStatusPauseProgressUnit(lv_progressUnit, lv_progressUnit, 1, true);
            while ((UnitIsAlive(lv_progressUnit) == true) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene)) && (lv_progressAbility == AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(EventUnit(), 0)))) && ((lv_tick == 0.0) || (libSCPL_gf_UnitMorphProgress(lv_progressUnit) == (lv_tick - lv_tickIncrement)))) {
                Wait(lv_tickIncrement, c_timeGame);
            }
            if ((UnitIsAlive(lv_progressUnit) == false)) {
                break;
            }
            if (((lv_progressAbility != AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(EventUnit(), 0)))) || ((libSCPL_gf_UnitMorphProgress(lv_progressUnit) != (lv_tick - lv_tickIncrement)) && (lv_tick != 0.0)))) {
                lv_progressIsCancelled = true;
                break;
            }
            libSCPL_gf_UnitStatusPauseProgressUnit(lv_progressUnit, lv_progressUnit, 1, false);
        }
        lv_tickTotalMinerals += lv_progressCostMinerals;
        lv_tickTotalVespene += lv_progressCostVespene;
        libSCPL_gf_PlayerResourcesSubtract(lv_playerIndex, lv_progressCostMinerals, lv_progressCostVespene);
        libSCPL_gf_UnitMorphProgressSet(lv_progressUnit, lv_tick);
        if ((lv_progressIsComplete == true)) {
            Wait((lv_tickIncrement - 0.0625), c_timeGame);
            if ((libSCPL_gf_UnitMorphProgress(lv_progressUnit) != lv_tick)) {
                lv_progressIsCancelled = true;
            }
            continue;
        }
        Wait(lv_tickIncrement, c_timeGame);
    }
    libSCPL_gf_ResourceDisplaySpendSubtract(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    if ((lv_progressIsCancelled == true)) {
        lv_tickTotalMinerals *= 0.75;
        lv_tickTotalVespene *= 0.75;
        libSCPL_gf_PlayerResourcesAdd(lv_playerIndex, lv_tickTotalMinerals, lv_tickTotalVespene);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressMorphStart02_Init () {
    libSCPL_gt_ProgressMorphStart02 = TriggerCreate("libSCPL_gt_ProgressMorphStart02_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart02, null, AbilityCommand("MorphToOverseer", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart02, null, AbilityCommand("MorphToTransportOverlord", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart02, null, AbilityCommand("MorphToRavager", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart02, null, AbilityCommand("MorphToLurker", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressMorphStart02, null, AbilityCommand("MorphToBroodLord", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Morph Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressMorphCancel_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_UnitMorphProgressSet(EventUnit(), 0.0);
    libSCPL_gf_UnitStatusPauseProgressUnit(EventUnit(), EventUnit(), 1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressMorphCancel_Init () {
    libSCPL_gt_ProgressMorphCancel = TriggerCreate("libSCPL_gt_ProgressMorphCancel_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("UpgradeToOrbital", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("UpgradeToPlanetaryFortress", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("MorphToMothership", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("UpgradeToLair", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("UpgradeToHive", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("UpgradeToGreaterSpire", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("UpgradeToLurkerDenMP", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("MorphToLurker", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("MorphToBroodLord", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("MorphToRavager", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("MorphToOverseer", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressMorphCancel, null, AbilityCommand("MorphToTransportOverlord", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Upgrade Refund
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressUpgradeRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    string lv_triggeringAbility;
    string lv_registerName;
    int lv_progressIndex;
    fixed lv_costMinerals;
    fixed lv_costVespene;
    fixed lv_costTime;

    // Variable Initialization
    lv_registerName = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressIndex = AbilityCommandGetCommand(OrderGetAbilityCommand(EventUnitOrder()));
    lv_triggeringAbility = AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder()));
    lv_registerName = CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].Upgrade", c_playerAny);
    lv_costMinerals = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].Resource[" + IntToString(0) + "]", c_playerAny));
    lv_costVespene = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].Resource[" + IntToString(1) + "]", c_playerAny));
    lv_costTime = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].Time", c_playerAny));
    if ((libSCPL_gf_RegisterExists(lv_registerName) == false)) {
        libSCPL_gf_RegisterBuildTime(lv_registerName, lv_costTime);
        libSCPL_gf_RegisterCostMinerals(lv_registerName, lv_costMinerals);
        libSCPL_gf_RegisterCostVespene(lv_registerName, lv_costVespene);
    }
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperAdd, lv_costMinerals);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperAdd, lv_costVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressUpgradeRefund_Init () {
    libSCPL_gt_ProgressUpgradeRefund = TriggerCreate("libSCPL_gt_ProgressUpgradeRefund_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("EngineeringBayResearch", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("EngineeringBayResearch", 7));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("EngineeringBayResearch", 8));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("EngineeringBayResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("EngineeringBayResearch", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("EngineeringBayResearch", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ArmoryResearch", 14));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ArmoryResearch", 15));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ArmoryResearch", 16));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ArmoryResearch", 8));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ArmoryResearch", 9));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ArmoryResearch", 10));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ArmoryResearch", 11));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ArmoryResearch", 12));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ArmoryResearch", 13));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("EngineeringBayResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("EngineeringBayResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("EngineeringBayResearch", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("BarracksTechLabResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("BarracksTechLabResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("BarracksTechLabResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("FactoryTechLabResearch", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("FactoryTechLabResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("FactoryTechLabResearch", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("FactoryTechLabResearch", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("StarportTechLabResearch", 9));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("StarportTechLabResearch", 15));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("StarportTechLabResearch", 14));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("StarportTechLabResearch", 12));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("StarportTechLabResearch", 13));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("StarportTechLabResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("StarportTechLabResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("StarportTechLabResearch", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("StarportTechLabResearch", 10));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("StarportTechLabResearch", 7));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("StarportTechLabResearch", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("GhostAcademyResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("FusionCoreResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ForgeResearch", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ForgeResearch", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ForgeResearch", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ForgeResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ForgeResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ForgeResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ForgeResearch", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ForgeResearch", 7));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("ForgeResearch", 8));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("CyberneticsCoreResearch", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("CyberneticsCoreResearch", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("CyberneticsCoreResearch", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("CyberneticsCoreResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("CyberneticsCoreResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("CyberneticsCoreResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("CyberneticsCoreResearch", 9));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("CyberneticsCoreResearch", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("TemplarArchivesResearch", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("FleetBeaconResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("FleetBeaconResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("FleetBeaconResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("FleetBeaconResearch", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("RoboticsBayResearch", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("RoboticsBayResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("RoboticsBayResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("RoboticsBayResearch", 7));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("TwilightCouncilResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("TwilightCouncilResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("TwilightCouncilResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("evolutionchamberresearch", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("evolutionchamberresearch", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("evolutionchamberresearch", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("evolutionchamberresearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("evolutionchamberresearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("evolutionchamberresearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("evolutionchamberresearch", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("evolutionchamberresearch", 7));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("evolutionchamberresearch", 8));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("SpireResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("SpireResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("SpireResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("SpireResearch", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("SpireResearch", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("SpireResearch", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("LairResearch", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("LairResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("LairResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("SpawningPoolResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("SpawningPoolResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("RoachWarrenResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("RoachWarrenResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("RoachWarrenResearch", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("HydraliskDenResearch", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("HydraliskDenResearch", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("InfestationPitResearch", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("InfestationPitResearch", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("InfestationPitResearch", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("BanelingNestResearch", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUpgradeRefund, null, AbilityCommand("UltraliskCavernResearch", 2));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Upgrade Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressUpgradeStart_Func (bool testConds, bool runActions) {
    fixed auto42E76EAC_ae;
    fixed auto42E76EAC_ai;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    unit lv_progressUnit;
    string lv_progressType;
    fixed lv_totalCostMinerals;
    fixed lv_totalCostVespene;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_progressTime;
    int lv_progressIndex;
    fixed lv_expectedTime;
    fixed lv_tick;
    fixed lv_tickIncrement;
    fixed lv_tickCostBaseMinerals;
    fixed lv_tickCostBaseVespene;
    fixed lv_tickCostCarryOverMinerals;
    fixed lv_tickCostCarryOverVespene;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;
    bool lv_progressIsComplete;
    bool lv_progressIsCancelled;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) != "Prot"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressUnit = EventUnitProgressUnit();
    lv_progressIndex = 1;
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_progressType = libNtve_gf_TriggeringProgressUpgrade();
    lv_totalCostMinerals = libSCPL_gf_GetCostMinerals((lv_progressType));
    lv_totalCostVespene = libSCPL_gf_GetCostVespene((lv_progressType));
    lv_progressTime = libSCPL_gf_GetBuildTime((lv_progressType));
    lv_progressTime = (Trunc((lv_progressTime / lv_tickIncrement)) * lv_tickIncrement);
    lv_tickCostBaseMinerals = (lv_totalCostMinerals / (lv_progressTime / lv_tickIncrement));
    lv_tickCostBaseVespene = (lv_totalCostVespene / (lv_progressTime / lv_tickIncrement));
    libSCPL_gf_ResourceDisplaySpendAdd(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    auto42E76EAC_ae = (lv_progressTime - lv_tickIncrement);
    auto42E76EAC_ai = lv_tickIncrement;
    lv_tick = 0.0;
    for ( ; ( (auto42E76EAC_ai >= 0 && lv_tick <= auto42E76EAC_ae) || (auto42E76EAC_ai <= 0 && lv_tick >= auto42E76EAC_ae) ) ; lv_tick += auto42E76EAC_ai ) {
        lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
        if ((lv_tick != lv_expectedTime) && (lv_tick != 0.0)) {
            lv_progressIsCancelled = true;
            break;
        }
        if ((UnitIsAlive(lv_parentUnit) == false)) {
            break;
        }
        lv_tickCostMinerals = (lv_tickCostBaseMinerals + lv_tickCostCarryOverMinerals);
        lv_tickCostVespene = (lv_tickCostBaseVespene + lv_tickCostCarryOverVespene);
        lv_tickCostCarryOverMinerals = ModF(lv_tickCostMinerals, 1.0);
        lv_tickCostCarryOverVespene = ModF(lv_tickCostVespene, 1.0);
        if (((lv_tickTotalMinerals + Round(lv_tickCostMinerals)) >= lv_totalCostMinerals) && ((lv_tickTotalVespene + Round(lv_tickCostVespene)) >= lv_totalCostVespene)) {
            lv_tickCostMinerals = (lv_totalCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_totalCostVespene - lv_tickTotalVespene);
            lv_progressIsComplete = true;
        }
        lv_progressCostMinerals = Trunc(lv_tickCostMinerals);
        lv_progressCostVespene = Trunc(lv_tickCostVespene);
        if (((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, true);
            while ((lv_tick == lv_expectedTime) && (UnitIsAlive(lv_parentUnit) == true) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
                Wait(lv_tickIncrement, c_timeGame);
            }
            if ((UnitIsAlive(lv_parentUnit) == false)) {
                break;
            }
            if ((lv_tick != lv_expectedTime) && (lv_tick != 0.0)) {
                lv_progressIsCancelled = true;
                break;
            }
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, false);
        }
        lv_tickTotalMinerals += lv_progressCostMinerals;
        lv_tickTotalVespene += lv_progressCostVespene;
        libSCPL_gf_PlayerResourcesSubtract(lv_playerIndex, lv_progressCostMinerals, lv_progressCostVespene);
        if ((lv_progressIsComplete == true)) {
            Wait((lv_tickIncrement - 0.0625), c_timeGame);
            lv_tick += (lv_tickIncrement - 0.0625);
            lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
            if ((lv_tick != lv_expectedTime)) {
                lv_progressIsCancelled = true;
            }
            continue;
        }
        if ((lv_tick == 0.0)) {
            lv_tick = 0.0;
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, true);
            Wait(0.0625, c_timeGame);
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, false);
            Wait((lv_tickIncrement - 0.0625), c_timeGame);
            continue;
        }
        Wait(lv_tickIncrement, c_timeGame);
    }
    libSCPL_gf_ResourceDisplaySpendSubtract(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    if ((lv_progressIsCancelled == true)) {
        libSCPL_gf_PlayerResourcesAdd(lv_playerIndex, lv_tickTotalMinerals, lv_tickTotalVespene);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressUpgradeStart_Init () {
    libSCPL_gt_ProgressUpgradeStart = TriggerCreate("libSCPL_gt_ProgressUpgradeStart_Func");
    TriggerAddEventUnitResearchProgress(libSCPL_gt_ProgressUpgradeStart, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Protoss Upgrade Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressProtossUpgradeStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    int lv_progressIndex;
    bool lv_progressIsComplete;
    string lv_progressType;
    fixed lv_progressTime;
    fixed lv_progressTimeActual;
    fixed lv_progressTimeElapsed;
    fixed lv_progressTimeRemaining;
    fixed lv_progressPercentCurrent;
    fixed lv_progressPercentPrevious;
    fixed lv_progressPercentIncrement;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_totalCostMinerals;
    fixed lv_totalCostVespene;
    fixed lv_tickIncrement;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) == "Prot"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressIndex = 1;
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_progressType = libNtve_gf_TriggeringProgressUpgrade();
    lv_totalCostMinerals = libSCPL_gf_GetCostMinerals((lv_progressType));
    lv_totalCostVespene = libSCPL_gf_GetCostVespene((lv_progressType));
    lv_progressTime = libSCPL_gf_GetBuildTime((lv_progressType));
    lv_progressTimeActual = (lv_progressTime - 1.0);
    libSCPL_gf_UnitProtossProgressSet(lv_parentUnit, 0.0);
    while ((UnitIsAlive(lv_parentUnit) == true) && (lv_progressIsComplete == false) && (libSCPL_gf_UnitProtossProgress(lv_parentUnit) != -1.0)) {
        lv_progressTimeElapsed = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
        lv_progressTimeRemaining = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeRemaining, lv_progressIndex);
        lv_progressPercentCurrent = (lv_progressTimeElapsed / lv_progressTimeActual);
        lv_progressPercentPrevious = libSCPL_gf_UnitProtossProgress(lv_parentUnit);
        lv_progressPercentIncrement = (lv_progressPercentCurrent - lv_progressPercentPrevious);
        libSCPL_gf_UnitProtossProgressSet(lv_parentUnit, lv_progressPercentCurrent);
        libSCPL_gf_ResourceDisplaySpendUpdate(lv_parentUnit, lv_progressTimeActual, lv_totalCostMinerals, lv_totalCostVespene);
        lv_tickCostMinerals = ((lv_progressPercentCurrent * lv_totalCostMinerals) - lv_tickTotalMinerals);
        lv_tickCostVespene = ((lv_progressPercentCurrent * lv_totalCostVespene) - lv_tickTotalVespene);
        if (((lv_tickTotalMinerals + lv_tickCostMinerals) >= lv_totalCostMinerals) && ((lv_tickTotalVespene + lv_tickCostVespene) >= lv_totalCostVespene)) {
            lv_tickCostMinerals = (lv_totalCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_totalCostVespene - lv_tickTotalVespene);
            lv_progressIsComplete = true;
        }
        lv_progressCostMinerals = Trunc(lv_tickCostMinerals);
        lv_progressCostVespene = Trunc(lv_tickCostVespene);
        if (((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, true);
            while ((UnitIsAlive(lv_parentUnit) == true) && (libSCPL_gf_UnitProtossProgress(lv_parentUnit) != -1.0) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
                Wait(lv_tickIncrement, c_timeGame);
            }
            if (((UnitIsAlive(lv_parentUnit) == false) || (libSCPL_gf_UnitProtossProgress(lv_parentUnit) == -1.0))) {
                break;
            }
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, false);
        }
        lv_tickTotalMinerals += lv_progressCostMinerals;
        lv_tickTotalVespene += lv_progressCostVespene;
        libSCPL_gf_PlayerResourcesSubtract(lv_playerIndex, lv_progressCostMinerals, lv_progressCostVespene);
        if ((lv_progressIsComplete == true)) {
            break;
        }
        Wait(lv_tickIncrement, c_timeGame);
    }
    libSCPL_gf_ResourceDisplaySpendUpdate(lv_parentUnit, 1.0, 0.0, 0.0);
    if ((libSCPL_gf_UnitProtossProgress(lv_parentUnit) == -1.0) && (UnitIsAlive(lv_parentUnit) == true)) {
        libSCPL_gf_PlayerResourcesAdd(lv_playerIndex, lv_tickTotalMinerals, lv_tickTotalVespene);
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressProtossUpgradeStart_Init () {
    libSCPL_gt_ProgressProtossUpgradeStart = TriggerCreate("libSCPL_gt_ProgressProtossUpgradeStart_Func");
    TriggerAddEventUnitResearchProgress(libSCPL_gt_ProgressProtossUpgradeStart, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Protoss Upgrade Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressProtossUpgradeCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_parentUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) == "Prot"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_parentUnit = EventUnit();
    libSCPL_gf_UnitProtossProgressSet(lv_parentUnit, -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressProtossUpgradeCancel_Init () {
    libSCPL_gt_ProgressProtossUpgradeCancel = TriggerCreate("libSCPL_gt_ProgressProtossUpgradeCancel_Func");
    TriggerAddEventUnitResearchProgress(libSCPL_gt_ProgressProtossUpgradeCancel, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Armament Start Refund
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressArmamentStartRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    string lv_progressUnitType;
    string lv_triggeringAbility;
    string lv_registerName;
    int lv_progressIndex;
    int lv_costMinerals;
    int lv_costVespene;
    fixed lv_costTime;

    // Variable Initialization
    lv_registerName = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressIndex = AbilityCommandGetCommand(OrderGetAbilityCommand(EventUnitOrder()));
    lv_triggeringAbility = AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder()));
    lv_registerName = CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].Unit", c_playerAny);
    lv_progressUnitType = (CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, ("InfoArray[" + IntToString(lv_progressIndex) + "].Unit[0]"), c_playerAny));
    lv_costMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_costVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    lv_costTime = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].Time", c_playerAny));
    if ((libSCPL_gf_RegisterExists(lv_registerName) == false)) {
        libSCPL_gf_RegisterBuildTime(lv_registerName, lv_costTime);
    }
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperAdd, lv_costMinerals);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperAdd, lv_costVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressArmamentStartRefund_Init () {
    libSCPL_gt_ProgressArmamentStartRefund = TriggerCreate("libSCPL_gt_ProgressArmamentStartRefund_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressArmamentStartRefund, null, AbilityCommand("ArmSiloWithNuke", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Armament Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressArmamentStart_Func (bool testConds, bool runActions) {
    fixed autoAC7F152F_ae;
    fixed autoAC7F152F_ai;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    unit lv_progressUnit;
    string lv_progressUnitType;
    fixed lv_totalCostMinerals;
    fixed lv_totalCostVespene;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_progressTime;
    int lv_progressIndex;
    fixed lv_expectedTime;
    fixed lv_tick;
    fixed lv_tickIncrement;
    fixed lv_tickCostBaseMinerals;
    fixed lv_tickCostBaseVespene;
    fixed lv_tickCostCarryOverMinerals;
    fixed lv_tickCostCarryOverVespene;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;
    bool lv_progressIsComplete;
    bool lv_progressIsCancelled;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Carrier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressUnit = EventUnitProgressUnit();
    lv_progressIndex = 1;
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_progressUnitType = libNtve_gf_TriggeringProgressUnitType();
    lv_totalCostMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_totalCostVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    lv_progressTime = libSCPL_gf_GetBuildTime((lv_progressUnitType));
    lv_progressTime = (Trunc((lv_progressTime / lv_tickIncrement)) * lv_tickIncrement);
    lv_tickCostBaseMinerals = (lv_totalCostMinerals / (lv_progressTime / lv_tickIncrement));
    lv_tickCostBaseVespene = (lv_totalCostVespene / (lv_progressTime / lv_tickIncrement));
    libSCPL_gf_ResourceDisplaySpendAdd(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    autoAC7F152F_ae = (lv_progressTime - lv_tickIncrement);
    autoAC7F152F_ai = lv_tickIncrement;
    lv_tick = 0.0;
    for ( ; ( (autoAC7F152F_ai >= 0 && lv_tick <= autoAC7F152F_ae) || (autoAC7F152F_ai <= 0 && lv_tick >= autoAC7F152F_ae) ) ; lv_tick += autoAC7F152F_ai ) {
        lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
        if ((lv_tick != lv_expectedTime) && (lv_tick != 0.0)) {
            lv_progressIsCancelled = true;
            break;
        }
        if ((UnitIsAlive(lv_parentUnit) == false)) {
            break;
        }
        lv_tickCostMinerals = (lv_tickCostBaseMinerals + lv_tickCostCarryOverMinerals);
        lv_tickCostVespene = (lv_tickCostBaseVespene + lv_tickCostCarryOverVespene);
        lv_tickCostCarryOverMinerals = ModF(lv_tickCostMinerals, 1.0);
        lv_tickCostCarryOverVespene = ModF(lv_tickCostVespene, 1.0);
        if (((lv_tickTotalMinerals + Round(lv_tickCostMinerals)) >= lv_totalCostMinerals) && ((lv_tickTotalVespene + Round(lv_tickCostVespene)) >= lv_totalCostVespene)) {
            lv_tickCostMinerals = (lv_totalCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_totalCostVespene - lv_tickTotalVespene);
            lv_progressIsComplete = true;
        }
        lv_progressCostMinerals = Trunc(lv_tickCostMinerals);
        lv_progressCostVespene = Trunc(lv_tickCostVespene);
        if (((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, true);
            while ((lv_tick == lv_expectedTime) && (UnitIsAlive(lv_parentUnit) == true) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
                Wait(lv_tickIncrement, c_timeGame);
            }
            if ((UnitIsAlive(lv_parentUnit) == false)) {
                break;
            }
            if ((lv_tick != lv_expectedTime) && (lv_tick != 0.0)) {
                lv_progressIsCancelled = true;
                break;
            }
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, false);
        }
        lv_tickTotalMinerals += lv_progressCostMinerals;
        lv_tickTotalVespene += lv_progressCostVespene;
        libSCPL_gf_PlayerResourcesSubtract(lv_playerIndex, lv_progressCostMinerals, lv_progressCostVespene);
        if ((lv_progressIsComplete == true)) {
            Wait((lv_tickIncrement - 0.0625), c_timeGame);
            lv_tick += (lv_tickIncrement - 0.0625);
            lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
            if ((lv_tick != lv_expectedTime)) {
                lv_progressIsCancelled = true;
            }
            continue;
        }
        if ((UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1) == 0.0625)) {
            lv_tick = 0.0;
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, true);
            Wait(0.0625, c_timeGame);
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, false);
            Wait((lv_tickIncrement - 0.0625), c_timeGame);
            continue;
        }
        Wait(lv_tickIncrement, c_timeGame);
    }
    libSCPL_gf_ResourceDisplaySpendSubtract(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    if ((lv_progressIsCancelled == true)) {
        libSCPL_gf_PlayerResourcesAdd(lv_playerIndex, lv_tickTotalMinerals, lv_tickTotalVespene);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressArmamentStart_Init () {
    libSCPL_gt_ProgressArmamentStart = TriggerCreate("libSCPL_gt_ProgressArmamentStart_Func");
    TriggerAddEventUnitArmMagazineProgress(libSCPL_gt_ProgressArmamentStart, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Building Start Refund
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressBuildingStartRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    string lv_triggeringAbility;
    string lv_registerName;
    string lv_progressUnitType;
    int lv_progressIndex;
    int lv_costMinerals;
    int lv_costVespene;
    fixed lv_costTime;

    // Variable Initialization
    lv_registerName = "";

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressIndex = AbilityCommandGetCommand(OrderGetAbilityCommand(EventUnitOrder()));
    lv_triggeringAbility = AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder()));
    lv_registerName = CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].Unit", c_playerAny);
    lv_progressUnitType = (CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, ("InfoArray[" + IntToString(lv_progressIndex) + "].Unit[0]"), c_playerAny));
    lv_costMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_costVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    lv_costTime = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].Time", c_playerAny));
    if ((libSCPL_gf_RegisterExists(lv_registerName) == false)) {
        libSCPL_gf_RegisterBuildTime(lv_registerName, lv_costTime);
    }
    if ((UnitGetType(OrderGetTargetUnit(EventUnitOrder())) == (lv_registerName))) {
        return true;
    }
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperAdd, lv_costMinerals);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperAdd, lv_costVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressBuildingStartRefund_Init () {
    libSCPL_gt_ProgressBuildingStartRefund = TriggerCreate("libSCPL_gt_ProgressBuildingStartRefund_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 8));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 10));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 9));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 13));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 11));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("TerranBuild", 15));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("BarracksAddOns", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("BarracksAddOns", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("FactoryAddOns", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("FactoryAddOns", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("StarportAddOns", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("StarportAddOns", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 7));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 14));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 11));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 12));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 13));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 9));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 10));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ProtossBuild", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 10));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 8));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 9));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 13));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 14));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 15));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressBuildingStartRefund, null, AbilityCommand("ZergBuild", 7));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Building Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressBuildingStart_Func (bool testConds, bool runActions) {
    fixed autoBCBFEB32_ae;
    fixed autoBCBFEB32_ai;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    unit lv_progressUnit;
    string lv_progressUnitType;
    fixed lv_totalCostMinerals;
    fixed lv_totalCostVespene;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_progressTime;
    int lv_progressIndex;
    fixed lv_progressPercent;
    fixed lv_progressPercentExpected;
    fixed lv_progressPercentParent;
    fixed lv_expectedTime;
    fixed lv_tick;
    fixed lv_tickIncrement;
    fixed lv_tickCostBaseMinerals;
    fixed lv_tickCostBaseVespene;
    fixed lv_tickCostCarryOverMinerals;
    fixed lv_tickCostCarryOverVespene;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;
    bool lv_progressIsComplete;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() != "Archon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SCV"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WarpGate"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NydusNetwork"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressUnit = EventUnitProgressUnit();
    lv_progressIndex = 1;
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_progressUnitType = libNtve_gf_TriggeringProgressUnitType();
    lv_totalCostMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_totalCostVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    if ((lv_totalCostMinerals == 0.0) && (lv_totalCostVespene == 0.0)) {
        return true;
    }
    lv_progressTime = libSCPL_gf_GetBuildTime((lv_progressUnitType));
    lv_progressTime = (Trunc((lv_progressTime / lv_tickIncrement)) * lv_tickIncrement);
    lv_tickCostBaseMinerals = (lv_totalCostMinerals / (lv_progressTime / lv_tickIncrement));
    lv_tickCostBaseVespene = (lv_totalCostVespene / (lv_progressTime / lv_tickIncrement));
    libSCPL_gf_ResourceDisplaySpendAdd(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    autoBCBFEB32_ae = (lv_progressTime - lv_tickIncrement);
    autoBCBFEB32_ai = lv_tickIncrement;
    lv_tick = 0.0;
    for ( ; ( (autoBCBFEB32_ai >= 0 && lv_tick <= autoBCBFEB32_ae) || (autoBCBFEB32_ai <= 0 && lv_tick >= autoBCBFEB32_ae) ) ; lv_tick += autoBCBFEB32_ai ) {
        lv_progressPercent = UnitGetProgressComplete(lv_progressUnit, lv_progressIndex);
        lv_progressPercent = libSCPL_gf_NormalizeBuildingProgress(lv_progressPercent);
        lv_progressPercentExpected = (100.0 * (lv_tick / lv_progressTime));
        lv_progressPercentExpected = libSCPL_gf_NormalizeBuildingProgress(lv_progressPercentExpected);
        if ((UnitIsAlive(lv_progressUnit) == false)) {
            break;
        }
        lv_tickCostMinerals = (lv_tickCostBaseMinerals + lv_tickCostCarryOverMinerals);
        lv_tickCostVespene = (lv_tickCostBaseVespene + lv_tickCostCarryOverVespene);
        lv_tickCostCarryOverMinerals = ModF(lv_tickCostMinerals, 1.0);
        lv_tickCostCarryOverVespene = ModF(lv_tickCostVespene, 1.0);
        if (((lv_tickTotalMinerals + Round(lv_tickCostMinerals)) >= lv_totalCostMinerals) && ((lv_tickTotalVespene + Round(lv_tickCostVespene)) >= lv_totalCostVespene)) {
            lv_tickCostMinerals = (lv_totalCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_totalCostVespene - lv_tickTotalVespene);
            lv_progressIsComplete = true;
        }
        lv_progressCostMinerals = Trunc(lv_tickCostMinerals);
        lv_progressCostVespene = Trunc(lv_tickCostVespene);
        if (((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
            ActorSendTo(libNtve_gf_MainActorofUnit(lv_progressUnit), "_ProtossBuildModel", "AnimSetTimeScaleGlobal 1000.000000 Stand");
            ActorSendTo(libNtve_gf_MainActorofUnit(lv_progressUnit), "_ZergBuildModel", "AnimSetTimeScaleGlobal 1000.000000 Stand");
            libSCPL_gf_UnitStatusPauseProgressUnit(lv_progressUnit, lv_progressUnit, lv_progressIndex, true);
            while ((UnitIsAlive(lv_progressUnit) == true) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < Trunc(lv_tickCostMinerals)) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < Trunc(lv_tickCostVespene)))) {
                Wait(lv_tickIncrement, c_timeGame);
            }
            if ((UnitIsAlive(lv_progressUnit) == false)) {
                break;
            }
            libSCPL_gf_UnitStatusPauseProgressUnit(lv_progressUnit, lv_progressUnit, lv_progressIndex, false);
            ActorSendTo(libNtve_gf_MainActorofUnit(lv_progressUnit), "_ProtossBuildModel", "AnimSetTimeScaleGlobal 1.000000 Stand");
            ActorSendTo(libNtve_gf_MainActorofUnit(lv_progressUnit), "_ZergBuildModel", "AnimSetTimeScaleGlobal 1.000000 Stand");
        }
        lv_tickTotalMinerals += lv_progressCostMinerals;
        lv_tickTotalVespene += lv_progressCostVespene;
        libSCPL_gf_PlayerResourcesSubtract(lv_playerIndex, lv_progressCostMinerals, lv_progressCostVespene);
        libSCPL_gf_UnitProgressRefundSet(lv_progressUnit, 3, lv_tickTotalMinerals);
        libSCPL_gf_UnitProgressRefundSet(lv_progressUnit, 4, lv_tickTotalVespene);
        Wait(lv_tickIncrement, c_timeGame);
    }
    libSCPL_gf_ResourceDisplaySpendSubtract(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressBuildingStart_Init () {
    libSCPL_gt_ProgressBuildingStart = TriggerCreate("libSCPL_gt_ProgressBuildingStart_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_ProgressBuildingStart, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Building SCV Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressBuildingSCVStart_Func (bool testConds, bool runActions) {
    fixed auto409584AE_ae;
    fixed auto409584AE_ai;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    unit lv_progressUnit;
    string lv_progressUnitType;
    fixed lv_totalCostMinerals;
    fixed lv_totalCostVespene;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_progressTime;
    int lv_progressIndex;
    fixed lv_progressPercent;
    fixed lv_progressPercentParent;
    fixed lv_expectedTime;
    fixed lv_tick;
    fixed lv_tickIncrement;
    fixed lv_tickCostBaseMinerals;
    fixed lv_tickCostBaseVespene;
    fixed lv_tickCostCarryOverMinerals;
    fixed lv_tickCostCarryOverVespene;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;
    bool lv_progressIsComplete;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressUnit = EventUnitProgressUnit();
    lv_progressIndex = 1;
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_progressUnitType = libNtve_gf_TriggeringProgressUnitType();
    lv_totalCostMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_totalCostVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    lv_progressTime = libSCPL_gf_GetBuildTime((lv_progressUnitType));
    lv_progressTime = (Trunc((lv_progressTime / lv_tickIncrement)) * lv_tickIncrement);
    lv_tickCostBaseMinerals = (lv_totalCostMinerals / (lv_progressTime / lv_tickIncrement));
    lv_tickCostBaseVespene = (lv_totalCostVespene / (lv_progressTime / lv_tickIncrement));
    libSCPL_gf_ResourceDisplaySpendAdd(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    auto409584AE_ae = (lv_progressTime - lv_tickIncrement);
    auto409584AE_ai = lv_tickIncrement;
    lv_tick = 0.0;
    for ( ; ( (auto409584AE_ai >= 0 && lv_tick <= auto409584AE_ae) || (auto409584AE_ai <= 0 && lv_tick >= auto409584AE_ae) ) ; lv_tick += auto409584AE_ai ) {
        lv_progressPercent = UnitGetProgressComplete(lv_progressUnit, lv_progressIndex);
        lv_progressPercentParent = UnitGetProgressComplete(lv_parentUnit, lv_progressIndex);
        if ((lv_progressPercent != lv_progressPercentParent)) {
            libSCPL_gf_BuildingPauseStateSet(lv_progressUnit, true);
            break;
        }
        if ((UnitIsAlive(lv_progressUnit) == false)) {
            break;
        }
        lv_tickCostMinerals = (lv_tickCostBaseMinerals + lv_tickCostCarryOverMinerals);
        lv_tickCostVespene = (lv_tickCostBaseVespene + lv_tickCostCarryOverVespene);
        lv_tickCostCarryOverMinerals = ModF(lv_tickCostMinerals, 1.0);
        lv_tickCostCarryOverVespene = ModF(lv_tickCostVespene, 1.0);
        if (((lv_tickTotalMinerals + Round(lv_tickCostMinerals)) >= lv_totalCostMinerals) && ((lv_tickTotalVespene + Round(lv_tickCostVespene)) >= lv_totalCostVespene)) {
            lv_tickCostMinerals = (lv_totalCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_totalCostVespene - lv_tickTotalVespene);
            lv_progressIsComplete = true;
        }
        lv_progressCostMinerals = Trunc(lv_tickCostMinerals);
        lv_progressCostVespene = Trunc(lv_tickCostVespene);
        if (((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
            libSCPL_gf_UnitStatusPauseProgressBar(lv_progressUnit, lv_parentUnit, lv_progressIndex, true);
            while ((UnitIsAlive(lv_progressUnit) == true) && (lv_progressPercent == lv_progressPercentParent) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < Trunc(lv_tickCostMinerals)) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < Trunc(lv_tickCostVespene)))) {
                lv_progressPercent = UnitGetProgressComplete(lv_progressUnit, lv_progressIndex);
                lv_progressPercentParent = UnitGetProgressComplete(lv_parentUnit, lv_progressIndex);
                Wait(lv_tickIncrement, c_timeGame);
            }
            libSCPL_gf_UnitStatusPauseProgressBar(lv_progressUnit, lv_parentUnit, lv_progressIndex, false);
            libSCPL_gf_UnitStatusPauseProgressBar(lv_progressUnit, lv_parentUnit, lv_progressIndex, true);
            libSCPL_gf_BuildingPauseStateSet(lv_progressUnit, true);
            break;
        }
        if ((UnitIsAlive(lv_progressUnit) == false)) {
            break;
        }
        if ((lv_progressPercent != lv_progressPercentParent)) {
            libSCPL_gf_BuildingPauseStateSet(lv_progressUnit, true);
            break;
        }
        lv_tickTotalMinerals += lv_progressCostMinerals;
        lv_tickTotalVespene += lv_progressCostVespene;
        libSCPL_gf_PlayerResourcesSubtract(lv_playerIndex, lv_progressCostMinerals, lv_progressCostVespene);
        libSCPL_gf_UnitProgressRefundSet(lv_progressUnit, 3, lv_tickTotalMinerals);
        libSCPL_gf_UnitProgressRefundSet(lv_progressUnit, 4, lv_tickTotalVespene);
        libSCPL_gf_UnitProgressCarryOverSet(lv_progressUnit, 5, lv_tickCostCarryOverMinerals);
        libSCPL_gf_UnitProgressCarryOverSet(lv_progressUnit, 6, lv_tickCostCarryOverVespene);
        Wait(lv_tickIncrement, c_timeGame);
    }
    libSCPL_gf_ResourceDisplaySpendSubtract(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressBuildingSCVStart_Init () {
    libSCPL_gt_ProgressBuildingSCVStart = TriggerCreate("libSCPL_gt_ProgressBuildingSCVStart_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_ProgressBuildingSCVStart, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Building SCV Resume
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressBuildingSCVResume_Func (bool testConds, bool runActions) {
    fixed auto9D6C6B4C_ae;
    fixed auto9D6C6B4C_ai;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    unit lv_progressUnit;
    string lv_progressUnitType;
    fixed lv_totalCostMinerals;
    fixed lv_totalCostVespene;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_progressTime;
    int lv_progressIndex;
    fixed lv_progressPercent;
    fixed lv_progressPercentParent;
    fixed lv_expectedTime;
    fixed lv_tick;
    fixed lv_tickStart;
    fixed lv_tickIncrement;
    fixed lv_tickCostBaseMinerals;
    fixed lv_tickCostBaseVespene;
    fixed lv_tickCostCarryOverMinerals;
    fixed lv_tickCostCarryOverVespene;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;
    bool lv_progressIsComplete;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }

        if (!((libSCPL_gf_BuildingPauseState(EventUnitProgressUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_BuildingPauseStateSet(EventUnitProgressUnit(), false);
    Wait(0.0, c_timeGame);
    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressUnit = EventUnitProgressUnit();
    lv_progressIndex = 1;
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_progressUnitType = libNtve_gf_TriggeringProgressUnitType();
    lv_totalCostMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_totalCostVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    lv_progressTime = libSCPL_gf_GetBuildTime((lv_progressUnitType));
    lv_tickCostBaseMinerals = (lv_totalCostMinerals / (lv_progressTime / lv_tickIncrement));
    lv_tickCostBaseVespene = (lv_totalCostVespene / (lv_progressTime / lv_tickIncrement));
    libSCPL_gf_ResourceDisplaySpendAdd(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    lv_progressPercent = UnitGetProgressComplete(lv_progressUnit, lv_progressIndex);
    lv_progressPercentParent = UnitGetProgressComplete(lv_parentUnit, lv_progressIndex);
    lv_tickStart = ((lv_progressPercent / 100.0) * lv_progressTime);
    lv_tickStart = (lv_tickStart - ModF(lv_tickStart, lv_tickIncrement));
    lv_tickTotalMinerals = libSCPL_gf_UnitProgressRefund(lv_progressUnit, 3);
    lv_tickTotalVespene = libSCPL_gf_UnitProgressRefund(lv_progressUnit, 4);
    lv_tickCostCarryOverMinerals = libSCPL_gf_UnitProgressCarryOver(lv_progressUnit, 5);
    lv_tickCostCarryOverVespene = libSCPL_gf_UnitProgressCarryOver(lv_progressUnit, 6);
    auto9D6C6B4C_ae = (lv_progressTime - lv_tickIncrement);
    auto9D6C6B4C_ai = lv_tickIncrement;
    lv_tick = lv_tickStart;
    for ( ; ( (auto9D6C6B4C_ai >= 0 && lv_tick <= auto9D6C6B4C_ae) || (auto9D6C6B4C_ai <= 0 && lv_tick >= auto9D6C6B4C_ae) ) ; lv_tick += auto9D6C6B4C_ai ) {
        lv_progressPercent = UnitGetProgressComplete(lv_progressUnit, lv_progressIndex);
        lv_progressPercentParent = UnitGetProgressComplete(lv_parentUnit, lv_progressIndex);
        if ((lv_progressPercent != lv_progressPercentParent)) {
            libSCPL_gf_BuildingPauseStateSet(lv_progressUnit, true);
            break;
        }
        if ((UnitIsAlive(lv_progressUnit) == false)) {
            break;
        }
        lv_tickCostMinerals = (lv_tickCostBaseMinerals + lv_tickCostCarryOverMinerals);
        lv_tickCostVespene = (lv_tickCostBaseVespene + lv_tickCostCarryOverVespene);
        lv_tickCostCarryOverMinerals = ModF(lv_tickCostMinerals, 1.0);
        lv_tickCostCarryOverVespene = ModF(lv_tickCostVespene, 1.0);
        if (((lv_tickTotalMinerals + Round(lv_tickCostMinerals)) >= lv_totalCostMinerals) && ((lv_tickTotalVespene + Round(lv_tickCostVespene)) >= lv_totalCostVespene)) {
            lv_tickCostMinerals = (lv_totalCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_totalCostVespene - lv_tickTotalVespene);
            lv_progressIsComplete = true;
        }
        lv_progressCostMinerals = Trunc(lv_tickCostMinerals);
        lv_progressCostVespene = Trunc(lv_tickCostVespene);
        if (((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
            libSCPL_gf_UnitStatusPauseProgressBar(lv_progressUnit, lv_parentUnit, lv_progressIndex, true);
            while ((UnitIsAlive(lv_progressUnit) == true) && (lv_progressPercent == lv_progressPercentParent) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < Trunc(lv_tickCostMinerals)) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < Trunc(lv_tickCostVespene)))) {
                lv_progressPercent = UnitGetProgressComplete(lv_progressUnit, lv_progressIndex);
                lv_progressPercentParent = UnitGetProgressComplete(lv_parentUnit, lv_progressIndex);
                Wait(lv_tickIncrement, c_timeGame);
            }
            libSCPL_gf_UnitStatusPauseProgressBar(lv_progressUnit, lv_parentUnit, lv_progressIndex, false);
            libSCPL_gf_UnitStatusPauseProgressBar(lv_progressUnit, lv_parentUnit, lv_progressIndex, true);
            libSCPL_gf_BuildingPauseStateSet(lv_progressUnit, true);
            break;
        }
        if ((UnitIsAlive(lv_progressUnit) == false)) {
            break;
        }
        if ((lv_progressPercent != lv_progressPercentParent)) {
            libSCPL_gf_BuildingPauseStateSet(lv_progressUnit, true);
            break;
        }
        lv_tickTotalMinerals += lv_progressCostMinerals;
        lv_tickTotalVespene += lv_progressCostVespene;
        libSCPL_gf_PlayerResourcesSubtract(lv_playerIndex, lv_progressCostMinerals, lv_progressCostVespene);
        libSCPL_gf_UnitProgressRefundSet(lv_progressUnit, 3, lv_tickTotalMinerals);
        libSCPL_gf_UnitProgressRefundSet(lv_progressUnit, 4, lv_tickTotalVespene);
        libSCPL_gf_UnitProgressCarryOverSet(lv_progressUnit, 5, lv_tickCostCarryOverMinerals);
        libSCPL_gf_UnitProgressCarryOverSet(lv_progressUnit, 6, lv_tickCostCarryOverVespene);
        libSCPL_gf_UnitStatusPauseProgressBar(lv_progressUnit, lv_parentUnit, lv_progressIndex, false);
        Wait(lv_tickIncrement, c_timeGame);
    }
    libSCPL_gf_ResourceDisplaySpendSubtract(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressBuildingSCVResume_Init () {
    libSCPL_gt_ProgressBuildingSCVResume = TriggerCreate("libSCPL_gt_ProgressBuildingSCVResume_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_ProgressBuildingSCVResume, null, c_unitProgressStageResume);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Building SCV Refund Undo
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressBuildingSCVRefundUndo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    string lv_triggeringAbility;
    string lv_registerName;
    string lv_progressUnitType;
    int lv_progressIndex;
    int lv_costMinerals;
    int lv_costVespene;
    fixed lv_costTime;

    // Variable Initialization
    lv_registerName = "";

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressIndex = AbilityCommandGetCommand(EventUnitAbility());
    lv_triggeringAbility = AbilityCommandGetAbility(EventUnitAbility());
    lv_registerName = CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, "InfoArray[" + IntToString(lv_progressIndex) + "].Unit", c_playerAny);
    lv_progressUnitType = (CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, ("InfoArray[" + IntToString(lv_progressIndex) + "].Unit[0]"), c_playerAny));
    lv_costMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_costVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    if ((UnitGetType(EventUnitTargetUnit()) == (lv_registerName))) {
        return true;
    }
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperSubtract, lv_costMinerals);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperSubtract, lv_costVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressBuildingSCVRefundUndo_Init () {
    libSCPL_gt_ProgressBuildingSCVRefundUndo = TriggerCreate("libSCPL_gt_ProgressBuildingSCVRefundUndo_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 1), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 11), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 8), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 2), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 5), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 9), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 15), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 10), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 4), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 6), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 3), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ProgressBuildingSCVRefundUndo, null, AbilityCommand("TerranBuild", 13), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Building Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressBuildingCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_progressUnit;
    fixed lv_resourceRefundMinerals;
    fixed lv_resourceRefundVespene;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_progressUnit = EventUnitProgressUnit();
    lv_playerIndex = UnitGetOwner(lv_progressUnit);
    lv_resourceRefundMinerals = libSCPL_gf_UnitProgressRefund(lv_progressUnit, 3);
    lv_resourceRefundVespene = libSCPL_gf_UnitProgressRefund(lv_progressUnit, 4);
    lv_resourceRefundMinerals *= 0.75;
    lv_resourceRefundVespene *= 0.75;
    libSCPL_gf_PlayerResourcesAdd(lv_playerIndex, Trunc(lv_resourceRefundMinerals), Trunc(lv_resourceRefundVespene));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressBuildingCancel_Init () {
    libSCPL_gt_ProgressBuildingCancel = TriggerCreate("libSCPL_gt_ProgressBuildingCancel_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_ProgressBuildingCancel, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Unit Start Refund
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressUnitStartRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    string lv_progressUnitType;
    int lv_progressIndex;
    int lv_costMinerals;
    int lv_costVespene;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressIndex = AbilityCommandGetCommand(OrderGetAbilityCommand(EventUnitOrder()));
    lv_progressUnitType = (CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder())), ("InfoArray[" + IntToString(lv_progressIndex) + "].Unit[0]"), c_playerAny));
    lv_costMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_costVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    if ((lv_progressUnitType == "Zergling")) {
        lv_costMinerals = (lv_costMinerals * 2);
    }
    else if ((lv_progressUnitType == "Baneling")) {
        lv_costMinerals = (lv_costMinerals - UnitTypeGetCost("Zergling", c_unitCostMinerals));
    }
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperAdd, lv_costMinerals);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperAdd, lv_costVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressUnitStartRefund_Init () {
    libSCPL_gt_ProgressUnitStartRefund = TriggerCreate("libSCPL_gt_ProgressUnitStartRefund_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("BarracksTrain", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("BarracksTrain", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("BarracksTrain", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("BarracksTrain", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("FactoryTrain", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("FactoryTrain", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("FactoryTrain", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("StarportTrain", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("StarportTrain", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("StarportTrain", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("StarportTrain", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("StarportTrain", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("FactoryTrain", 24));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("FactoryTrain", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("FactoryTrain", 7));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("StarportTrain", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("NexusTrainMothership", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("GatewayTrain", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("GatewayTrain", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("GatewayTrain", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("GatewayTrain", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("GatewayTrain", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("RoboticsFacilityTrain", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("RoboticsFacilityTrain", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("RoboticsFacilityTrain", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("RoboticsFacilityTrain", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("StargateTrain", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("StargateTrain", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("StargateTrain", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("NexusTrainMothershipUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("NexusTrainMothershipCore", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("StargateTrain", 9));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("StargateTrain", 8));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("GatewayTrain", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("WarpGateTrain", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("RoboticsFacilityTrain", 18));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("TrainQueen", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrain", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrain", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrain", 9));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrain", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrain", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrain", 10));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrain", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrain", 11));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("MorphZerglingToBaneling", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrain", 14));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrain", 12));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("MorphToRavager", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("MorphToLurker", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrainDummyRedirect", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrainDummyRedirect", 12));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrainDummyRedirect", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrainDummyRedirect", 14));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrainDummyRedirect", 9));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrainDummyRedirect", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrainDummyRedirect", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrainDummyRedirect", 10));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrainDummyRedirect", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefund, null, AbilityCommand("LarvaTrainDummyRedirect", 11));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Unit Interceptor Adjustment
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressUnitInterceptorAdjustment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_progressUnitType;
    int lv_costMinerals;
    int lv_costVespene;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "Interceptor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_progressUnitType = libNtve_gf_TriggeringProgressUnitType();
    lv_costMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_costVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropTerrazine, c_playerPropOperSubtract, lv_costMinerals);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropCustom, c_playerPropOperSubtract, lv_costVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressUnitInterceptorAdjustment_Init () {
    libSCPL_gt_ProgressUnitInterceptorAdjustment = TriggerCreate("libSCPL_gt_ProgressUnitInterceptorAdjustment_Func");
    TriggerAddEventUnitArmMagazineProgress(libSCPL_gt_ProgressUnitInterceptorAdjustment, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Unit Start Refund Terran Dummy
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressUnitStartRefundTerranDummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    string lv_progressUnitType;
    int lv_progressIndex;
    int lv_costMinerals;
    int lv_costVespene;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressIndex = AbilityCommandGetCommand(OrderGetAbilityCommand(EventUnitOrder()));
    lv_progressUnitType = (CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder())), ("InfoArray[" + IntToString(lv_progressIndex) + "].Unit[0]"), c_playerAny));
    lv_costMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_costVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperAdd, lv_costMinerals);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperAdd, lv_costVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressUnitStartRefundTerranDummy_Init () {
    libSCPL_gt_ProgressUnitStartRefundTerranDummy = TriggerCreate("libSCPL_gt_ProgressUnitStartRefundTerranDummy_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("BarracksTrainUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("BarracksTrainUCB", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("BarracksTrainUCB", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("BarracksTrainUCB", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("FactoryTrainUCB", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("FactoryTrainUCB", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("FactoryTrainUCB", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("StarportTrainUCB", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("StarportTrainUCB", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("StarportTrainUCB", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("StarportTrainUCB", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("StarportTrainUCB", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("FactoryTrainUCB", 24));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("FactoryTrainUCB", 6));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("FactoryTrainUCB", 7));
    TriggerAddEventUnitOrder(libSCPL_gt_ProgressUnitStartRefundTerranDummy, null, AbilityCommand("StarportTrainUCB", 6));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Unit Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressUnitStart_Func (bool testConds, bool runActions) {
    fixed auto2BFF4CD1_ae;
    fixed auto2BFF4CD1_ai;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    string lv_progressUnitType;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_progressTime;
    int lv_progressIndex;
    fixed lv_progressPercent;
    fixed lv_tick;
    fixed lv_tickIncrement;
    fixed lv_tickCostBaseMinerals;
    fixed lv_tickCostBaseVespene;
    fixed lv_tickCostCarryOverMinerals;
    fixed lv_tickCostCarryOverVespene;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;
    fixed lv_expectedTime;
    bool lv_progressIsCancelled;
    bool lv_progressIsPaused;
    bool lv_slotTimeAreEqual;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((PlayerRace(EventPlayer()) != "Prot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_progressUnitType = libNtve_gf_TriggeringProgressUnitType();
    lv_progressCostMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_progressCostVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    if ((lv_progressCostMinerals == 0.0) && (lv_progressCostVespene == 0.0)) {
        return true;
    }
    if ((lv_progressUnitType == "Baneling")) {
        lv_progressCostMinerals = (lv_progressCostMinerals - UnitTypeGetCost("Zergling", c_unitCostMinerals));
    }
    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressIndex = libSCPL_gf_UsedTrainingSlotCount(lv_parentUnit);
    lv_progressTime = Round(UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeTotal, lv_progressIndex));
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_tickCostBaseMinerals = (lv_progressCostMinerals / (lv_progressTime / lv_tickIncrement));
    lv_tickCostBaseVespene = (lv_progressCostVespene / (lv_progressTime / lv_tickIncrement));
    if ((lv_progressIndex == 1)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
    }
    else if ((lv_progressIndex == 2)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 1.0);
    }
    libSCPL_gf_ResourceDisplaySpendAdd(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    Wait(0.0, c_timeGame);
    auto2BFF4CD1_ae = (lv_progressTime - lv_tickIncrement);
    auto2BFF4CD1_ai = lv_tickIncrement;
    lv_tick = 0.0625;
    for ( ; ( (auto2BFF4CD1_ai >= 0 && lv_tick <= auto2BFF4CD1_ae) || (auto2BFF4CD1_ai <= 0 && lv_tick >= auto2BFF4CD1_ae) ) ; lv_tick += auto2BFF4CD1_ai ) {
        lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
        if ((lv_progressIndex == 1) && (lv_tick != lv_expectedTime)) {
            lv_progressIsCancelled = true;
            break;
        }
        if ((lv_progressIndex == 2) && (lv_tick != lv_expectedTime)) {
            lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
            if ((lv_tick == lv_expectedTime)) {
                lv_progressIndex = 1;
                libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
                libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
            }
            else {
                lv_progressIsCancelled = true;
                break;
            }
        }
        if ((lv_progressIndex == 1) && (libSCPL_gf_UnitProgressState(lv_parentUnit, 1) == 0.0)) {
            libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
        }
        if ((lv_progressIndex == 2) && (libSCPL_gf_UnitProgressState(lv_parentUnit, 2) == 0.0)) {
            libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 1.0);
            libSCPL_gf_DebugPanelUpdateSpendOverTime();
        }
        if ((UnitIsAlive(lv_parentUnit) == false)) {
            lv_progressIsCancelled = false;
            break;
        }
        lv_tickCostMinerals = (lv_tickCostBaseMinerals + lv_tickCostCarryOverMinerals);
        lv_tickCostVespene = (lv_tickCostBaseVespene + lv_tickCostCarryOverVespene);
        lv_tickCostCarryOverMinerals = ModF(lv_tickCostMinerals, 1.0);
        lv_tickCostCarryOverVespene = ModF(lv_tickCostVespene, 1.0);
        if (((lv_tick + lv_tickIncrement) >= (lv_progressTime - lv_tickIncrement))) {
            lv_tickCostMinerals = (lv_progressCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_progressCostVespene - lv_tickTotalVespene);
        }
        lv_tickTotalMinerals = (lv_tickTotalMinerals + Trunc(lv_tickCostMinerals));
        lv_tickTotalVespene = (lv_tickTotalVespene + Trunc(lv_tickCostVespene));
        if ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) >= Trunc(lv_tickCostMinerals)) && (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) >= Trunc(lv_tickCostVespene))) {
            libSCPL_gf_PlayerResourcesSubtract(lv_playerIndex, Trunc(lv_tickCostMinerals), Trunc(lv_tickCostVespene));
        }
        else {
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, true);
            lv_progressIsPaused = true;
            while ((lv_progressIsCancelled == false) && (UnitIsAlive(lv_parentUnit) == true) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < Trunc(lv_tickCostMinerals)) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < Trunc(lv_tickCostVespene)))) {
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
                if ((UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1) == UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 2)) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_parentUnit, 1, 1) == libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_parentUnit, 2, 1))) {
                    lv_slotTimeAreEqual = true;
                }
                if ((lv_progressIndex == 1) && (lv_tick != lv_expectedTime)) {
                    lv_progressIsCancelled = true;
                }
                if ((lv_progressIndex == 2) && (lv_tick != lv_expectedTime)) {
                    lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
                    if ((lv_tick == lv_expectedTime) && (lv_slotTimeAreEqual == false)) {
                        lv_progressIndex = 1;
                        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
                        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
                    }
                    else {
                        lv_progressIsCancelled = true;
                    }
                }
                if ((lv_progressIsCancelled == true)) {
                    break;
                }
                Wait(libSCPL_gf_TickIncrementActual(lv_parentUnit), c_timeGame);
            }
            if ((UnitIsAlive(lv_parentUnit) == true)) {
                libSCPL_gf_PlayerResourcesSubtract(lv_playerIndex, Trunc(lv_tickCostMinerals), Trunc(lv_tickCostVespene));
                if ((lv_progressIsCancelled == true)) {
                    break;
                }
                if ((lv_progressIndex == 2) && (lv_tick != UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 2)) && (lv_tick == UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1))) {
                    lv_progressIndex = 1;
                    libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
                    libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
                }

            }
        }
        if ((lv_progressIsPaused == true)) {
            lv_progressIsPaused = false;
            lv_slotTimeAreEqual = false;
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, false);
        }
        if ((lv_tick == 0.0625)) {
            lv_tick = 0.0;
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, true);
            Wait(0.0625, c_timeGame);
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, false);
            Wait((libSCPL_gf_TickIncrementActual(lv_parentUnit) - 0.0625), c_timeGame);
            continue;
        }
        if (((lv_tick + lv_tickIncrement) >= (lv_progressTime - lv_tickIncrement))) {
            Wait((libSCPL_gf_TickIncrementActual(lv_parentUnit) - 0.0625), c_timeGame);
            lv_tick += (lv_tickIncrement - 0.0625);
            lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
            if ((lv_progressIndex == 1) && (lv_tick != lv_expectedTime)) {
                lv_progressIsCancelled = true;
            }
            if ((lv_progressIndex == 2) && (lv_tick != lv_expectedTime)) {
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
                if ((lv_tick != lv_expectedTime)) {
                    lv_progressIsCancelled = true;
                }

            }
            continue;
        }
        Wait(libSCPL_gf_TickIncrementActual(lv_parentUnit), c_timeGame);
    }
    libSCPL_gf_ResourceDisplaySpendSubtract(lv_playerIndex, lv_tickCostBaseMinerals, lv_tickCostBaseVespene);
    if ((lv_progressUnitType == "Baneling")) {
        lv_tickTotalMinerals *= 0.75;
        lv_tickTotalVespene *= 0.75;
    }
    if ((lv_progressIsCancelled == true)) {
        libSCPL_gf_PlayerResourcesAdd(lv_playerIndex, Trunc(lv_tickTotalMinerals), Trunc(lv_tickTotalVespene));
    }
    if ((lv_progressIndex == 1)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 0.0);
    }
    else if ((lv_progressIndex == 2)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressUnitStart_Init () {
    libSCPL_gt_ProgressUnitStart = TriggerCreate("libSCPL_gt_ProgressUnitStart_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_ProgressUnitStart, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Protoss Unit Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressProtossUnitStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    int lv_progressIndex;
    bool lv_progressIsComplete;
    string lv_progressType;
    fixed lv_progressTime;
    fixed lv_progressTimeActual;
    fixed lv_progressTimeElapsed;
    fixed lv_progressTimeRemaining;
    fixed lv_progressPercentCurrent;
    fixed lv_progressPercentPrevious;
    fixed lv_progressPercentIncrement;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_tickIncrement;
    fixed lv_totalCostMinerals;
    fixed lv_totalCostVespene;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((PlayerRace(EventPlayer()) == "Prot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressIndex = 1;
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_progressType = libNtve_gf_TriggeringProgressUnitType();
    lv_totalCostMinerals = UnitTypeGetCost(lv_progressType, c_unitCostMinerals);
    lv_totalCostVespene = UnitTypeGetCost(lv_progressType, c_unitCostVespene);
    lv_progressTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeTotal, lv_progressIndex);
    if ((lv_totalCostMinerals == 0.0) && (lv_totalCostVespene == 0.0)) {
        return true;
    }
    lv_progressTimeActual = (lv_progressTime - 1.0);
    libSCPL_gf_UnitProtossProgressSet(lv_parentUnit, 0.0);
    while ((UnitIsAlive(lv_parentUnit) == true) && (lv_progressIsComplete == false) && (libSCPL_gf_UnitProtossProgress(lv_parentUnit) != -1.0)) {
        lv_progressTimeElapsed = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
        lv_progressTimeRemaining = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeRemaining, lv_progressIndex);
        lv_progressPercentCurrent = (lv_progressTimeElapsed / lv_progressTimeActual);
        lv_progressPercentPrevious = libSCPL_gf_UnitProtossProgress(lv_parentUnit);
        lv_progressPercentIncrement = (lv_progressPercentCurrent - lv_progressPercentPrevious);
        libSCPL_gf_UnitProtossProgressSet(lv_parentUnit, lv_progressPercentCurrent);
        libSCPL_gf_ResourceDisplaySpendUpdate(lv_parentUnit, lv_progressTimeActual, lv_totalCostMinerals, lv_totalCostVespene);
        lv_tickCostMinerals = ((lv_progressPercentCurrent * lv_totalCostMinerals) - lv_tickTotalMinerals);
        lv_tickCostVespene = ((lv_progressPercentCurrent * lv_totalCostVespene) - lv_tickTotalVespene);
        if (((lv_tickTotalMinerals + lv_tickCostMinerals) >= lv_totalCostMinerals) && ((lv_tickTotalVespene + lv_tickCostVespene) >= lv_totalCostVespene)) {
            lv_tickCostMinerals = (lv_totalCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_totalCostVespene - lv_tickTotalVespene);
            lv_progressIsComplete = true;
        }
        lv_progressCostMinerals = Trunc(lv_tickCostMinerals);
        lv_progressCostVespene = Trunc(lv_tickCostVespene);
        if (((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, true);
            while ((UnitIsAlive(lv_parentUnit) == true) && (libSCPL_gf_UnitProtossProgress(lv_parentUnit) != -1.0) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < lv_progressCostMinerals) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < lv_progressCostVespene))) {
                Wait(lv_tickIncrement, c_timeGame);
            }
            if (((UnitIsAlive(lv_parentUnit) == false) || (libSCPL_gf_UnitProtossProgress(lv_parentUnit) == -1.0))) {
                break;
            }
            libSCPL_gf_UnitStatusPauseProgressBar(lv_parentUnit, lv_parentUnit, lv_progressIndex, false);
        }
        lv_tickTotalMinerals += lv_progressCostMinerals;
        lv_tickTotalVespene += lv_progressCostVespene;
        libSCPL_gf_PlayerResourcesSubtract(lv_playerIndex, lv_progressCostMinerals, lv_progressCostVespene);
        if ((lv_progressIsComplete == true)) {
            break;
        }
        Wait(lv_tickIncrement, c_timeGame);
    }
    libSCPL_gf_ResourceDisplaySpendUpdate(lv_parentUnit, 1.0, 0.0, 0.0);
    if ((libSCPL_gf_UnitProtossProgress(lv_parentUnit) == -1.0) && (UnitIsAlive(lv_parentUnit) == true)) {
        lv_tickTotalMinerals *= 0.75;
        lv_tickTotalVespene *= 0.75;
        libSCPL_gf_PlayerResourcesAdd(lv_playerIndex, lv_tickTotalMinerals, lv_tickTotalVespene);
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressProtossUnitStart_Init () {
    libSCPL_gt_ProgressProtossUnitStart = TriggerCreate("libSCPL_gt_ProgressProtossUnitStart_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_ProgressProtossUnitStart, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Protoss Unit Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressProtossUnitCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_parentUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((PlayerRace(EventPlayer()) == "Prot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_parentUnit = EventUnit();
    libSCPL_gf_UnitProtossProgressSet(lv_parentUnit, -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressProtossUnitCancel_Init () {
    libSCPL_gt_ProgressProtossUnitCancel = TriggerCreate("libSCPL_gt_ProgressProtossUnitCancel_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_ProgressProtossUnitCancel, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Train Warp Gate Refund
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressTrainWarpGateRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "WarpGate") || ((UnitGetType(EventUnit()) == "SdbPTrain1") && (TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "WarpGateResearch", c_techCountCompleteOnly) == 1))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_progressCostMinerals = UnitTypeGetCost(libNtve_gf_TriggeringProgressUnitType(), c_unitCostMinerals);
    lv_progressCostVespene = UnitTypeGetCost(libNtve_gf_TriggeringProgressUnitType(), c_unitCostVespene);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperSubtract, lv_progressCostMinerals);
    PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperSubtract, lv_progressCostVespene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressTrainWarpGateRefund_Init () {
    libSCPL_gt_ProgressTrainWarpGateRefund = TriggerCreate("libSCPL_gt_ProgressTrainWarpGateRefund_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_ProgressTrainWarpGateRefund, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Unit Start Commented
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressUnitStartCommented_Func (bool testConds, bool runActions) {
    fixed auto380E88ED_ae;
    fixed auto380E88ED_ai;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    string lv_progressUnitType;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_progressTime;
    fixed lv_progressPercent;
    int lv_progressIndex;
    fixed lv_tick;
    fixed lv_tickIncrement;
    fixed lv_tickCostBaseMinerals;
    fixed lv_tickCostBaseVespene;
    fixed lv_tickCostCarryOverMinerals;
    fixed lv_tickCostCarryOverVespene;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;
    fixed lv_expectedTime;
    bool lv_progressIsCancelled;
    bool lv_progressIsPaused;
    bool lv_slotTimesAreEqual;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_progressUnitType = libNtve_gf_TriggeringProgressUnitType();
    lv_progressCostMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_progressCostVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressIndex = libSCPL_gf_UsedTrainingSlotCount(lv_parentUnit);
    lv_progressTime = Round(UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeTotal, lv_progressIndex));
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_tickCostBaseMinerals = (lv_progressCostMinerals / (lv_progressTime / lv_tickIncrement));
    lv_tickCostBaseVespene = (lv_progressCostVespene / (lv_progressTime / lv_tickIncrement));
    if ((lv_progressIndex == 1)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
        UnitSetCustomValue(lv_parentUnit, 10, lv_tickCostBaseMinerals);
        UnitSetCustomValue(lv_parentUnit, 11, lv_tickCostBaseVespene);
        libPPRL_gf_DebugPanelSetFieldValue(2, (lv_progressUnitType));
    }
    else if ((lv_progressIndex == 2)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 1.0);
        UnitSetCustomValue(lv_parentUnit, 20, lv_tickCostBaseMinerals);
        UnitSetCustomValue(lv_parentUnit, 21, lv_tickCostBaseVespene);
        libPPRL_gf_DebugPanelSetFieldValue(5, (lv_progressUnitType));
    }
    libSCPL_gv_player[lv_playerIndex].lv_resourceSpendMinerals += lv_tickCostBaseMinerals;
    libSCPL_gv_player[lv_playerIndex].lv_resourceSpendVespene += lv_tickCostBaseVespene;
    Wait(0.0, c_timeGame);
    auto380E88ED_ae = (lv_progressTime - lv_tickIncrement);
    auto380E88ED_ai = lv_tickIncrement;
    lv_tick = 0.0625;
    for ( ; ( (auto380E88ED_ai >= 0 && lv_tick <= auto380E88ED_ae) || (auto380E88ED_ai <= 0 && lv_tick >= auto380E88ED_ae) ) ; lv_tick += auto380E88ED_ai ) {
        lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
        libPPRL_gf_DebugString((("Slot 1 |" + IntToString(lv_progressIndex) + " == ") + FixedToString(lv_expectedTime, 3) + " / " + FixedToString(lv_tick, 3) + " / " + FixedToString(UnitGetProgressComplete(lv_parentUnit, 1), c_fixedPrecisionAny)));
        lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 2);
        libPPRL_gf_DebugString((("Slot 2 |" + IntToString(lv_progressIndex) + " == ") + FixedToString(lv_expectedTime, 3) + " / " + FixedToString(lv_tick, 3) + " / " + FixedToString(UnitGetProgressComplete(lv_parentUnit, 2), c_fixedPrecisionAny)));
        lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
        if ((lv_progressIndex == 1) && (lv_tick != lv_expectedTime)) {
            libPPRL_gf_DebugString(("Cancel 1"));
            lv_progressIsCancelled = true;
            libSCPL_gf_DebugPanelUpdateSpendOverTime();
            break;
        }
        if ((lv_progressIndex == 2) && (lv_tick != lv_expectedTime)) {
            lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
            if ((lv_tick == lv_expectedTime)) {
                lv_progressIndex = 1;
                libPPRL_gf_DebugString(("Roll Over"));
                libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
                libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
                UnitSetCustomValue(lv_parentUnit, 10, lv_tickCostBaseMinerals);
                UnitSetCustomValue(lv_parentUnit, 11, lv_tickCostBaseVespene);
                UnitSetCustomValue(lv_parentUnit, 20, 0.0);
                UnitSetCustomValue(lv_parentUnit, 21, 0.0);
                libPPRL_gf_DebugPanelSetFieldValue(2, (lv_progressUnitType));
            }
            else {
                lv_progressIsCancelled = true;
                libPPRL_gf_DebugString(("Cancel 2"));
                libSCPL_gf_DebugPanelUpdateSpendOverTime();
                break;
            }
        }
        if ((lv_progressIndex == 1)) {
            if ((libSCPL_gf_UnitProgressState(lv_parentUnit, 1) == 0.0)) {
                libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
                UnitSetCustomValue(lv_parentUnit, 10, lv_tickCostBaseMinerals);
                UnitSetCustomValue(lv_parentUnit, 11, lv_tickCostBaseVespene);
                libPPRL_gf_DebugPanelSetFieldValue(2, (lv_progressUnitType));
            }
            libSCPL_gf_DebugPanelUpdateSpendOverTime();
        }
        if ((lv_progressIndex == 2)) {
            if ((libSCPL_gf_UnitProgressState(lv_parentUnit, 2) == 0.0)) {
                libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 1.0);
                UnitSetCustomValue(lv_parentUnit, 20, lv_tickCostBaseMinerals);
                UnitSetCustomValue(lv_parentUnit, 21, lv_tickCostBaseVespene);
                libPPRL_gf_DebugPanelSetFieldValue(5, (lv_progressUnitType));
            }
            libSCPL_gf_DebugPanelUpdateSpendOverTime();
        }
        if ((UnitIsAlive(lv_parentUnit) == false)) {
            lv_progressIsCancelled = false;
            break;
        }
        lv_tickCostMinerals = (lv_tickCostBaseMinerals + lv_tickCostCarryOverMinerals);
        lv_tickCostVespene = (lv_tickCostBaseVespene + lv_tickCostCarryOverVespene);
        lv_tickCostCarryOverMinerals = ModF(lv_tickCostMinerals, 1.0);
        lv_tickCostCarryOverVespene = ModF(lv_tickCostVespene, 1.0);
        if ((lv_tick == (lv_progressTime - lv_tickIncrement))) {
            lv_tickCostMinerals = (lv_progressCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_progressCostVespene - lv_tickTotalVespene);
        }
        lv_tickTotalMinerals = (lv_tickTotalMinerals + Trunc(lv_tickCostMinerals));
        lv_tickTotalVespene = (lv_tickTotalVespene + Trunc(lv_tickCostVespene));
        if ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) >= Trunc(lv_tickCostMinerals)) && (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) >= Trunc(lv_tickCostVespene))) {
            PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperSubtract, Trunc(lv_tickCostMinerals));
            PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperSubtract, Trunc(lv_tickCostVespene));
        }
        else {
            UnitSetProgressStage(lv_parentUnit, lv_progressIndex, c_unitProgressStagePause);
            lv_progressIsPaused = true;
            while ((lv_progressIsCancelled == false) && (UnitIsAlive(lv_parentUnit) == true) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < Trunc(lv_tickCostMinerals)) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < Trunc(lv_tickCostVespene)))) {
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
                libPPRL_gf_DebugString((("Pause 1 |" + IntToString(lv_progressIndex) + " == ") + FixedToString(lv_expectedTime, 3) + " / " + FixedToString(lv_tick, 3) + " / " + FixedToString(UnitGetProgressComplete(lv_parentUnit, 1), c_fixedPrecisionAny)));
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 2);
                libPPRL_gf_DebugString((("Pause 2 |" + IntToString(lv_progressIndex) + " == ") + FixedToString(lv_expectedTime, 3) + " / " + FixedToString(lv_tick, 3) + " / " + FixedToString(UnitGetProgressComplete(lv_parentUnit, 2), c_fixedPrecisionAny)));
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
                if ((UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1) == UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 2)) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_parentUnit, 1, 1) == libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_parentUnit, 2, 1))) {
                    lv_slotTimesAreEqual = true;
                }
                if ((lv_progressIndex == 1) && (lv_tick != lv_expectedTime)) {
                    libPPRL_gf_DebugString(("Pause Cancel 1"));
                    lv_progressIsCancelled = true;
                }
                if ((lv_progressIndex == 2) && (lv_tick != lv_expectedTime)) {
                    lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
                    if ((lv_tick == lv_expectedTime) && (lv_slotTimesAreEqual == false)) {
                        lv_progressIndex = 1;
                        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
                        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
                        UnitSetCustomValue(lv_parentUnit, 10, lv_tickCostBaseMinerals);
                        UnitSetCustomValue(lv_parentUnit, 11, lv_tickCostBaseVespene);
                        UnitSetCustomValue(lv_parentUnit, 20, 0.0);
                        UnitSetCustomValue(lv_parentUnit, 21, 0.0);
                        libPPRL_gf_DebugString(("Pause Roll Over"));
                        libPPRL_gf_DebugPanelSetFieldValue(2, (lv_progressUnitType));
                    }
                    else {
                        libPPRL_gf_DebugString(("Pause Cancel 2"));
                        lv_progressIsCancelled = true;
                    }
                }
                if ((lv_progressIsCancelled == true)) {
                    break;
                }
                Wait(lv_tickIncrement, c_timeGame);
            }
            if ((UnitIsAlive(lv_parentUnit) == true)) {
                PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperSubtract, Trunc(lv_tickCostMinerals));
                PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperSubtract, Trunc(lv_tickCostVespene));
                if ((lv_progressIsCancelled == true)) {
                    break;
                }
                if ((lv_progressIndex == 2) && (lv_tick != UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 2)) && (lv_tick == UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1))) {
                    lv_progressIndex = 1;
                    libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
                    libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
                    UnitSetCustomValue(lv_parentUnit, 10, lv_tickCostBaseMinerals);
                    UnitSetCustomValue(lv_parentUnit, 11, lv_tickCostBaseVespene);
                    UnitSetCustomValue(lv_parentUnit, 20, 0.0);
                    UnitSetCustomValue(lv_parentUnit, 21, 0.0);
                    libPPRL_gf_DebugString(("Resume Roll Over"));
                    libPPRL_gf_DebugPanelSetFieldValue(2, (lv_progressUnitType));
                }

                libPPRL_gf_DebugString(("Resume " + IntToString(lv_progressIndex)));
            }
        }
        if ((lv_progressIsPaused == true)) {
            lv_progressIsPaused = false;
            lv_slotTimesAreEqual = false;
            libPPRL_gf_DebugString(("CONTINUE"));
            UnitSetProgressStage(lv_parentUnit, lv_progressIndex, c_unitProgressStageResume);
        }
        if ((lv_tick == 0.0625)) {
            lv_tick = 0.0;
            UnitSetProgressStage(lv_parentUnit, lv_progressIndex, c_unitProgressStagePause);
            Wait(0.0625, c_timeGame);
            UnitSetProgressStage(lv_parentUnit, lv_progressIndex, c_unitProgressStageResume);
            Wait((lv_tickIncrement - 0.0625), c_timeGame);
            continue;
        }
        if ((lv_tick == (lv_progressTime - lv_tickIncrement))) {
            Wait((lv_tickIncrement - 0.0625), c_timeGame);
            lv_tick += (lv_tickIncrement - 0.0625);
            lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
            if ((lv_progressIndex == 1) && (lv_tick != lv_expectedTime)) {
                lv_progressIsCancelled = true;
                libPPRL_gf_DebugString(("NoReturn Cancel1"));
            }
            if ((lv_progressIndex == 2) && (lv_tick != lv_expectedTime)) {
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
                if ((lv_tick != lv_expectedTime)) {
                    lv_progressIsCancelled = true;
                    libPPRL_gf_DebugString(("NoReturn Cancel2"));
                }

            }
            continue;
        }
        Wait(lv_tickIncrement, c_timeGame);
        libPPRL_gf_DebugString(("TIKKA"));
    }
    libSCPL_gv_player[lv_playerIndex].lv_resourceSpendMinerals -= lv_tickCostBaseMinerals;
    libSCPL_gv_player[lv_playerIndex].lv_resourceSpendVespene -= lv_tickCostBaseVespene;
    if ((lv_progressIsCancelled == true)) {
        PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperAdd, Trunc(lv_tickTotalMinerals));
        PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperAdd, Trunc(lv_tickTotalVespene));
        libPPRL_gf_DebugString(("REFUND " + FixedToString(Trunc(lv_tickTotalMinerals), 0)));
    }

    if ((lv_progressIndex == 1)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 0.0);
        UnitSetCustomValue(lv_parentUnit, 10, 0.0);
        UnitSetCustomValue(lv_parentUnit, 11, 0.0);
        libPPRL_gf_DebugPanelSetFieldValue(2, "Empty");
    }
    else if ((lv_progressIndex == 2)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
        UnitSetCustomValue(lv_parentUnit, 20, 0.0);
        UnitSetCustomValue(lv_parentUnit, 21, 0.0);
        libPPRL_gf_DebugPanelSetFieldValue(5, "Empty");
    }
    libSCPL_gf_DebugPanelUpdateSpendOverTime();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressUnitStartCommented_Init () {
    libSCPL_gt_ProgressUnitStartCommented = TriggerCreate("libSCPL_gt_ProgressUnitStartCommented_Func");
    TriggerEnable(libSCPL_gt_ProgressUnitStartCommented, false);
    TriggerAddEventUnitTrainProgress(libSCPL_gt_ProgressUnitStartCommented, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Unit Start Commented Test
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressUnitStartCommentedTest_Func (bool testConds, bool runActions) {
    fixed auto0653A0CD_ae;
    fixed auto0653A0CD_ai;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_parentUnit;
    string lv_progressUnitType;
    fixed lv_progressCostMinerals;
    fixed lv_progressCostVespene;
    fixed lv_progressTime;
    fixed lv_progressPercent;
    int lv_progressIndex;
    fixed lv_tick;
    fixed lv_tickIncrement;
    fixed lv_tickCostBaseMinerals;
    fixed lv_tickCostBaseVespene;
    fixed lv_tickCostCarryOverMinerals;
    fixed lv_tickCostCarryOverVespene;
    fixed lv_tickCostMinerals;
    fixed lv_tickCostVespene;
    fixed lv_tickTotalMinerals;
    fixed lv_tickTotalVespene;
    fixed lv_expectedTime;
    bool lv_progressIsCancelled;
    bool lv_progressIsPaused;
    bool lv_slotTimesAreEqual;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_progressUnitType = libNtve_gf_TriggeringProgressUnitType();
    lv_progressCostMinerals = UnitTypeGetCost(lv_progressUnitType, c_unitCostMinerals);
    lv_progressCostVespene = UnitTypeGetCost(lv_progressUnitType, c_unitCostVespene);
    lv_playerIndex = EventPlayer();
    lv_parentUnit = EventUnit();
    lv_progressIndex = libSCPL_gf_UsedTrainingSlotCount(lv_parentUnit);
    lv_progressTime = Round(UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeTotal, lv_progressIndex));
    lv_tickIncrement = libSCPL_gv_constants.lv_spendTickIncrement;
    lv_tickCostBaseMinerals = (lv_progressCostMinerals / (lv_progressTime / lv_tickIncrement));
    lv_tickCostBaseVespene = (lv_progressCostVespene / (lv_progressTime / lv_tickIncrement));
    if ((lv_progressIndex == 1)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
        UnitSetCustomValue(lv_parentUnit, 10, lv_tickCostBaseMinerals);
        UnitSetCustomValue(lv_parentUnit, 11, lv_tickCostBaseVespene);
        libPPRL_gf_DebugPanelSetFieldValue(2, (lv_progressUnitType));
    }
    else if ((lv_progressIndex == 2)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 1.0);
        UnitSetCustomValue(lv_parentUnit, 20, lv_tickCostBaseMinerals);
        UnitSetCustomValue(lv_parentUnit, 21, lv_tickCostBaseVespene);
        libPPRL_gf_DebugPanelSetFieldValue(5, (lv_progressUnitType));
    }
    libSCPL_gv_player[lv_playerIndex].lv_resourceSpendMinerals += lv_tickCostBaseMinerals;
    libSCPL_gv_player[lv_playerIndex].lv_resourceSpendVespene += lv_tickCostBaseVespene;
    Wait(0.0625, c_timeGame);
    auto0653A0CD_ae = (lv_progressTime - lv_tickIncrement);
    auto0653A0CD_ai = lv_tickIncrement;
    lv_tick = 0.0625;
    for ( ; ( (auto0653A0CD_ai >= 0 && lv_tick <= auto0653A0CD_ae) || (auto0653A0CD_ai <= 0 && lv_tick >= auto0653A0CD_ae) ) ; lv_tick += auto0653A0CD_ai ) {
        lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
        if ((lv_expectedTime == 0.0)) {
            Wait(0.0625, c_timeGame);
        }
        lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
        libPPRL_gf_DebugString((("Slot 1 |" + IntToString(lv_progressIndex) + " == ") + FixedToString(lv_expectedTime, 3) + " / " + FixedToString(lv_tick, 3) + " / " + FixedToString(UnitGetProgressComplete(lv_parentUnit, 1), c_fixedPrecisionAny)));
        lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 2);
        libPPRL_gf_DebugString((("Slot 2 |" + IntToString(lv_progressIndex) + " == ") + FixedToString(lv_expectedTime, 3) + " / " + FixedToString(lv_tick, 3) + " / " + FixedToString(UnitGetProgressComplete(lv_parentUnit, 2), c_fixedPrecisionAny)));
        lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
        if ((lv_progressIndex == 1) && (lv_tick != lv_expectedTime)) {
            libPPRL_gf_DebugString(("Cancel 1"));
            lv_progressIsCancelled = true;
            libSCPL_gf_DebugPanelUpdateSpendOverTime();
            break;
        }
        if ((lv_progressIndex == 2) && (lv_tick != lv_expectedTime)) {
            lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
            if ((lv_tick == lv_expectedTime)) {
                lv_progressIndex = 1;
                libPPRL_gf_DebugString(("Roll Over"));
                libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
                libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
                UnitSetCustomValue(lv_parentUnit, 10, lv_tickCostBaseMinerals);
                UnitSetCustomValue(lv_parentUnit, 11, lv_tickCostBaseVespene);
                UnitSetCustomValue(lv_parentUnit, 20, 0.0);
                UnitSetCustomValue(lv_parentUnit, 21, 0.0);
                libPPRL_gf_DebugPanelSetFieldValue(2, (lv_progressUnitType));
            }
            else {
                lv_progressIsCancelled = true;
                libPPRL_gf_DebugString(("Cancel 2"));
                libSCPL_gf_DebugPanelUpdateSpendOverTime();
                break;
            }
        }
        if ((lv_progressIndex == 1)) {
            if ((libSCPL_gf_UnitProgressState(lv_parentUnit, 1) == 0.0)) {
                libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
                UnitSetCustomValue(lv_parentUnit, 10, lv_tickCostBaseMinerals);
                UnitSetCustomValue(lv_parentUnit, 11, lv_tickCostBaseVespene);
                libPPRL_gf_DebugPanelSetFieldValue(2, (lv_progressUnitType));
            }
            libSCPL_gf_DebugPanelUpdateSpendOverTime();
        }
        if ((lv_progressIndex == 2)) {
            if ((libSCPL_gf_UnitProgressState(lv_parentUnit, 2) == 0.0)) {
                libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 1.0);
                UnitSetCustomValue(lv_parentUnit, 20, lv_tickCostBaseMinerals);
                UnitSetCustomValue(lv_parentUnit, 21, lv_tickCostBaseVespene);
                libPPRL_gf_DebugPanelSetFieldValue(5, (lv_progressUnitType));
            }
            libSCPL_gf_DebugPanelUpdateSpendOverTime();
        }
        if ((UnitIsAlive(lv_parentUnit) == false)) {
            lv_progressIsCancelled = false;
            break;
        }
        lv_tickCostMinerals = (lv_tickCostBaseMinerals + lv_tickCostCarryOverMinerals);
        lv_tickCostVespene = (lv_tickCostBaseVespene + lv_tickCostCarryOverVespene);
        lv_tickCostCarryOverMinerals = ModF(lv_tickCostMinerals, 1.0);
        lv_tickCostCarryOverVespene = ModF(lv_tickCostVespene, 1.0);
        if ((lv_tick == (lv_progressTime - lv_tickIncrement))) {
            lv_tickCostMinerals = (lv_progressCostMinerals - lv_tickTotalMinerals);
            lv_tickCostVespene = (lv_progressCostVespene - lv_tickTotalVespene);
        }
        lv_tickTotalMinerals = (lv_tickTotalMinerals + Trunc(lv_tickCostMinerals));
        lv_tickTotalVespene = (lv_tickTotalVespene + Trunc(lv_tickCostVespene));
        if ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) >= Trunc(lv_tickCostMinerals)) && (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) >= Trunc(lv_tickCostVespene))) {
            PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperSubtract, Trunc(lv_tickCostMinerals));
            PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperSubtract, Trunc(lv_tickCostVespene));
        }
        else {
            UnitSetProgressStage(lv_parentUnit, lv_progressIndex, c_unitProgressStagePause);
            lv_progressIsPaused = true;
            while ((lv_progressIsCancelled == false) && (UnitIsAlive(lv_parentUnit) == true) && ((libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex) < Trunc(lv_tickCostMinerals)) || (libSCPL_gf_PlayerAvailableVespene(lv_playerIndex) < Trunc(lv_tickCostVespene)))) {
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
                libPPRL_gf_DebugString((("Pause 1 |" + IntToString(lv_progressIndex) + " == ") + FixedToString(lv_expectedTime, 3) + " / " + FixedToString(lv_tick, 3) + " / " + FixedToString(UnitGetProgressComplete(lv_parentUnit, 1), c_fixedPrecisionAny)));
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 2);
                libPPRL_gf_DebugString((("Pause 2 |" + IntToString(lv_progressIndex) + " == ") + FixedToString(lv_expectedTime, 3) + " / " + FixedToString(lv_tick, 3) + " / " + FixedToString(UnitGetProgressComplete(lv_parentUnit, 2), c_fixedPrecisionAny)));
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
                if ((UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1) == UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 2)) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_parentUnit, 1, 1) == libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_parentUnit, 2, 1))) {
                    lv_slotTimesAreEqual = true;
                }
                if ((lv_progressIndex == 1) && (lv_tick != lv_expectedTime)) {
                    libPPRL_gf_DebugString(("Pause Cancel 1"));
                    lv_progressIsCancelled = true;
                }
                if ((lv_progressIndex == 2) && (lv_tick != lv_expectedTime)) {
                    lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
                    if ((lv_tick == lv_expectedTime) && (lv_slotTimesAreEqual == false)) {
                        lv_progressIndex = 1;
                        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
                        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
                        UnitSetCustomValue(lv_parentUnit, 10, lv_tickCostBaseMinerals);
                        UnitSetCustomValue(lv_parentUnit, 11, lv_tickCostBaseVespene);
                        UnitSetCustomValue(lv_parentUnit, 20, 0.0);
                        UnitSetCustomValue(lv_parentUnit, 21, 0.0);
                        libPPRL_gf_DebugString(("Pause Roll Over"));
                        libPPRL_gf_DebugPanelSetFieldValue(2, (lv_progressUnitType));
                    }
                    else {
                        libPPRL_gf_DebugString(("Pause Cancel 2"));
                        lv_progressIsCancelled = true;
                    }
                }
                if ((lv_progressIsCancelled == true)) {
                    break;
                }
                Wait(lv_tickIncrement, c_timeGame);
            }
            if ((UnitIsAlive(lv_parentUnit) == true)) {
                PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperSubtract, Trunc(lv_tickCostMinerals));
                PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperSubtract, Trunc(lv_tickCostVespene));
                if ((lv_progressIsCancelled == true)) {
                    break;
                }
                if ((lv_progressIndex == 2) && (lv_tick != UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 2)) && (lv_tick == UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1))) {
                    lv_progressIndex = 1;
                    libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 1.0);
                    libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
                    UnitSetCustomValue(lv_parentUnit, 10, lv_tickCostBaseMinerals);
                    UnitSetCustomValue(lv_parentUnit, 11, lv_tickCostBaseVespene);
                    UnitSetCustomValue(lv_parentUnit, 20, 0.0);
                    UnitSetCustomValue(lv_parentUnit, 21, 0.0);
                    libPPRL_gf_DebugString(("Resume Roll Over"));
                    libPPRL_gf_DebugPanelSetFieldValue(2, (lv_progressUnitType));
                }

                libPPRL_gf_DebugString(("Resume " + IntToString(lv_progressIndex)));
            }
        }
        if ((lv_progressIsPaused == true)) {
            lv_progressIsPaused = false;
            lv_slotTimesAreEqual = false;
            libPPRL_gf_DebugString(("CONTINUE"));
            UnitSetProgressStage(lv_parentUnit, lv_progressIndex, c_unitProgressStageResume);
        }
        if ((lv_tick == 0.0625)) {
            lv_tick = 0.0;
            UnitSetProgressStage(lv_parentUnit, lv_progressIndex, c_unitProgressStagePause);
            Wait(0.0625, c_timeGame);
            UnitSetProgressStage(lv_parentUnit, lv_progressIndex, c_unitProgressStageResume);
            Wait((lv_tickIncrement - 0.0625), c_timeGame);
            continue;
        }
        if ((lv_tick == (lv_progressTime - lv_tickIncrement))) {
            Wait((lv_tickIncrement - 0.0625), c_timeGame);
            lv_tick += (lv_tickIncrement - 0.0625);
            lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, lv_progressIndex);
            if ((lv_progressIndex == 1) && (lv_tick != lv_expectedTime)) {
                lv_progressIsCancelled = true;
                libPPRL_gf_DebugString(("NoReturn Cancel1"));
            }
            if ((lv_progressIndex == 2) && (lv_tick != lv_expectedTime)) {
                lv_expectedTime = UnitQueueItemTime(lv_parentUnit, c_unitQueueTimeElapsed, 1);
                if ((lv_tick != lv_expectedTime)) {
                    lv_progressIsCancelled = true;
                    libPPRL_gf_DebugString(("NoReturn Cancel2"));
                }

            }
            continue;
        }
        Wait(lv_tickIncrement, c_timeGame);
        libPPRL_gf_DebugString(("TIKKA"));
    }
    libSCPL_gv_player[lv_playerIndex].lv_resourceSpendMinerals -= lv_tickCostBaseMinerals;
    libSCPL_gv_player[lv_playerIndex].lv_resourceSpendVespene -= lv_tickCostBaseVespene;
    if ((lv_progressIsCancelled == true)) {
        PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropMinerals, c_playerPropOperAdd, Trunc(lv_tickTotalMinerals));
        PlayerModifyPropertyFixed(lv_playerIndex, c_playerPropVespene, c_playerPropOperAdd, Trunc(lv_tickTotalVespene));
        libPPRL_gf_DebugString(("REFUND " + FixedToString(Trunc(lv_tickTotalMinerals), 0)));
    }

    if ((lv_progressIndex == 1)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 1, 0.0);
        UnitSetCustomValue(lv_parentUnit, 10, 0.0);
        UnitSetCustomValue(lv_parentUnit, 11, 0.0);
        libPPRL_gf_DebugPanelSetFieldValue(2, "Empty");
    }
    else if ((lv_progressIndex == 2)) {
        libSCPL_gf_UnitProgressStateSet(lv_parentUnit, 2, 0.0);
        UnitSetCustomValue(lv_parentUnit, 20, 0.0);
        UnitSetCustomValue(lv_parentUnit, 21, 0.0);
        libPPRL_gf_DebugPanelSetFieldValue(5, "Empty");
    }
    libSCPL_gf_DebugPanelUpdateSpendOverTime();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressUnitStartCommentedTest_Init () {
    libSCPL_gt_ProgressUnitStartCommentedTest = TriggerCreate("libSCPL_gt_ProgressUnitStartCommentedTest_Func");
    TriggerEnable(libSCPL_gt_ProgressUnitStartCommentedTest, false);
    TriggerAddEventUnitTrainProgress(libSCPL_gt_ProgressUnitStartCommentedTest, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Unit Cancel Commented
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ProgressUnitCancelCommented_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libPPRL_gf_DebugString(("TRAINING CANCELLED"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ProgressUnitCancelCommented_Init () {
    libSCPL_gt_ProgressUnitCancelCommented = TriggerCreate("libSCPL_gt_ProgressUnitCancelCommented_Func");
    TriggerEnable(libSCPL_gt_ProgressUnitCancelCommented, false);
    TriggerAddEventUnitTrainProgress(libSCPL_gt_ProgressUnitCancelCommented, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 00 Target Created
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally00TargetCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_rallyUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "GameGlobalRallyTarget00"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 0;
    lv_rallyUnit = EventUnitCreatedUnit();
    lv_playerIndex = UnitGetOwner(lv_rallyUnit);
    libSCPL_gv_player[lv_playerIndex].lv_globalRallyTarget[lv_rallyIndex] = lv_rallyUnit;
    libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex] = null;
    UnitGroupIssueOrder(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], OrderTargetingUnit(AbilityCommand("Rally", 0), lv_rallyUnit), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally00TargetCreated_Init () {
    libSCPL_gt_GlobalRally00TargetCreated = TriggerCreate("libSCPL_gt_GlobalRally00TargetCreated_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_GlobalRally00TargetCreated, null, "GameGlobalRallyTarget00", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 01 Target Created
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally01TargetCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_rallyUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "GameGlobalRallyTarget01"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 1;
    lv_rallyUnit = EventUnitCreatedUnit();
    lv_playerIndex = UnitGetOwner(lv_rallyUnit);
    libSCPL_gv_player[lv_playerIndex].lv_globalRallyTarget[lv_rallyIndex] = lv_rallyUnit;
    libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex] = null;
    UnitGroupIssueOrder(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], OrderTargetingUnit(AbilityCommand("Rally", 0), lv_rallyUnit), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally01TargetCreated_Init () {
    libSCPL_gt_GlobalRally01TargetCreated = TriggerCreate("libSCPL_gt_GlobalRally01TargetCreated_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_GlobalRally01TargetCreated, null, "GameGlobalRallyTarget01", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 02 Target Created
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally02TargetCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_rallyUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "GameGlobalRallyTarget02"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 2;
    lv_rallyUnit = EventUnitCreatedUnit();
    lv_playerIndex = UnitGetOwner(lv_rallyUnit);
    libSCPL_gv_player[lv_playerIndex].lv_globalRallyTarget[lv_rallyIndex] = lv_rallyUnit;
    libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex] = null;
    UnitGroupIssueOrder(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], OrderTargetingUnit(AbilityCommand("Rally", 0), lv_rallyUnit), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally02TargetCreated_Init () {
    libSCPL_gt_GlobalRally02TargetCreated = TriggerCreate("libSCPL_gt_GlobalRally02TargetCreated_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_GlobalRally02TargetCreated, null, "GameGlobalRallyTarget02", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 00 Producer Created
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally00ProducerCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_productionUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) != "Zerg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 0;
    lv_productionUnit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_productionUnit);
    UnitGroupAdd(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], lv_productionUnit);
    if ((UnitIsAlive(libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]) == true)) {
        UnitIssueOrder(lv_productionUnit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_productionUnit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTarget[lv_rallyIndex]), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally00ProducerCreated_Init () {
    libSCPL_gt_GlobalRally00ProducerCreated = TriggerCreate("libSCPL_gt_GlobalRally00ProducerCreated_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_GlobalRally00ProducerCreated, null, "GameUCBGlobalRally00ChargeLink", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 01 Producer Created
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally01ProducerCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_productionUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) != "Zerg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 1;
    lv_productionUnit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_productionUnit);
    UnitGroupAdd(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], lv_productionUnit);
    if ((UnitIsAlive(libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]) == true)) {
        UnitIssueOrder(lv_productionUnit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_productionUnit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTarget[lv_rallyIndex]), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally01ProducerCreated_Init () {
    libSCPL_gt_GlobalRally01ProducerCreated = TriggerCreate("libSCPL_gt_GlobalRally01ProducerCreated_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_GlobalRally01ProducerCreated, null, "GameUCBGlobalRally01ChargeLink", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 02 Producer Created
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally02ProducerCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_productionUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) != "Zerg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 2;
    lv_productionUnit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_productionUnit);
    UnitGroupAdd(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], lv_productionUnit);
    if ((UnitIsAlive(libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]) == true)) {
        UnitIssueOrder(lv_productionUnit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_productionUnit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTarget[lv_rallyIndex]), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally02ProducerCreated_Init () {
    libSCPL_gt_GlobalRally02ProducerCreated = TriggerCreate("libSCPL_gt_GlobalRally02ProducerCreated_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_GlobalRally02ProducerCreated, null, "GameUCBGlobalRally02ChargeLink", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 00 Producer Created Zerg
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally00ProducerCreatedZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 0;
    lv_unit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    UnitGroupAdd(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], lv_unit);
    if ((UnitIsAlive(libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]) == true)) {
        UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTarget[lv_rallyIndex]), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally00ProducerCreatedZerg_Init () {
    libSCPL_gt_GlobalRally00ProducerCreatedZerg = TriggerCreate("libSCPL_gt_GlobalRally00ProducerCreatedZerg_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_GlobalRally00ProducerCreatedZerg, null, AbilityCommand("LarvaTrain", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_GlobalRally00ProducerCreatedZerg, null, AbilityCommand("LarvaTrain", 6));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 01 Producer Created Zerg
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally01ProducerCreatedZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 1;
    lv_unit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    UnitGroupAdd(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], lv_unit);
    if ((UnitIsAlive(libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]) == true)) {
        UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTarget[lv_rallyIndex]), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally01ProducerCreatedZerg_Init () {
    libSCPL_gt_GlobalRally01ProducerCreatedZerg = TriggerCreate("libSCPL_gt_GlobalRally01ProducerCreatedZerg_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_GlobalRally01ProducerCreatedZerg, null, AbilityCommand("LarvaTrain", 9));
    TriggerAddEventUnitOrder(libSCPL_gt_GlobalRally01ProducerCreatedZerg, null, AbilityCommand("LarvaTrain", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_GlobalRally01ProducerCreatedZerg, null, AbilityCommand("LarvaTrain", 10));
    TriggerAddEventUnitOrder(libSCPL_gt_GlobalRally01ProducerCreatedZerg, null, AbilityCommand("LarvaTrain", 14));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 02 Producer Created Zerg
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally02ProducerCreatedZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 2;
    lv_unit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    UnitGroupAdd(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], lv_unit);
    if ((UnitIsAlive(libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]) == true)) {
        UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex]), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("Rally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTarget[lv_rallyIndex]), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally02ProducerCreatedZerg_Init () {
    libSCPL_gt_GlobalRally02ProducerCreatedZerg = TriggerCreate("libSCPL_gt_GlobalRally02ProducerCreatedZerg_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_GlobalRally02ProducerCreatedZerg, null, AbilityCommand("LarvaTrain", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_GlobalRally02ProducerCreatedZerg, null, AbilityCommand("LarvaTrain", 11));
    TriggerAddEventUnitOrder(libSCPL_gt_GlobalRally02ProducerCreatedZerg, null, AbilityCommand("LarvaTrain", 12));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally Protoss Warp Gate Unit Created
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRallyProtossWarpGateUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_rallyUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 0;
    lv_rallyUnit = EventUnitCreatedUnit();
    lv_playerIndex = UnitGetOwner(lv_rallyUnit);
    UnitGroupAdd(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], lv_rallyUnit);
    UnitIssueOrder(lv_rallyUnit, OrderTargetingUnit(AbilityCommand("ProgressRally", 0), libSCPL_gv_player[lv_playerIndex].lv_globalRallyTarget[lv_rallyIndex]), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRallyProtossWarpGateUnitCreated_Init () {
    libSCPL_gt_GlobalRallyProtossWarpGateUnitCreated = TriggerCreate("libSCPL_gt_GlobalRallyProtossWarpGateUnitCreated_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_GlobalRallyProtossWarpGateUnitCreated, null, "WarpGateTrain", null);
    TriggerAddEventUnitCreated(libSCPL_gt_GlobalRallyProtossWarpGateUnitCreated, null, "WarpGateTrainUCB", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 00 Attach Unit
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally00AttachUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_rallyUnit;
    unit lv_targetUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 0;
    lv_playerIndex = UnitGetOwner(EventUnitDamageSourceUnit());
    lv_targetUnit = EventUnit();
    lv_rallyUnit = libSCPL_gf_DebugPlayerUnit(lv_playerIndex, "GameGlobalRallyTarget00");
    libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex] = lv_targetUnit;
    UnitGroupIssueOrder(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], OrderTargetingUnit(AbilityCommand("Rally", 0), lv_targetUnit), c_orderQueueReplace);
    UnitBehaviorAdd(lv_rallyUnit, "KineticFollow", lv_targetUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally00AttachUnit_Init () {
    libSCPL_gt_GlobalRally00AttachUnit = TriggerCreate("libSCPL_gt_GlobalRally00AttachUnit_Func");
    TriggerAddEventUnitDamaged(libSCPL_gt_GlobalRally00AttachUnit, null, c_unitDamageTypeAny, c_unitDamageEither, "GlobalRallyTarget00UnitImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 01 Attach Unit
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally01AttachUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_rallyUnit;
    unit lv_targetUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 1;
    lv_playerIndex = UnitGetOwner(EventUnitDamageSourceUnit());
    lv_targetUnit = EventUnit();
    lv_rallyUnit = libSCPL_gf_DebugPlayerUnit(lv_playerIndex, "GameGlobalRallyTarget01");
    libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex] = lv_targetUnit;
    UnitGroupIssueOrder(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], OrderTargetingUnit(AbilityCommand("Rally", 0), lv_targetUnit), c_orderQueueReplace);
    UnitBehaviorAdd(lv_rallyUnit, "KineticFollow", lv_targetUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally01AttachUnit_Init () {
    libSCPL_gt_GlobalRally01AttachUnit = TriggerCreate("libSCPL_gt_GlobalRally01AttachUnit_Func");
    TriggerAddEventUnitDamaged(libSCPL_gt_GlobalRally01AttachUnit, null, c_unitDamageTypeAny, c_unitDamageEither, "GlobalRallyTarget01UnitImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Rally 02 Attach Unit
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GlobalRally02AttachUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rallyIndex;
    unit lv_rallyUnit;
    unit lv_targetUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rallyIndex = 2;
    lv_playerIndex = UnitGetOwner(EventUnitDamageSourceUnit());
    lv_targetUnit = EventUnit();
    lv_rallyUnit = libSCPL_gf_DebugPlayerUnit(lv_playerIndex, "GameGlobalRallyTarget02");
    libSCPL_gv_player[lv_playerIndex].lv_globalRallyTargetUnit[lv_rallyIndex] = lv_targetUnit;
    UnitGroupIssueOrder(libSCPL_gv_player[lv_playerIndex].lv_globalRallyGroup[lv_rallyIndex], OrderTargetingUnit(AbilityCommand("Rally", 0), lv_targetUnit), c_orderQueueReplace);
    UnitBehaviorAdd(lv_rallyUnit, "KineticFollow", lv_targetUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GlobalRally02AttachUnit_Init () {
    libSCPL_gt_GlobalRally02AttachUnit = TriggerCreate("libSCPL_gt_GlobalRally02AttachUnit_Func");
    TriggerAddEventUnitDamaged(libSCPL_gt_GlobalRally02AttachUnit, null, c_unitDamageTypeAny, c_unitDamageEither, "GlobalRallyTarget02UnitImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Auto Add Toggle T1
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupAutoAddToggleT1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_controlIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_controlIndex = 1;
    lv_playerIndex = UnitGetOwner(EventUnit());
    libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[lv_controlIndex] = UnitCheckAbilCmdState(EventUnit(), EventUnitAbility(), c_cmdStateIsAutoCast);
    libSCPL_gf_SCPBankControlGroupToggle(lv_playerIndex, lv_controlIndex, UnitCheckAbilCmdState(EventUnit(), EventUnitAbility(), c_cmdStateIsAutoCast));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupAutoAddToggleT1_Init () {
    libSCPL_gt_ControlGroupAutoAddToggleT1 = TriggerCreate("libSCPL_gt_ControlGroupAutoAddToggleT1_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libSCPL_gt_ControlGroupAutoAddToggleT1, null, AbilityCommand("GameGlobalRallyTarget00", 0), c_unitAbilAutoCastChangeAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Auto Add Toggle T2
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupAutoAddToggleT2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_controlIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_controlIndex = 2;
    lv_playerIndex = UnitGetOwner(EventUnit());
    libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[lv_controlIndex] = UnitCheckAbilCmdState(EventUnit(), EventUnitAbility(), c_cmdStateIsAutoCast);
    libSCPL_gf_SCPBankControlGroupToggle(lv_playerIndex, lv_controlIndex, UnitCheckAbilCmdState(EventUnit(), EventUnitAbility(), c_cmdStateIsAutoCast));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupAutoAddToggleT2_Init () {
    libSCPL_gt_ControlGroupAutoAddToggleT2 = TriggerCreate("libSCPL_gt_ControlGroupAutoAddToggleT2_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libSCPL_gt_ControlGroupAutoAddToggleT2, null, AbilityCommand("GameGlobalRallyTarget01", 0), c_unitAbilAutoCastChangeAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Auto Add Toggle T3
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupAutoAddToggleT3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_controlIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_controlIndex = 3;
    lv_playerIndex = UnitGetOwner(EventUnit());
    libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[lv_controlIndex] = UnitCheckAbilCmdState(EventUnit(), EventUnitAbility(), c_cmdStateIsAutoCast);
    libSCPL_gf_SCPBankControlGroupToggle(lv_playerIndex, lv_controlIndex, UnitCheckAbilCmdState(EventUnit(), EventUnitAbility(), c_cmdStateIsAutoCast));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupAutoAddToggleT3_Init () {
    libSCPL_gt_ControlGroupAutoAddToggleT3 = TriggerCreate("libSCPL_gt_ControlGroupAutoAddToggleT3_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libSCPL_gt_ControlGroupAutoAddToggleT3, null, AbilityCommand("GameGlobalRallyTarget02", 0), c_unitAbilAutoCastChangeAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Auto Add T1
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupAutoAddT1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_controlIndex;
    int lv_playerIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnitCreatedUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    lv_controlIndex = 1;
    if ((libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[lv_controlIndex] == true)) {
        libSCPL_gf_ControlGroupUnitsAdd(libNtve_gf_ConvertUnitToUnitGroup(lv_unit), lv_controlIndex, lv_playerIndex);
        libSCPL_gf_ControlGroupUnitsUpdate(lv_controlIndex, lv_playerIndex);
        libSCPL_gf_GameTipCreateInstance("GlobalControlGroupAutoAdd", lv_playerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupAutoAddT1_Init () {
    libSCPL_gt_ControlGroupAutoAddT1 = TriggerCreate("libSCPL_gt_ControlGroupAutoAddT1_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_ControlGroupAutoAddT1, null, "BarracksTrain", null);
    TriggerAddEventUnitCreated(libSCPL_gt_ControlGroupAutoAddT1, null, "GatewayTrain", null);
    TriggerAddEventUnitCreated(libSCPL_gt_ControlGroupAutoAddT1, null, "WarpGateTrain", null);
    TriggerAddEventUnitCreated(libSCPL_gt_ControlGroupAutoAddT1, null, "WarpGateTrainUCB", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Auto Add T2
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupAutoAddT2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_controlIndex;
    int lv_playerIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnitCreatedUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    lv_controlIndex = 2;
    if ((libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[lv_controlIndex] == true)) {
        libSCPL_gf_ControlGroupUnitsAdd(libNtve_gf_ConvertUnitToUnitGroup(lv_unit), lv_controlIndex, lv_playerIndex);
        libSCPL_gf_ControlGroupUnitsUpdate(lv_controlIndex, lv_playerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupAutoAddT2_Init () {
    libSCPL_gt_ControlGroupAutoAddT2 = TriggerCreate("libSCPL_gt_ControlGroupAutoAddT2_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_ControlGroupAutoAddT2, null, "FactoryTrain", null);
    TriggerAddEventUnitCreated(libSCPL_gt_ControlGroupAutoAddT2, null, "RoboticsFacilityTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Auto Add T3
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupAutoAddT3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_controlIndex;
    int lv_playerIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnitCreatedUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    lv_controlIndex = 3;
    if ((libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[lv_controlIndex] == true)) {
        libSCPL_gf_ControlGroupUnitsAdd(libNtve_gf_ConvertUnitToUnitGroup(lv_unit), lv_controlIndex, lv_playerIndex);
        libSCPL_gf_ControlGroupUnitsUpdate(lv_controlIndex, lv_playerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupAutoAddT3_Init () {
    libSCPL_gt_ControlGroupAutoAddT3 = TriggerCreate("libSCPL_gt_ControlGroupAutoAddT3_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_ControlGroupAutoAddT3, null, "StarportTrain", null);
    TriggerAddEventUnitCreated(libSCPL_gt_ControlGroupAutoAddT3, null, "NexusTrainMothershipCore", null);
    TriggerAddEventUnitCreated(libSCPL_gt_ControlGroupAutoAddT3, null, "StargateTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Auto Add T1 Zerg
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupAutoAddT1Zerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_controlIndex;
    int lv_playerIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    lv_controlIndex = 1;
    if ((libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[lv_controlIndex] == true)) {
        libSCPL_gf_ControlGroupUnitsAdd(libNtve_gf_ConvertUnitToUnitGroup(lv_unit), lv_controlIndex, lv_playerIndex);
        libSCPL_gf_ControlGroupUnitsUpdate(lv_controlIndex, lv_playerIndex);
        libSCPL_gf_GameTipCreateInstance("GlobalControlGroupAutoAdd", lv_playerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupAutoAddT1Zerg_Init () {
    libSCPL_gt_ControlGroupAutoAddT1Zerg = TriggerCreate("libSCPL_gt_ControlGroupAutoAddT1Zerg_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_ControlGroupAutoAddT1Zerg, null, "GameUCBGlobalRallyZergMelee", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Auto Add T2 Zerg
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupAutoAddT2Zerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_controlIndex;
    int lv_playerIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    lv_controlIndex = 2;
    if ((libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[lv_controlIndex] == true)) {
        libSCPL_gf_ControlGroupUnitsAdd(libNtve_gf_ConvertUnitToUnitGroup(lv_unit), lv_controlIndex, lv_playerIndex);
        libSCPL_gf_ControlGroupUnitsUpdate(lv_controlIndex, lv_playerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupAutoAddT2Zerg_Init () {
    libSCPL_gt_ControlGroupAutoAddT2Zerg = TriggerCreate("libSCPL_gt_ControlGroupAutoAddT2Zerg_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_ControlGroupAutoAddT2Zerg, null, "GameUCBGlobalRallyZergRanged", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Auto Add T3 Zerg
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupAutoAddT3Zerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_controlIndex;
    int lv_playerIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    lv_controlIndex = 3;
    if ((libSCPL_gv_player[lv_playerIndex].lv_controlGroupAutoAdd[lv_controlIndex] == true)) {
        libSCPL_gf_ControlGroupUnitsAdd(libNtve_gf_ConvertUnitToUnitGroup(lv_unit), lv_controlIndex, lv_playerIndex);
        libSCPL_gf_ControlGroupUnitsUpdate(lv_controlIndex, lv_playerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupAutoAddT3Zerg_Init () {
    libSCPL_gt_ControlGroupAutoAddT3Zerg = TriggerCreate("libSCPL_gt_ControlGroupAutoAddT3Zerg_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_ControlGroupAutoAddT3Zerg, null, "GameUCBGlobalRallyZergFlyer", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Production Check Worker Slot
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerProductionCheckWorkerSlot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_townHall;
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "CommandCenter") || (UnitGetType(EventUnit()) == "OrbitalCommand") || (UnitGetType(EventUnit()) == "Nexus")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_townHall = EventUnit();
    libSCPL_gf_AutoWorkerProduction(lv_townHall, lv_playerIndex);
    if ((libSCPL_gf_PlayerTownHallWorkerCount(lv_townHall, lv_playerIndex) >= libSCPL_gf_PlayerTownHallSaturationCount(lv_townHall, lv_playerIndex))) {
        TriggerSendEvent("WorkerSaturationCountReached");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerProductionCheckWorkerSlot_Init () {
    libSCPL_gt_AutoWorkerProductionCheckWorkerSlot = TriggerCreate("libSCPL_gt_AutoWorkerProductionCheckWorkerSlot_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_AutoWorkerProductionCheckWorkerSlot, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Production Check Worker Slot Zerg
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerProductionCheckWorkerSlotZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_townHall;
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Larva"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnitCreatedUnit());
    lv_townHall = libSCPL_gf_PlayerTownHallClosest(UnitGetPosition(EventUnitCreatedUnit()), lv_playerIndex);
    libSCPL_gf_AutoWorkerProduction(lv_townHall, lv_playerIndex);
    if ((libSCPL_gf_PlayerTownHallWorkerCount(lv_townHall, lv_playerIndex) >= libSCPL_gf_PlayerTownHallSaturationCount(lv_townHall, lv_playerIndex))) {
        TriggerSendEvent("WorkerSaturationCountReached");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerProductionCheckWorkerSlotZerg_Init () {
    libSCPL_gt_AutoWorkerProductionCheckWorkerSlotZerg = TriggerCreate("libSCPL_gt_AutoWorkerProductionCheckWorkerSlotZerg_Func");
    TriggerEnable(libSCPL_gt_AutoWorkerProductionCheckWorkerSlotZerg, false);
    TriggerAddEventUnitCreated(libSCPL_gt_AutoWorkerProductionCheckWorkerSlotZerg, null, null, "SpawnLarva");
    TriggerAddEventUnitCreated(libSCPL_gt_AutoWorkerProductionCheckWorkerSlotZerg, null, null, "QueenSpawnLarva");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Production Check Vespene Harvester
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerProductionCheckVespeneHarvester_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_townHall;
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "Assimilator") || (UnitGetType(EventUnitProgressUnit()) == "Refinery")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_townHall = libSCPL_gf_PlayerTownHallClosest(UnitGetPosition(EventUnit()), lv_playerIndex);
    libSCPL_gf_AutoWorkerProduction(lv_townHall, lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerProductionCheckVespeneHarvester_Init () {
    libSCPL_gt_AutoWorkerProductionCheckVespeneHarvester = TriggerCreate("libSCPL_gt_AutoWorkerProductionCheckVespeneHarvester_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_AutoWorkerProductionCheckVespeneHarvester, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Production Check Vespene Harvester Zerg
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerProductionCheckVespeneHarvesterZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_townHall;
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Extractor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_townHall = libSCPL_gf_PlayerTownHallClosest(UnitGetPosition(EventUnit()), lv_playerIndex);
    libSCPL_gf_AutoWorkerProduction(lv_townHall, lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerProductionCheckVespeneHarvesterZerg_Init () {
    libSCPL_gt_AutoWorkerProductionCheckVespeneHarvesterZerg = TriggerCreate("libSCPL_gt_AutoWorkerProductionCheckVespeneHarvesterZerg_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_AutoWorkerProductionCheckVespeneHarvesterZerg, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Production Check Morph Construction Zerg
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_townHall;
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    if ((EventUnitAbility() == AbilityCommand("ZergBuild", 0))) {
        lv_townHall = libSCPL_gf_PlayerTownHallClosest(PlayerStartLocation(lv_playerIndex), lv_playerIndex);
    }

    lv_townHall = libSCPL_gf_PlayerTownHallClosest(UnitGetPosition(EventUnit()), lv_playerIndex);
    libSCPL_gf_AutoWorkerProduction(lv_townHall, lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg_Init () {
    libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg = TriggerCreate("libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 10), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 4), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 2), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 0), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 5), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 8), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 9), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 13), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 3), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 14), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 6), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 15), c_abilMorphStageWait, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg, null, AbilityCommand("ZergBuild", 7), c_abilMorphStageWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Production Check Town Hall Upgrade
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerProductionCheckTownHallUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_townHall;
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_townHall = EventUnit();
    libSCPL_gf_AutoWorkerProduction(lv_townHall, lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerProductionCheckTownHallUpgrade_Init () {
    libSCPL_gt_AutoWorkerProductionCheckTownHallUpgrade = TriggerCreate("libSCPL_gt_AutoWorkerProductionCheckTownHallUpgrade_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckTownHallUpgrade, null, AbilityCommand("UpgradeToOrbital", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckTownHallUpgrade, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckTownHallUpgrade, null, AbilityCommand("UpgradeToLair", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckTownHallUpgrade, null, AbilityCommand("UpgradeToHive", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Production Check Town Hall Land
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerProductionCheckTownHallLand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_townHall;
    unit lv_closestMinerals;
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_townHall = EventUnit();
    lv_closestMinerals = UnitGroupClosestToPoint(libSCPL_gf_MapHarvestableMinerals(), UnitGetPosition(lv_townHall));
    if ((DistanceBetweenPoints(UnitGetPosition(lv_townHall), UnitGetPosition(lv_closestMinerals)) <= libSCPL_gv_constants.lv_townHallResourceRadius)) {
        libSCPL_gf_AutoWorkerProduction(lv_townHall, lv_playerIndex);
        UnitIssueOrder(lv_townHall, OrderTargetingUnit(AbilityCommand("RallyCommand", 0), lv_closestMinerals), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerProductionCheckTownHallLand_Init () {
    libSCPL_gt_AutoWorkerProductionCheckTownHallLand = TriggerCreate("libSCPL_gt_AutoWorkerProductionCheckTownHallLand_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckTownHallLand, null, AbilityCommand("CommandCenterLand", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_AutoWorkerProductionCheckTownHallLand, null, AbilityCommand("OrbitalCommandLand", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Production Check Expansion
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerProductionCheckExpansion_Func (bool testConds, bool runActions) {
    string auto9E44F9EA_val;

    // Variable Declarations
    region lv_resourceRegion;
    unitgroup lv_resourceGroup;
    unit lv_resourceClosest;
    unit lv_townHall;
    int lv_playerIndex;
    int lv_expansionWorkerCount;
    point lv_expansionWorkerPoint;
    unitgroup lv_expansionWorkers;

    // Variable Initialization
    lv_resourceGroup = UnitGroupEmpty();
    lv_expansionWorkers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "CommandCenter") || (UnitGetType(EventUnitProgressUnit()) == "Nexus") || (UnitGetType(EventUnitProgressUnit()) == "Hatchery")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_expansionWorkerCount = 4;
    lv_townHall = EventUnitProgressUnit();
    lv_playerIndex = UnitGetOwner(lv_townHall);
    lv_resourceRegion = RegionCircle(UnitGetPosition(lv_townHall), libSCPL_gv_constants.lv_townHallResourceRadius);
    lv_resourceGroup = UnitGroup(null, c_playerAny, lv_resourceRegion, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_resourceGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Assimilator") || (UnitGetType(UnitGroupLoopCurrent()) == "Refinery") || (UnitGetType(UnitGroupLoopCurrent()) == "Extractor"))) {
            UnitGroupRemove(lv_resourceGroup, UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) < 1)) {
        return true;
    }
    lv_resourceClosest = UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_townHall));
    lv_expansionWorkerPoint = PointWithOffsetPolar(UnitGetPosition(lv_townHall), 2.5, AngleBetweenPoints(UnitGetPosition(lv_townHall), UnitGetPosition(lv_resourceClosest)));
    auto9E44F9EA_val = UnitGetType(EventUnitProgressUnit());
    if (auto9E44F9EA_val == "CommandCenter") {
        UnitIssueOrder(lv_townHall, Order(AbilityCommand("CommandCenterTrain", 0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_townHall, OrderTargetingUnit(AbilityCommand("RallyCommand", 0), lv_resourceClosest), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_expansionWorkerCount, "SCV", 0, lv_playerIndex, lv_expansionWorkerPoint);
        lv_expansionWorkers = UnitLastCreatedGroup();
    }
    else if (auto9E44F9EA_val == "Nexus") {
        UnitIssueOrder(lv_townHall, Order(AbilityCommand("NexusTrain", 0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_townHall, OrderTargetingUnit(AbilityCommand("RallyNexus", 0), lv_resourceClosest), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_expansionWorkerCount, "Probe", 0, lv_playerIndex, lv_expansionWorkerPoint);
        lv_expansionWorkers = UnitLastCreatedGroup();
    }
    else if (auto9E44F9EA_val == "Hatchery") {
        libSCPL_gf_AutoWorkerProductionZerg(lv_townHall, lv_playerIndex, 0);
        UnitIssueOrder(lv_townHall, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lv_resourceClosest), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_expansionWorkerCount, "Drone", 0, lv_playerIndex, lv_expansionWorkerPoint);
        lv_expansionWorkers = UnitLastCreatedGroup();
    }
    else {
    }
    UnitGroupIssueOrder(lv_expansionWorkers, OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), lv_resourceClosest), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerProductionCheckExpansion_Init () {
    libSCPL_gt_AutoWorkerProductionCheckExpansion = TriggerCreate("libSCPL_gt_AutoWorkerProductionCheckExpansion_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_AutoWorkerProductionCheckExpansion, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Vespene Tapped Transfer
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerVespeneTappedTransfer_Func (bool testConds, bool runActions) {
    int auto0ED17859_ae;
    int auto0ED17859_ai;

    // Variable Declarations
    unit lv_vespeneBuilding;
    unitgroup lv_vespeneWorkersPotential;
    int lv_vespeneWorkersAddition;
    unit lv_vespeneWorker;
    unit lv_workerTarget;
    int lv_workerIndex;
    int lv_playerIndex;

    // Variable Initialization
    lv_vespeneWorkersPotential = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "Assimilator") || (UnitGetType(EventUnitProgressUnit()) == "Refinery") || (UnitGetType(EventUnitProgressUnit()) == "Extractor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vespeneBuilding = EventUnitProgressUnit();
    lv_playerIndex = UnitGetOwner(lv_vespeneBuilding);
    lv_vespeneWorkersAddition = 3;
    lv_vespeneWorkersPotential = UnitGroup(null, lv_playerIndex, RegionCircle(UnitGetPosition(lv_vespeneBuilding), libSCPL_gv_constants.lv_townHallResourceRadius), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
    UnitGroupLoopBegin(lv_vespeneWorkersPotential);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_workerTarget = OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0));
        if (((UnitHasBehavior2(UnitGroupLoopCurrent(), "CarryHarvestableVespeneGeyserGas") == true) || (UnitHasBehavior2(UnitGroupLoopCurrent(), "CarryHarvestableVespeneGeyserGasProtoss") == true) || (UnitHasBehavior2(UnitGroupLoopCurrent(), "CarryHarvestableVespeneGeyserGasZerg") == true)) && ((UnitGetType(lv_workerTarget) == "Refinery") || (UnitGetType(lv_workerTarget) == "Extractor") || (UnitGetType(lv_workerTarget) == "Assimilator"))) {
            UnitGroupRemove(lv_vespeneWorkersPotential, UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    auto0ED17859_ae = lv_vespeneWorkersAddition;
    auto0ED17859_ai = 1;
    lv_workerIndex = 1;
    for ( ; ( (auto0ED17859_ai >= 0 && lv_workerIndex <= auto0ED17859_ae) || (auto0ED17859_ai <= 0 && lv_workerIndex >= auto0ED17859_ae) ) ; lv_workerIndex += auto0ED17859_ai ) {
        lv_vespeneWorker = UnitGroupClosestToPoint(lv_vespeneWorkersPotential, UnitGetPosition(lv_vespeneBuilding));
        UnitGroupRemove(lv_vespeneWorkersPotential, lv_vespeneWorker);
        UnitIssueOrder(lv_vespeneWorker, OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), lv_vespeneBuilding), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerVespeneTappedTransfer_Init () {
    libSCPL_gt_AutoWorkerVespeneTappedTransfer = TriggerCreate("libSCPL_gt_AutoWorkerVespeneTappedTransfer_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_AutoWorkerVespeneTappedTransfer, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Vespene Available Check
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerVespeneAvailableCheck_Func (bool testConds, bool runActions) {
    unitgroup auto6CD88D8A_g;
    int auto6CD88D8A_u;

    // Variable Declarations
    unit lv_vespeneBuildingBest;
    unitgroup lv_vespeneBuildings;
    unit lv_worker;
    unit lv_townHall;
    int lv_playerIndex;

    // Variable Initialization
    lv_vespeneBuildings = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUnitType() == "SCV") || (libNtve_gf_TriggeringProgressUnitType() == "Probe") || (libNtve_gf_TriggeringProgressUnitType() == "Drone")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_worker = EventUnitProgressUnit();
    lv_playerIndex = UnitGetOwner(EventUnitProgressUnit());
    lv_townHall = libSCPL_gf_PlayerTownHallClosest(UnitGetPosition(EventUnitProgressUnit()), lv_playerIndex);
    lv_vespeneBuildings = libSCPL_gf_PlayerTownHallVespeneTapped(lv_townHall, lv_playerIndex);
    auto6CD88D8A_g = lv_vespeneBuildings;
    auto6CD88D8A_u = 1;
    for ( ; auto6CD88D8A_u <= UnitGroupCount(auto6CD88D8A_g, c_unitCountAll) ; auto6CD88D8A_u += BoolToInt(lv_vespeneBuildingBest == UnitGroupUnit(auto6CD88D8A_g, auto6CD88D8A_u)) ) {
        lv_vespeneBuildingBest = UnitGroupUnit(auto6CD88D8A_g, auto6CD88D8A_u);
        if ((libSCPL_gf_PlayerTownHallWorkerVespenePERGEYSER(lv_vespeneBuildingBest, lv_playerIndex) < 3)) {
            UnitIssueOrder(lv_worker, OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), lv_vespeneBuildingBest), c_orderQueueReplace);
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerVespeneAvailableCheck_Init () {
    libSCPL_gt_AutoWorkerVespeneAvailableCheck = TriggerCreate("libSCPL_gt_AutoWorkerVespeneAvailableCheck_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_AutoWorkerVespeneAvailableCheck, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Set Harvest State
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerSetHarvestState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_targetUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_targetUnit = OrderGetTargetUnit(EventUnitOrder());
    libSCPL_gf_UnitChargeLinkSet(lv_unit, "Constructing", 0.0);
    if (((UnitHasBehavior2(lv_targetUnit, "MineralFieldMinerals") == true) || (UnitHasBehavior2(lv_targetUnit, "MineralFieldMinerals750") == true) || (UnitHasBehavior2(lv_targetUnit, "HighYieldMineralFieldMinerals") == true) || (UnitHasBehavior2(lv_targetUnit, "HighYieldMineralFieldMinerals750") == true) || (UnitHasBehavior2(lv_targetUnit, "MineralFieldMineralsNoRemove") == true))) {
        libSCPL_gf_UnitChargeLinkSet(lv_unit, "HarvestMinerals", 1.0);
        libSCPL_gf_UnitChargeLinkSet(lv_unit, "HarvestGas", 0.0);
    }
    else if ((libNtve_gf_UnitIsUnderConstruction(lv_targetUnit) == true)) {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    else if (((UnitHasBehavior2(lv_targetUnit, "HarvestableVespeneGeyserGas") == true) || (UnitHasBehavior2(lv_targetUnit, "HarvestableVespeneGeyserGasProtoss") == true) || (UnitHasBehavior2(lv_targetUnit, "HarvestableVespeneGeyserGasZerg") == true))) {
        libSCPL_gf_UnitChargeLinkSet(lv_unit, "HarvestMinerals", 0.0);
        libSCPL_gf_UnitChargeLinkSet(lv_unit, "HarvestGas", 1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerSetHarvestState_Init () {
    libSCPL_gt_AutoWorkerSetHarvestState = TriggerCreate("libSCPL_gt_AutoWorkerSetHarvestState_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetHarvestState, null, AbilityCommand("SCVHarvest", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetHarvestState, null, AbilityCommand("MULEGather", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetHarvestState, null, AbilityCommand("DroneHarvest", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetHarvestState, null, AbilityCommand("ProbeHarvest", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Set Harvest State None
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerSetHarvestStateNone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_targetUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Probe") || (UnitGetType(EventUnit()) == "SCV") || (UnitGetType(EventUnit()) == "Drone") || (UnitGetType(EventUnit()) == "MULE")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    libSCPL_gf_UnitChargeLinkSet(lv_unit, "HarvestMinerals", 0.0);
    libSCPL_gf_UnitChargeLinkSet(lv_unit, "HarvestGas", 0.0);
    libSCPL_gf_UnitChargeLinkSet(lv_unit, "Constructing", 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerSetHarvestStateNone_Init () {
    libSCPL_gt_AutoWorkerSetHarvestStateNone = TriggerCreate("libSCPL_gt_AutoWorkerSetHarvestStateNone_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetHarvestStateNone, null, AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Set Construction State
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerSetConstructionState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_targetUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Probe"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    libSCPL_gf_UnitChargeLinkSet(lv_unit, "Constructing", 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerSetConstructionState_Init () {
    libSCPL_gt_AutoWorkerSetConstructionState = TriggerCreate("libSCPL_gt_AutoWorkerSetConstructionState_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 2));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 14));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 11));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 5));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 4));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 3));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 0));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 7));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 1));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 12));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 13));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 9));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 10));
    TriggerAddEventUnitOrder(libSCPL_gt_AutoWorkerSetConstructionState, null, AbilityCommand("ProtossBuild", 6));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Worker Idle Harvest Resume
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoWorkerIdleHarvestResume_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Probe") || (UnitGetType(EventUnit()) == "SCV") || (UnitGetType(EventUnit()) == "Drone") || (UnitGetType(EventUnit()) == "MULE")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    libSCPL_gf_UnitChargeLinkSet(lv_unit, "Constructing", 0.0);
    if ((libSCPL_gf_UnitChargeLink(lv_unit, "HarvestMinerals") == 0.0) && (libSCPL_gf_UnitChargeLink(lv_unit, "HarvestGas") == 0.0)) {
    }
    else if (((UnitHasBehavior2(lv_unit, "CarryHarvestableVespeneGeyserGas") == true) || (UnitHasBehavior2(lv_unit, "CarryHarvestableVespeneGeyserGasProtoss") == true) || (UnitHasBehavior2(lv_unit, "CarryHarvestableVespeneGeyserGasZerg") == true) || (UnitHasBehavior2(lv_unit, "CarryHighYieldMineralFieldMinerals") == true) || (UnitHasBehavior2(lv_unit, "CarryMineralFieldMinerals") == true) || (UnitHasBehavior2(lv_unit, "CarryMineralFieldMineralsNoRemove") == true))) {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("DroneHarvest", 1)), c_orderQueueReplace);
    }
    else if ((libSCPL_gf_UnitChargeLink(lv_unit, "HarvestMinerals") == 1)) {
        UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(libSCPL_gf_PlayerHarvestableMinerals(lv_playerIndex), UnitGetPosition(lv_unit))), c_orderQueueReplace);
    }
    else if ((libSCPL_gf_UnitChargeLink(lv_unit, "HarvestGas") == 1)) {
        UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(libSCPL_gf_PlayerHarvestableGas(lv_playerIndex), UnitGetPosition(lv_unit))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoWorkerIdleHarvestResume_Init () {
    libSCPL_gt_AutoWorkerIdleHarvestResume = TriggerCreate("libSCPL_gt_AutoWorkerIdleHarvestResume_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_AutoWorkerIdleHarvestResume, null, "GameWorkerIdle", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Life And Shield Scaling On Creation
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UnitLifeAndShieldScalingOnCreation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GameIncreasedLifeAndShields", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UnitLifeAndShieldScalingOnCreation_Init () {
    libSCPL_gt_UnitLifeAndShieldScalingOnCreation = TriggerCreate("libSCPL_gt_UnitLifeAndShieldScalingOnCreation_Func");
    TriggerAddEventUnitRegion(libSCPL_gt_UnitLifeAndShieldScalingOnCreation, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gate Research Upgrade All Gateways
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_WarpGateResearchUpgradeAllGateways_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerGateways;
    int lv_playerIndex;

    // Variable Initialization
    lv_playerGateways = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "WarpGateResearch"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_playerGateways = UnitGroup("Gateway", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libSCPL_gf_WarpGateUpdateUI(lv_playerIndex);
    UnitGroupLoopBegin(lv_playerGateways);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("UpgradeToWarpGate", 0)), c_orderQueueReplace);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "GameWarpGateUpgradeBehavior", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_WarpGateResearchUpgradeAllGateways_Init () {
    libSCPL_gt_WarpGateResearchUpgradeAllGateways = TriggerCreate("libSCPL_gt_WarpGateResearchUpgradeAllGateways_Func");
    TriggerAddEventUnitResearchProgress(libSCPL_gt_WarpGateResearchUpgradeAllGateways, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gate Research Gateway Built
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_WarpGateResearchGatewayBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unitConstructed;
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Gateway"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitProgressUnit()), "WarpGateResearch", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitConstructed = EventUnitProgressUnit();
    UnitBehaviorAdd(lv_unitConstructed, "GameWarpGateUpgradeBehavior", lv_unitConstructed, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_WarpGateResearchGatewayBuilt_Init () {
    libSCPL_gt_WarpGateResearchGatewayBuilt = TriggerCreate("libSCPL_gt_WarpGateResearchGatewayBuilt_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_WarpGateResearchGatewayBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gate Charge Count Add
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_WarpGateChargeCountAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    TechTreeUpgradeAddLevel(lv_playerIndex, "GameProtossWarpGateCount", 1);
    libSCPL_gf_TriggerEventRegisterUnitDies(libSCPL_gt_WarpGateChargeCountRemove, lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_WarpGateChargeCountAdd_Init () {
    libSCPL_gt_WarpGateChargeCountAdd = TriggerCreate("libSCPL_gt_WarpGateChargeCountAdd_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_WarpGateChargeCountAdd, null, "GameWarpGateCount", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gate Charge Count Remove
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_WarpGateChargeCountRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "GameWarpGateCount") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    TechTreeUpgradeAddLevel(lv_playerIndex, "GameProtossWarpGateCount", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_WarpGateChargeCountRemove_Init () {
    libSCPL_gt_WarpGateChargeCountRemove = TriggerCreate("libSCPL_gt_WarpGateChargeCountRemove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gates Charge Restore
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_WarpGatesChargeRestore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chargeCooldown;
    unit lv_warpGate;
    int lv_warpTrainIndex;
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    if ((UnitGetType(EventUnitCreatedUnit()) == "Zealot")) {
        lv_warpTrainIndex = 0;
        lv_chargeCooldown = 28.0;
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "Stalker")) {
        lv_warpTrainIndex = 1;
        lv_chargeCooldown = 32.0;
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "HighTemplar")) {
        lv_warpTrainIndex = 3;
        lv_chargeCooldown = 45.0;
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "DarkTemplar")) {
        lv_warpTrainIndex = 4;
        lv_chargeCooldown = 45.0;
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "Sentry")) {
        lv_warpTrainIndex = 5;
        lv_chargeCooldown = 32.0;
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "Adept")) {
        lv_warpTrainIndex = 6;
        lv_chargeCooldown = 28.0;
    }
    libSCPL_gf_WarpGatesCooldownSet(lv_chargeCooldown, lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_WarpGatesChargeRestore_Init () {
    libSCPL_gt_WarpGatesChargeRestore = TriggerCreate("libSCPL_gt_WarpGatesChargeRestore_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_WarpGatesChargeRestore, null, "WarpGateTrainUCB", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nexus Charge Count Add
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_NexusChargeCountAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    TechTreeUpgradeAddLevel(lv_playerIndex, "GameProtossNexusCount", 1);
    libSCPL_gf_TriggerEventRegisterUnitDies(libSCPL_gt_NexusChargeCountRemove, lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_NexusChargeCountAdd_Init () {
    libSCPL_gt_NexusChargeCountAdd = TriggerCreate("libSCPL_gt_NexusChargeCountAdd_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_NexusChargeCountAdd, null, "GameNexusCount", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nexus Charge Count Remove
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_NexusChargeCountRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "GameWarpGateCount") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    TechTreeUpgradeAddLevel(lv_playerIndex, "GameProtossNexusCount", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_NexusChargeCountRemove_Init () {
    libSCPL_gt_NexusChargeCountRemove = TriggerCreate("libSCPL_gt_NexusChargeCountRemove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Archon Morph
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkArchonMorph_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "GameUCBArchonChargeLink", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkArchonMorph_Init () {
    libSCPL_gt_UCBChargeLinkArchonMorph = TriggerCreate("libSCPL_gt_UCBChargeLinkArchonMorph_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkArchonMorph, null, AbilityCommand("ArchonWarp", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barracks Train StartStop
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_BarracksTrainStartStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_progressUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_progressUnit = EventUnit();
    libSCPL_gf_UnitStatusEvaluateProgressBar(lv_progressUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_BarracksTrainStartStop_Init () {
    libSCPL_gt_BarracksTrainStartStop = TriggerCreate("libSCPL_gt_BarracksTrainStartStop_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 3), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 2), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 1), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 3), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 2), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libSCPL_gt_BarracksTrainStartStop, null, AbilityCommand("BarracksTrain", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MuleHarvestNearestResoures
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_MuleHarvestNearestResoures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_resources;
    fixed lv_resourceDistanceClosest;
    fixed lv_resourceDistanceMaximum;
    fixed lv_muleExpireDelay;

    // Variable Initialization
    lv_resources = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "MULE"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceDistanceMaximum = 2.0;
    lv_unit = EventUnitCreatedUnit();
    lv_resources = libSCPL_gf_PlayerHarvestableMinerals(UnitGetOwner(lv_unit));
    lv_muleExpireDelay = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CalldownMULECreatePersistent", "ExpireDelay", c_playerAny));
    lv_resourceDistanceClosest = DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupClosestToPoint(lv_resources, UnitGetPosition(lv_unit))));
    if ((lv_resourceDistanceClosest <= lv_resourceDistanceMaximum)) {
        Wait((lv_muleExpireDelay + 0.0625), c_timeGame);
        UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("MULEGather", 0), UnitGroupClosestToPoint(lv_resources, UnitGetPosition(lv_unit))), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_MuleHarvestNearestResoures_Init () {
    libSCPL_gt_MuleHarvestNearestResoures = TriggerCreate("libSCPL_gt_MuleHarvestNearestResoures_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_MuleHarvestNearestResoures, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Barracks Addon Create
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkBarracksAddonCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_chargeLink;
    fixed lv_charges;

    // Variable Initialization
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_chargeLink = ("UCB/" + "Barracks" + "Addon");
    lv_charges = PlayerGetChargeUsed(lv_playerIndex, lv_chargeLink);
    if ((lv_charges == libSCPL_gv_cHARGEMAX) && (TechTreeBehaviorCount(lv_playerIndex, EventUnitBehavior(), c_techCountCompleteOnly) == 1)) {
        PlayerAddChargeUsed(lv_playerIndex, lv_chargeLink, -1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkBarracksAddonCreate_Init () {
    libSCPL_gt_UCBChargeLinkBarracksAddonCreate = TriggerCreate("libSCPL_gt_UCBChargeLinkBarracksAddonCreate_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_UCBChargeLinkBarracksAddonCreate, null, "GameUCBBarracksAddon", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Barracks Addon Destroy
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkBarracksAddonDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_chargeLink;
    fixed lv_charges;

    // Variable Initialization
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_chargeLink = ("UCB/" + "Barracks" + "Addon");
    lv_charges = PlayerGetChargeUsed(lv_playerIndex, lv_chargeLink);
    if ((lv_charges == (libSCPL_gv_cHARGEMAX - 1.0)) && (TechTreeBehaviorCount(lv_playerIndex, EventUnitBehavior(), c_techCountCompleteOnly) == 0)) {
        PlayerAddChargeUsed(lv_playerIndex, lv_chargeLink, 1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkBarracksAddonDestroy_Init () {
    libSCPL_gt_UCBChargeLinkBarracksAddonDestroy = TriggerCreate("libSCPL_gt_UCBChargeLinkBarracksAddonDestroy_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_UCBChargeLinkBarracksAddonDestroy, null, "GameUCBBarracksAddon", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Factory Addon Create
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkFactoryAddonCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_chargeLink;
    fixed lv_charges;

    // Variable Initialization
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_chargeLink = ("UCB/" + "Factory" + "Addon");
    lv_charges = PlayerGetChargeUsed(lv_playerIndex, lv_chargeLink);
    if ((lv_charges == libSCPL_gv_cHARGEMAX) && (TechTreeBehaviorCount(lv_playerIndex, EventUnitBehavior(), c_techCountCompleteOnly) == 1)) {
        PlayerAddChargeUsed(lv_playerIndex, lv_chargeLink, -1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkFactoryAddonCreate_Init () {
    libSCPL_gt_UCBChargeLinkFactoryAddonCreate = TriggerCreate("libSCPL_gt_UCBChargeLinkFactoryAddonCreate_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_UCBChargeLinkFactoryAddonCreate, null, "GameUCBFactoryAddon", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Factory Addon Destroy
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkFactoryAddonDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_chargeLink;
    fixed lv_charges;

    // Variable Initialization
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_chargeLink = ("UCB/" + "Factory" + "Addon");
    lv_charges = PlayerGetChargeUsed(lv_playerIndex, lv_chargeLink);
    if ((lv_charges == (libSCPL_gv_cHARGEMAX - 1.0)) && (TechTreeBehaviorCount(lv_playerIndex, EventUnitBehavior(), c_techCountCompleteOnly) == 0)) {
        PlayerAddChargeUsed(lv_playerIndex, lv_chargeLink, 1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkFactoryAddonDestroy_Init () {
    libSCPL_gt_UCBChargeLinkFactoryAddonDestroy = TriggerCreate("libSCPL_gt_UCBChargeLinkFactoryAddonDestroy_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_UCBChargeLinkFactoryAddonDestroy, null, "GameUCBFactoryAddon", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Starport Addon Create
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkStarportAddonCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_chargeLink;
    fixed lv_charges;

    // Variable Initialization
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_chargeLink = ("UCB/" + "Starport" + "Addon");
    lv_charges = PlayerGetChargeUsed(lv_playerIndex, lv_chargeLink);
    if ((lv_charges == libSCPL_gv_cHARGEMAX) && (TechTreeBehaviorCount(lv_playerIndex, EventUnitBehavior(), c_techCountCompleteOnly) == 1)) {
        PlayerAddChargeUsed(lv_playerIndex, lv_chargeLink, -1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkStarportAddonCreate_Init () {
    libSCPL_gt_UCBChargeLinkStarportAddonCreate = TriggerCreate("libSCPL_gt_UCBChargeLinkStarportAddonCreate_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_UCBChargeLinkStarportAddonCreate, null, "GameUCBStarportAddon", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Starport Addon Destroy
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkStarportAddonDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_chargeLink;
    fixed lv_charges;

    // Variable Initialization
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_chargeLink = ("UCB/" + "Starport" + "Addon");
    lv_charges = PlayerGetChargeUsed(lv_playerIndex, lv_chargeLink);
    if ((lv_charges == (libSCPL_gv_cHARGEMAX - 1.0)) && (TechTreeBehaviorCount(lv_playerIndex, EventUnitBehavior(), c_techCountCompleteOnly) == 0)) {
        PlayerAddChargeUsed(lv_playerIndex, lv_chargeLink, 1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkStarportAddonDestroy_Init () {
    libSCPL_gt_UCBChargeLinkStarportAddonDestroy = TriggerCreate("libSCPL_gt_UCBChargeLinkStarportAddonDestroy_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_UCBChargeLinkStarportAddonDestroy, null, "GameUCBStarportAddon", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Command Center Morph Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkCommandCenterMorphStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "GameUCBCommandCenterChargeLink", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkCommandCenterMorphStart_Init () {
    libSCPL_gt_UCBChargeLinkCommandCenterMorphStart = TriggerCreate("libSCPL_gt_UCBChargeLinkCommandCenterMorphStart_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkCommandCenterMorphStart, null, AbilityCommand("UpgradeToOrbital", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkCommandCenterMorphStart, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Command Center Morph Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkCommandCenterMorphCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GameUCBCommandCenterChargeLink", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkCommandCenterMorphCancel_Init () {
    libSCPL_gt_UCBChargeLinkCommandCenterMorphCancel = TriggerCreate("libSCPL_gt_UCBChargeLinkCommandCenterMorphCancel_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkCommandCenterMorphCancel, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkCommandCenterMorphCancel, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Auto Wall Raise
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAutoWallRaise_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    libSCPL_gv_player[lv_playerIndex].lv_globalTerran_AutoWallToggle = false;
    lv_unitGroup = UnitGroup("SupplyDepotLowered", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoWallRaiseManual", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("AutoWallToggleUCBOffHidden", 0)), c_orderQueueReplace);
    libSCPL_gf_SCPBankOptionSave(("GlobalToggleTerranAutoWall"), lv_playerIndex, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAutoWallRaise_Init () {
    libSCPL_gt_UCBAutoWallRaise = TriggerCreate("libSCPL_gt_UCBAutoWallRaise_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBAutoWallRaise, null, AbilityCommand("AutoWallRaiseUCB", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Auto Wall Lower
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAutoWallLower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_unitGroup = UnitGroup("SupplyDepot", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoWallLowerManual", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAutoWallLower_Init () {
    libSCPL_gt_UCBAutoWallLower = TriggerCreate("libSCPL_gt_UCBAutoWallLower_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBAutoWallLower, null, AbilityCommand("AutoWallLowerUCB", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Auto Wall Toggle On
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAutoWallToggleOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    libSCPL_gv_player[lv_playerIndex].lv_globalTerran_AutoWallToggle = true;
    lv_unitGroup = UnitGroup("SupplyDepot", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoWallToggleOnHidden", 0)), c_orderQueueReplace);
    lv_unitGroup = UnitGroup("SupplyDepotLowered", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoWallToggleOnHidden", 0)), c_orderQueueReplace);
    libSCPL_gf_SCPBankOptionSave(("GlobalToggleTerranAutoWall"), lv_playerIndex, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAutoWallToggleOn_Init () {
    libSCPL_gt_UCBAutoWallToggleOn = TriggerCreate("libSCPL_gt_UCBAutoWallToggleOn_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libSCPL_gt_UCBAutoWallToggleOn, null, AbilityCommand("AutoWallToggleUCB", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Auto Wall Toggle Off
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAutoWallToggleOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_unitGroup = UnitGroup("SupplyDepot", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoWallToggleOffHidden", 0)), c_orderQueueReplace);
    lv_unitGroup = UnitGroup("SupplyDepotLowered", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoWallToggleOffHidden", 0)), c_orderQueueReplace);
    libSCPL_gf_SCPBankOptionSave(("GlobalToggleTerranAutoWall"), lv_playerIndex, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAutoWallToggleOff_Init () {
    libSCPL_gt_UCBAutoWallToggleOff = TriggerCreate("libSCPL_gt_UCBAutoWallToggleOff_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libSCPL_gt_UCBAutoWallToggleOff, null, AbilityCommand("AutoWallToggleUCB", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Auto Wall Unit Created
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_PlayerAutoWallUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    if ((libSCPL_gv_player[lv_playerIndex].lv_globalTerran_AutoWallToggle == false)) {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("AutoWallToggleOffHidden", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_PlayerAutoWallUnitCreated_Init () {
    libSCPL_gt_PlayerAutoWallUnitCreated = TriggerCreate("libSCPL_gt_PlayerAutoWallUnitCreated_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_PlayerAutoWallUnitCreated, null, AbilityCommand("AutoWallConstructionComplete", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Addon Test
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAddonTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_unitGroup;
    unit lv_testUnit;
    string lv_testAbility;
    unitgroup lv_addonGroup;
    order lv_addonOrder;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();
    lv_testAbility = "";
    lv_addonGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lv_playerIndex = DataTableGetInt(false, TriggerEventParamName("GenericEventTerranAddonTest", "TestPlayer"));
    lv_unitGroup = DataTableGetUnitGroup(false, TriggerEventParamName("GenericEventTerranAddonTest", "TestUnits"));
    lv_testAbility = DataTableGetString(false, TriggerEventParamName("GenericEventTerranAddonTest", "TestAbility"));
    lv_testUnit = libSCPL_gf_UnitGroupBestUnit(lv_unitGroup);
    if (((UnitOrderHasAbil(lv_testUnit, "BarracksAddOns") == true) || (UnitOrderHasAbil(lv_testUnit, "FactoryAddOns") == true) || (UnitOrderHasAbil(lv_testUnit, "StarportAddOns") == true))) {
        return true;
    }
    if ((lv_testAbility == "BarracksReactorMorphUCB")) {
        lv_addonOrder = OrderTargetingPoint(AbilityCommand("BarracksAddOns", 1), Point(0.0, 0.0));
    }
    else if ((lv_testAbility == "FactoryReactorMorphUCB")) {
        lv_addonOrder = OrderTargetingPoint(AbilityCommand("FactoryAddOns", 1), Point(0.0, 0.0));
    }
    else if ((lv_testAbility == "StarportReactorMorphUCB")) {
        lv_addonOrder = OrderTargetingPoint(AbilityCommand("StarportAddOns", 1), Point(0.0, 0.0));
    }
    else if ((lv_testAbility == "BarracksTechLabMorphUCB")) {
        lv_addonOrder = OrderTargetingPoint(AbilityCommand("BarracksAddOns", 0), Point(0.0, 0.0));
    }
    else if ((lv_testAbility == "FactoryTechLabMorphUCB")) {
        lv_addonOrder = OrderTargetingPoint(AbilityCommand("FactoryAddOns", 0), Point(0.0, 0.0));
    }
    else if ((lv_testAbility == "StarportTechLabMorphUCB")) {
        lv_addonOrder = OrderTargetingPoint(AbilityCommand("StarportAddOns", 0), Point(0.0, 0.0));
    }
    lv_addonGroup = libNtve_gf_ConvertUnitToUnitGroup(lv_testUnit);
    UISetTargetingOrder(PlayerGroupSingle(lv_playerIndex), lv_addonGroup, lv_addonOrder, false);
    libSCPL_gv_player[lv_playerIndex].lv_isInTargetingMode = true;
    while ((libSCPL_gv_player[lv_playerIndex].lv_isInTargetingMode == true)) {
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAddonTest_Init () {
    libSCPL_gt_UCBAddonTest = TriggerCreate("libSCPL_gt_UCBAddonTest_Func");
    TriggerAddEventGeneric(libSCPL_gt_UCBAddonTest, "GenericEventTerranAddonTest");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Addon Test End
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAddonTestEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gv_player[EventPlayer()].lv_isInTargetingMode = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAddonTestEnd_Init () {
    libSCPL_gt_UCBAddonTestEnd = TriggerCreate("libSCPL_gt_UCBAddonTestEnd_Func");
    TriggerAddEventTargetModeUpdate(libSCPL_gt_UCBAddonTestEnd, c_playerAny, AbilityCommand("BarracksAddOns", 1), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libSCPL_gt_UCBAddonTestEnd, c_playerAny, AbilityCommand("BarracksAddOns", 0), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libSCPL_gt_UCBAddonTestEnd, c_playerAny, AbilityCommand("FactoryAddOns", 1), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libSCPL_gt_UCBAddonTestEnd, c_playerAny, AbilityCommand("FactoryAddOns", 0), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libSCPL_gt_UCBAddonTestEnd, c_playerAny, AbilityCommand("StarportAddOns", 1), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libSCPL_gt_UCBAddonTestEnd, c_playerAny, AbilityCommand("StarportAddOns", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Zerg Nydus Worm Placement Redirect
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_PlayerZergNydusWormPlacementRedirect_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NydusNetwork"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("BuildNydusCanal", 0), OrderGetTargetPoint(EventUnitOrder())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_PlayerZergNydusWormPlacementRedirect_Init () {
    libSCPL_gt_PlayerZergNydusWormPlacementRedirect = TriggerCreate("libSCPL_gt_PlayerZergNydusWormPlacementRedirect_Func");
    TriggerAddEventUnitOrder(libSCPL_gt_PlayerZergNydusWormPlacementRedirect, null, AbilityCommand("BuildNydusCanalUCB", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Creep Tumor Lineage Parent
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoCreepTumorLineageParent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lineageParent;
    int lv_playerIndex;
    int lv_lineageIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lineageParent = EventUnitCreatedUnit();
    lv_playerIndex = UnitGetOwner(lv_lineageParent);
    libSCPL_gv_player[lv_playerIndex].lv_globalZerg_AutoCreepLineageCount += 1;
    lv_lineageIndex = libSCPL_gv_player[lv_playerIndex].lv_globalZerg_AutoCreepLineageCount;
    if ((lv_lineageIndex < 256)) {
        libSCPL_gv_player[lv_playerIndex].lv_globalZerg_AutoCreepLineage[lv_lineageIndex].lv_zzParent = lv_lineageParent;
        libSCPL_gv_player[lv_playerIndex].lv_globalZerg_AutoCreepLineage[lv_lineageIndex].lv_head = lv_lineageParent;
        UnitGroupAdd(libSCPL_gv_player[lv_playerIndex].lv_globalZerg_AutoCreepLineage[lv_lineageIndex].lv_zzUnitGroup, lv_lineageParent);
        libSCPL_gf_UnitChargeLinkSet(lv_lineageParent, "CreepParentIndex", lv_lineageIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoCreepTumorLineageParent_Init () {
    libSCPL_gt_AutoCreepTumorLineageParent = TriggerCreate("libSCPL_gt_AutoCreepTumorLineageParent_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_AutoCreepTumorLineageParent, null, "QueenBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Creep Tumor Lineage Spread
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoCreepTumorLineageSpread_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_creepNode;
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_creepNode = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_creepNode);
    libSCPL_gf_AutoCreepEvaluateLineageTargets(lv_playerIndex);
    libSCPL_gf_AutoCreepLineageSpread(lv_playerIndex, lv_creepNode);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoCreepTumorLineageSpread_Init () {
    libSCPL_gt_AutoCreepTumorLineageSpread = TriggerCreate("libSCPL_gt_AutoCreepTumorLineageSpread_Func");
    TriggerAddEventUnitDamaged(libSCPL_gt_AutoCreepTumorLineageSpread, null, c_unitDamageTypeAny, c_unitDamageEither, "GameAutoCreepSpreadHook");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Creep Tumor Lineage Child
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoCreepTumorLineageChild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nodeParent;
    unit lv_node;
    int lv_playerIndex;
    int lv_lineageIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_node = EventUnitCreatedUnit();
    lv_nodeParent = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_nodeParent);
    lv_lineageIndex = FixedToInt(libSCPL_gf_UnitChargeLink(lv_nodeParent, "CreepParentIndex"));
    libSCPL_gv_player[lv_playerIndex].lv_globalZerg_AutoCreepLineage[lv_lineageIndex].lv_head = lv_node;
    UnitGroupAdd(libSCPL_gv_player[lv_playerIndex].lv_globalZerg_AutoCreepLineage[lv_lineageIndex].lv_zzUnitGroup, lv_node);
    libSCPL_gf_UnitChargeLinkSet(lv_node, "CreepParentIndex", lv_lineageIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoCreepTumorLineageChild_Init () {
    libSCPL_gt_AutoCreepTumorLineageChild = TriggerCreate("libSCPL_gt_AutoCreepTumorLineageChild_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_AutoCreepTumorLineageChild, null, "CreepTumorBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Creep Tumor Node Target Reached
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoCreepTumorNodeTargetReached_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_nodeIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GameAutoCreepNodeTarget"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0));
    UnitGroupRemove(libSCPL_gv_player[lv_playerIndex].lv_globalZerg_AutoCreepNodeTargets, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoCreepTumorNodeTargetReached_Init () {
    libSCPL_gt_AutoCreepTumorNodeTargetReached = TriggerCreate("libSCPL_gt_AutoCreepTumorNodeTargetReached_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_AutoCreepTumorNodeTargetReached, null, "GameAutoCreepNodeTargetCapped", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AutoCreepDebug Destroy
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_AutoCreepDebugDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitTag;
    string lv_key;
    int lv_textTag;

    // Variable Initialization
    lv_key = "";
    lv_textTag = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CreepTumorBurrowed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitTag = UnitGetTag(EventUnit());
    lv_key = ("ACS-" + IntToString(lv_unitTag));
    lv_textTag = libNtve_gf_ValueFromDataTableTextTag(true, lv_key);
    TextTagDestroy(lv_textTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_AutoCreepDebugDestroy_Init () {
    libSCPL_gt_AutoCreepDebugDestroy = TriggerCreate("libSCPL_gt_AutoCreepDebugDestroy_Func");
    TriggerAddEventUnitDied(libSCPL_gt_AutoCreepDebugDestroy, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Hydralisk Den Morph Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkHydraliskDenMorphStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "GameUCBHydraliskDenChargeLink", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkHydraliskDenMorphStart_Init () {
    libSCPL_gt_UCBChargeLinkHydraliskDenMorphStart = TriggerCreate("libSCPL_gt_UCBChargeLinkHydraliskDenMorphStart_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkHydraliskDenMorphStart, null, AbilityCommand("UpgradeToLurkerDenMP", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Hydralisk Den Morph Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkHydraliskDenMorphCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GameUCBHydraliskDenChargeLink", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkHydraliskDenMorphCancel_Init () {
    libSCPL_gt_UCBChargeLinkHydraliskDenMorphCancel = TriggerCreate("libSCPL_gt_UCBChargeLinkHydraliskDenMorphCancel_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkHydraliskDenMorphCancel, null, AbilityCommand("UpgradeToLurkerDenMP", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Spire Morph Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkSpireMorphStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "GameUCBSpireChargeLink", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkSpireMorphStart_Init () {
    libSCPL_gt_UCBChargeLinkSpireMorphStart = TriggerCreate("libSCPL_gt_UCBChargeLinkSpireMorphStart_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkSpireMorphStart, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Spire Morph Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkSpireMorphCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GameUCBSpireChargeLink", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkSpireMorphCancel_Init () {
    libSCPL_gt_UCBChargeLinkSpireMorphCancel = TriggerCreate("libSCPL_gt_UCBChargeLinkSpireMorphCancel_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkSpireMorphCancel, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Hatchery Morph Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkHatcheryMorphStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "GameUCBHatcheryChargeLink", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkHatcheryMorphStart_Init () {
    libSCPL_gt_UCBChargeLinkHatcheryMorphStart = TriggerCreate("libSCPL_gt_UCBChargeLinkHatcheryMorphStart_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkHatcheryMorphStart, null, AbilityCommand("UpgradeToLair", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Hatchery Morph Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkHatcheryMorphCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GameUCBHatcheryChargeLink", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkHatcheryMorphCancel_Init () {
    libSCPL_gt_UCBChargeLinkHatcheryMorphCancel = TriggerCreate("libSCPL_gt_UCBChargeLinkHatcheryMorphCancel_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkHatcheryMorphCancel, null, AbilityCommand("UpgradeToLair", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Lair Morph Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkLairMorphStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "GameUCBLairChargeLink", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkLairMorphStart_Init () {
    libSCPL_gt_UCBChargeLinkLairMorphStart = TriggerCreate("libSCPL_gt_UCBChargeLinkLairMorphStart_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkLairMorphStart, null, AbilityCommand("UpgradeToHive", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Lair Morph Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkLairMorphCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GameUCBLairChargeLink", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkLairMorphCancel_Init () {
    libSCPL_gt_UCBChargeLinkLairMorphCancel = TriggerCreate("libSCPL_gt_UCBChargeLinkLairMorphCancel_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkLairMorphCancel, null, AbilityCommand("UpgradeToHive", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Zergling Morph Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkZerglingMorphStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    UnitBehaviorRemove(EventUnit(), "GameUCBZerglingChargeLink", 1);
    if ((TechTreeBehaviorCount(lv_playerIndex, "GameUCBZerglingChargeLink", c_techCountCompleteOnly) == 0)) {
        PlayerAddChargeUsed(lv_playerIndex, "UCB/Zergling", 1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkZerglingMorphStart_Init () {
    libSCPL_gt_UCBChargeLinkZerglingMorphStart = TriggerCreate("libSCPL_gt_UCBChargeLinkZerglingMorphStart_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkZerglingMorphStart, null, AbilityCommand("MorphZerglingToBaneling", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Zergling Morph Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkZerglingMorphCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GameUCBZerglingChargeLink", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkZerglingMorphCancel_Init () {
    libSCPL_gt_UCBChargeLinkZerglingMorphCancel = TriggerCreate("libSCPL_gt_UCBChargeLinkZerglingMorphCancel_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkZerglingMorphCancel, null, AbilityCommand("MorphZerglingToBaneling", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Overlord Morph Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkOverlordMorphStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    UnitBehaviorRemove(EventUnit(), "GameUCBOverlordChargeLink", 1);
    UnitBehaviorRemove(EventUnit(), "GameUCBOverlordOrTransportChargeLink", 1);
    if ((TechTreeBehaviorCount(lv_playerIndex, "GameUCBOverlordChargeLink", c_techCountCompleteOnly) == 0) && (PlayerGetChargeUsed(lv_playerIndex, "UCB/Overlord") != 0.0)) {
        libNtve_gf_PlayerRemoveChargeUsed(lv_playerIndex, "UCB/Overlord");
        PlayerAddChargeUsed(lv_playerIndex, "UCB/Overlord", 999.0);
    }
    if ((TechTreeBehaviorCount(lv_playerIndex, "GameUCBOverlordOrTransportChargeLink", c_techCountCompleteOnly) == 0) && (PlayerGetChargeUsed(lv_playerIndex, "UCB/OverlordT") != 0.0)) {
        libNtve_gf_PlayerRemoveChargeUsed(lv_playerIndex, "UCB/OverlordT");
        PlayerAddChargeUsed(lv_playerIndex, "UCB/OverlordT", 999.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkOverlordMorphStart_Init () {
    libSCPL_gt_UCBChargeLinkOverlordMorphStart = TriggerCreate("libSCPL_gt_UCBChargeLinkOverlordMorphStart_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkOverlordMorphStart, null, AbilityCommand("MorphToTransportOverlord", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkOverlordMorphStart, null, AbilityCommand("MorphToOverseer", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Overlord Morph Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkOverlordMorphCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GameUCBOverlordOrTransportChargeLink", EventUnit(), 1);
    if ((UnitGetType(EventUnit()) == "Overlord")) {
        UnitBehaviorAdd(EventUnit(), "GameUCBOverlordChargeLink", EventUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkOverlordMorphCancel_Init () {
    libSCPL_gt_UCBChargeLinkOverlordMorphCancel = TriggerCreate("libSCPL_gt_UCBChargeLinkOverlordMorphCancel_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkOverlordMorphCancel, null, AbilityCommand("MorphToTransportOverlord", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkOverlordMorphCancel, null, AbilityCommand("MorphToOverseer", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Ravager Morph Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkRavagerMorphStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_chargeLink;

    // Variable Initialization
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_chargeLink = "UCB/Ravager";
    UnitBehaviorRemove(EventUnit(), "GameUCBRavagerChargeLink", 1);
    if ((TechTreeBehaviorCount(lv_playerIndex, "GameUCBRavagerChargeLink", c_techCountCompleteOnly) == 0) && (PlayerGetChargeUsed(lv_playerIndex, lv_chargeLink) != 0.0)) {
        libNtve_gf_PlayerRemoveChargeUsed(lv_playerIndex, lv_chargeLink);
        PlayerAddChargeUsed(lv_playerIndex, lv_chargeLink, 999.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkRavagerMorphStart_Init () {
    libSCPL_gt_UCBChargeLinkRavagerMorphStart = TriggerCreate("libSCPL_gt_UCBChargeLinkRavagerMorphStart_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkRavagerMorphStart, null, AbilityCommand("MorphToRavager", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Ravager Morph Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkRavagerMorphCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GameUCBRavagerChargeLink", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkRavagerMorphCancel_Init () {
    libSCPL_gt_UCBChargeLinkRavagerMorphCancel = TriggerCreate("libSCPL_gt_UCBChargeLinkRavagerMorphCancel_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkRavagerMorphCancel, null, AbilityCommand("MorphToRavager", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Lurker Morph Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkLurkerMorphStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_chargeLink;

    // Variable Initialization
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_chargeLink = "UCB/Lurker";
    UnitBehaviorRemove(EventUnit(), "GameUCBLurkerChargeLink", 1);
    if ((TechTreeBehaviorCount(lv_playerIndex, "GameUCBLurkerChargeLink", c_techCountCompleteOnly) == 0) && (PlayerGetChargeUsed(lv_playerIndex, lv_chargeLink) != 0.0)) {
        libNtve_gf_PlayerRemoveChargeUsed(lv_playerIndex, lv_chargeLink);
        PlayerAddChargeUsed(lv_playerIndex, lv_chargeLink, 999.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkLurkerMorphStart_Init () {
    libSCPL_gt_UCBChargeLinkLurkerMorphStart = TriggerCreate("libSCPL_gt_UCBChargeLinkLurkerMorphStart_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkLurkerMorphStart, null, AbilityCommand("MorphToLurker", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Lurker Morph Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkLurkerMorphCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GameUCBLurkerChargeLink", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkLurkerMorphCancel_Init () {
    libSCPL_gt_UCBChargeLinkLurkerMorphCancel = TriggerCreate("libSCPL_gt_UCBChargeLinkLurkerMorphCancel_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkLurkerMorphCancel, null, AbilityCommand("MorphToLurker", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Broodlord Morph Start
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkBroodlordMorphStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_chargeLink;

    // Variable Initialization
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_chargeLink = "UCB/Broodlord";
    UnitBehaviorRemove(EventUnit(), "GameUCBBroodlordChargeLink", 1);
    if ((TechTreeBehaviorCount(lv_playerIndex, "GameUCBBroodlordChargeLink", c_techCountCompleteOnly) == 0) && (PlayerGetChargeUsed(lv_playerIndex, lv_chargeLink) != 0.0)) {
        libNtve_gf_PlayerRemoveChargeUsed(lv_playerIndex, lv_chargeLink);
        PlayerAddChargeUsed(lv_playerIndex, lv_chargeLink, 999.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkBroodlordMorphStart_Init () {
    libSCPL_gt_UCBChargeLinkBroodlordMorphStart = TriggerCreate("libSCPL_gt_UCBChargeLinkBroodlordMorphStart_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkBroodlordMorphStart, null, AbilityCommand("MorphToBroodLord", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Charge Link Broodlord Morph Cancel
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBChargeLinkBroodlordMorphCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GameUCBBroodlordChargeLink", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBChargeLinkBroodlordMorphCancel_Init () {
    libSCPL_gt_UCBChargeLinkBroodlordMorphCancel = TriggerCreate("libSCPL_gt_UCBChargeLinkBroodlordMorphCancel_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_UCBChargeLinkBroodlordMorphCancel, null, AbilityCommand("MorphToBroodLord", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Auto Creep Spread Toggle On
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAutoCreepSpreadToggleOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    libSCPL_gv_player[lv_playerIndex].lv_globalZerg_CreepSpreadToggle = true;
    lv_unitGroup = UnitGroup("CreepTumorQueen", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoCreepSpreadOnHidden", 0)), c_orderQueueReplace);
    lv_unitGroup = UnitGroup("CreepTumorBurrowed", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoCreepSpreadOnHidden", 0)), c_orderQueueReplace);
    libSCPL_gf_SCPBankOptionSave(("GlobalToggleZergCreepSpread"), lv_playerIndex, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAutoCreepSpreadToggleOn_Init () {
    libSCPL_gt_UCBAutoCreepSpreadToggleOn = TriggerCreate("libSCPL_gt_UCBAutoCreepSpreadToggleOn_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libSCPL_gt_UCBAutoCreepSpreadToggleOn, null, AbilityCommand("AutoCreepSpreadToggleUCB", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Auto Creep Spread Toggle Off
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAutoCreepSpreadToggleOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    libSCPL_gv_player[lv_playerIndex].lv_globalZerg_CreepSpreadToggle = false;
    lv_unitGroup = UnitGroup("CreepTumorQueen", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoCreepSpreadOffHidden", 0)), c_orderQueueReplace);
    lv_unitGroup = UnitGroup("CreepTumorBurrowed", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoCreepSpreadOffHidden", 0)), c_orderQueueReplace);
    libSCPL_gf_SCPBankOptionSave(("GlobalToggleZergCreepSpread"), lv_playerIndex, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAutoCreepSpreadToggleOff_Init () {
    libSCPL_gt_UCBAutoCreepSpreadToggleOff = TriggerCreate("libSCPL_gt_UCBAutoCreepSpreadToggleOff_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libSCPL_gt_UCBAutoCreepSpreadToggleOff, null, AbilityCommand("AutoCreepSpreadToggleUCB", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Auto Creep Spread Unit Created
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_PlayerAutoCreepSpreadUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    if ((libSCPL_gv_player[lv_playerIndex].lv_globalZerg_CreepSpreadToggle == false)) {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("AutoCreepSpreadOffHidden", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_PlayerAutoCreepSpreadUnitCreated_Init () {
    libSCPL_gt_PlayerAutoCreepSpreadUnitCreated = TriggerCreate("libSCPL_gt_PlayerAutoCreepSpreadUnitCreated_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_PlayerAutoCreepSpreadUnitCreated, null, AbilityCommand("BurrowCreepTumorDown", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Auto Larva Spawn Toggle On
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAutoLarvaSpawnToggleOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    libSCPL_gv_player[lv_playerIndex].lv_globalZerg_LarvaSpawnToggle = true;
    lv_unitGroup = UnitGroup("Queen", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoSpawnLarvaOnHidden", 0)), c_orderQueueReplace);
    libSCPL_gf_SCPBankOptionSave(("GlobalToggleZergLarvaInject"), lv_playerIndex, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAutoLarvaSpawnToggleOn_Init () {
    libSCPL_gt_UCBAutoLarvaSpawnToggleOn = TriggerCreate("libSCPL_gt_UCBAutoLarvaSpawnToggleOn_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libSCPL_gt_UCBAutoLarvaSpawnToggleOn, null, AbilityCommand("AutoSpawnLarvaToggleUCB", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Auto Larva Spawn Toggle Off
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAutoLarvaSpawnToggleOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    libSCPL_gv_player[lv_playerIndex].lv_globalZerg_LarvaSpawnToggle = false;
    lv_unitGroup = UnitGroup("Queen", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_unitGroup, Order(AbilityCommand("AutoSpawnLarvaOffHidden", 0)), c_orderQueueReplace);
    libSCPL_gf_SCPBankOptionSave(("GlobalToggleZergLarvaInject"), lv_playerIndex, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAutoLarvaSpawnToggleOff_Init () {
    libSCPL_gt_UCBAutoLarvaSpawnToggleOff = TriggerCreate("libSCPL_gt_UCBAutoLarvaSpawnToggleOff_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libSCPL_gt_UCBAutoLarvaSpawnToggleOff, null, AbilityCommand("AutoSpawnLarvaToggleUCB", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Auto Larva Spawn Unit Created
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_PlayerAutoLarvaSpawnUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnitCreatedUnit();
    lv_playerIndex = UnitGetOwner(lv_unit);
    if ((libSCPL_gv_player[lv_playerIndex].lv_globalZerg_LarvaSpawnToggle == false)) {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("AutoSpawnLarvaOffHidden", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_PlayerAutoLarvaSpawnUnitCreated_Init () {
    libSCPL_gt_PlayerAutoLarvaSpawnUnitCreated = TriggerCreate("libSCPL_gt_PlayerAutoLarvaSpawnUnitCreated_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_PlayerAutoLarvaSpawnUnitCreated, null, "BurrowQueenUp", null);
    TriggerAddEventUnitCreated(libSCPL_gt_PlayerAutoLarvaSpawnUnitCreated, null, "TrainQueen", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Auto Drone Morph Toggle On
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAutoDroneMorphToggleOn_Func (bool testConds, bool runActions) {
    unitgroup auto96A750AA_g;
    int auto96A750AA_u;

    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_townHallGroup;
    unit lv_townHall;

    // Variable Initialization
    lv_townHallGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    libSCPL_gv_player[lv_playerIndex].lv_globalZerg_DroneMorphToggle = true;
    UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("Hatchery", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("Hive", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("Lair", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto96A750AA_g = lv_townHallGroup;
    auto96A750AA_u = 1;
    for ( ; auto96A750AA_u <= UnitGroupCount(auto96A750AA_g, c_unitCountAll) ; auto96A750AA_u += BoolToInt(lv_townHall == UnitGroupUnit(auto96A750AA_g, auto96A750AA_u)) ) {
        lv_townHall = UnitGroupUnit(auto96A750AA_g, auto96A750AA_u);
        libSCPL_gf_AutoWorkerProduction(lv_townHall, lv_playerIndex);
    }
    libSCPL_gf_SCPBankOptionSave(("GlobalToggleZergDroneMorph"), lv_playerIndex, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAutoDroneMorphToggleOn_Init () {
    libSCPL_gt_UCBAutoDroneMorphToggleOn = TriggerCreate("libSCPL_gt_UCBAutoDroneMorphToggleOn_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libSCPL_gt_UCBAutoDroneMorphToggleOn, null, AbilityCommand("AutoMorphDroneToggleUCb", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UCB Auto Drone Morph Toggle Off
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UCBAutoDroneMorphToggleOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    libSCPL_gv_player[lv_playerIndex].lv_globalZerg_DroneMorphToggle = false;
    libSCPL_gf_SCPBankOptionSave(("GlobalToggleZergDroneMorph"), lv_playerIndex, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UCBAutoDroneMorphToggleOff_Init () {
    libSCPL_gt_UCBAutoDroneMorphToggleOff = TriggerCreate("libSCPL_gt_UCBAutoDroneMorphToggleOff_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libSCPL_gt_UCBAutoDroneMorphToggleOff, null, AbilityCommand("AutoMorphDroneToggleUCb", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_OptionShowTipsChecked
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_OptionShowTipsChecked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSCPL_gv_uI.lv_gameOptionGameTips))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    if ((libNtve_gf_DialogItemIsChecked(libSCPL_gv_uI.lv_gameOptionGameTips, lv_playerIndex) == true)) {
        libSCPL_gv_player[lv_playerIndex].lv_global_ShowTips = true;
    }
    else {
        libSCPL_gv_player[lv_playerIndex].lv_global_ShowTips = false;
    }
    libSCPL_gf_SCPBankOptionSave(("OptionShowTips"), lv_playerIndex, libSCPL_gv_player[lv_playerIndex].lv_global_ShowTips);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_OptionShowTipsChecked_Init () {
    libSCPL_gt_GameTip_OptionShowTipsChecked = TriggerCreate("libSCPL_gt_GameTip_OptionShowTipsChecked_Func");
    TriggerAddEventDialogControl(libSCPL_gt_GameTip_OptionShowTipsChecked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_GlobalWelcome
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_GlobalWelcome_Func (bool testConds, bool runActions) {
    playergroup auto1633AB43_g;
    int auto1633AB43_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1633AB43_g = PlayerGroupActive(); 
    auto1633AB43_p = 1;
    for ( ; auto1633AB43_p <= PlayerGroupCount(auto1633AB43_g) ; auto1633AB43_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto1633AB43_g, auto1633AB43_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto1633AB43_g, auto1633AB43_p);
        if ((PlayerRace(lv_playerIndex) == "Terr")) {
            libSCPL_gf_GameTipCreateInstance("TerranTutorial00", lv_playerIndex);
        }
        else if ((PlayerRace(lv_playerIndex) == "Prot")) {
            libSCPL_gf_GameTipCreateInstance("ProtossTutorial00", lv_playerIndex);
        }
        else if ((PlayerRace(lv_playerIndex) == "Zerg")) {
            libSCPL_gf_GameTipCreateInstance("ZergTutorial00", lv_playerIndex);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_GlobalWelcome_Init () {
    libSCPL_gt_GameTip_GlobalWelcome = TriggerCreate("libSCPL_gt_GameTip_GlobalWelcome_Func");
    TriggerAddEventTimeElapsed(libSCPL_gt_GameTip_GlobalWelcome, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_GlobalControlGroupComposition
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_GlobalControlGroupComposition_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_controlGroup;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = DataTableGetInt(false, TriggerEventParamName(libSCPL_ge_GenericEvent_Ident(libSCPL_ge_GenericEvent_ControlGroupComposition), libSCPL_ge_GenericParameter_Ident(libSCPL_ge_GenericParameter_TriggeringPlayer)));
    lv_controlGroup = DataTableGetInt(false, TriggerEventParamName(libSCPL_ge_GenericEvent_Ident(libSCPL_ge_GenericEvent_ControlGroupComposition), libSCPL_ge_GenericParameter_Ident(libSCPL_ge_GenericParameter_ControlGroup)));
    libSCPL_gf_GameTipCreateControlGroup("GlobalControlGroupComposition", lv_controlGroup, lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_GlobalControlGroupComposition_Init () {
    libSCPL_gt_GameTip_GlobalControlGroupComposition = TriggerCreate("libSCPL_gt_GameTip_GlobalControlGroupComposition_Func");
    libSCPL_gf_ControlGroupComposition(libSCPL_gt_GameTip_GlobalControlGroupComposition);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_GlobalEconomySupplyCap
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_GlobalEconomySupplyCap_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) >= 190))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("GlobalEconomySupplyCap", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_GlobalEconomySupplyCap_Init () {
    libSCPL_gt_GameTip_GlobalEconomySupplyCap = TriggerCreate("libSCPL_gt_GameTip_GlobalEconomySupplyCap_Func");
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyCap, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyCap, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyCap, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyCap, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyCap, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyCap, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyCap, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyCap, 8, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_GlobalEconomySupplyBlocked
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_GlobalEconomySupplyBlocked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) >= PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesMade)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    if ((PlayerRace(lv_playerIndex) == "Terr")) {
        libSCPL_gf_GameTipCreateInstance("TerranSupplyBlock", lv_playerIndex);
    }
    else if ((PlayerRace(lv_playerIndex) == "Prot")) {
        libSCPL_gf_GameTipCreateInstance("ProtossSupplyBlock", lv_playerIndex);
    }
    else if ((PlayerRace(lv_playerIndex) == "Zerg")) {
        libSCPL_gf_GameTipCreateInstance("ZergSupplyBlock", lv_playerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_GlobalEconomySupplyBlocked_Init () {
    libSCPL_gt_GameTip_GlobalEconomySupplyBlocked = TriggerCreate("libSCPL_gt_GameTip_GlobalEconomySupplyBlocked_Func");
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyBlocked, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyBlocked, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyBlocked, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyBlocked, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyBlocked, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyBlocked, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyBlocked, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(libSCPL_gt_GameTip_GlobalEconomySupplyBlocked, 8, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_GlobalEconomyVespene
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_GlobalEconomyVespene_Func (bool testConds, bool runActions) {
    playergroup auto740F5AED_g;
    int auto740F5AED_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto740F5AED_g = PlayerGroupActive(); 
    auto740F5AED_p = 1;
    for ( ; auto740F5AED_p <= PlayerGroupCount(auto740F5AED_g) ; auto740F5AED_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto740F5AED_g, auto740F5AED_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto740F5AED_g, auto740F5AED_p);
        if ((PlayerGetPropertyInt(lv_playerIndex, c_playerPropVespene) == 0)) {
            libSCPL_gf_GameTipCreateInstance("GlobalEconomyVespene", lv_playerIndex);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_GlobalEconomyVespene_Init () {
    libSCPL_gt_GameTip_GlobalEconomyVespene = TriggerCreate("libSCPL_gt_GameTip_GlobalEconomyVespene_Func");
    TriggerAddEventTimeElapsed(libSCPL_gt_GameTip_GlobalEconomyVespene, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_GlobalExpansion
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_GlobalExpansion_Func (bool testConds, bool runActions) {
    playergroup auto30D7E702_g;
    int auto30D7E702_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto30D7E702_g = PlayerGroupActive(); 
    auto30D7E702_p = 1;
    for ( ; auto30D7E702_p <= PlayerGroupCount(auto30D7E702_g) ; auto30D7E702_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto30D7E702_g, auto30D7E702_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto30D7E702_g, auto30D7E702_p);
        if ((UnitGroupCount(libSCPL_gf_PlayerTownHalls(lv_playerIndex), c_unitCountAlive) == 1) && (PlayerRace(lv_playerIndex) == "Terr")) {
            libSCPL_gf_GameTipCreateInstance("TerranExpansion", lv_playerIndex);
        }
        if ((UnitGroupCount(libSCPL_gf_PlayerTownHalls(lv_playerIndex), c_unitCountAlive) == 1) && (PlayerRace(lv_playerIndex) == "Prot")) {
            libSCPL_gf_GameTipCreateInstance("ProtossExpansion", lv_playerIndex);
        }
        if ((UnitGroupCount(libSCPL_gf_PlayerTownHalls(lv_playerIndex), c_unitCountAlive) == 1) && (PlayerRace(lv_playerIndex) == "Zerg")) {
            libSCPL_gf_GameTipCreateInstance("ZergExpansion", lv_playerIndex);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_GlobalExpansion_Init () {
    libSCPL_gt_GameTip_GlobalExpansion = TriggerCreate("libSCPL_gt_GameTip_GlobalExpansion_Func");
    TriggerAddEventTimeElapsed(libSCPL_gt_GameTip_GlobalExpansion, 180.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_TerranTutorial01
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_TerranTutorial01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "SupplyDepotConstructor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("TerranTutorial01A", EventPlayer());
    Wait(3.0, c_timeGame);
    libSCPL_gf_GameTipCreateInstance("TerranTutorial01B", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_TerranTutorial01_Init () {
    libSCPL_gt_GameTip_TerranTutorial01 = TriggerCreate("libSCPL_gt_GameTip_TerranTutorial01_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_TerranTutorial01, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_TerranTutorial02
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_TerranTutorial02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Barracks"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("TerranTutorial02", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_TerranTutorial02_Init () {
    libSCPL_gt_GameTip_TerranTutorial02 = TriggerCreate("libSCPL_gt_GameTip_TerranTutorial02_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_TerranTutorial02, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_TerranTutorial03
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_TerranTutorial03_Func (bool testConds, bool runActions) {
    playergroup auto3A54313A_g;
    int auto3A54313A_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3A54313A_g = PlayerGroupActive(); 
    auto3A54313A_p = 1;
    for ( ; auto3A54313A_p <= PlayerGroupCount(auto3A54313A_g) ; auto3A54313A_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto3A54313A_g, auto3A54313A_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto3A54313A_g, auto3A54313A_p);
        if ((PlayerRace(lv_playerIndex) == "Terr") && (UnitGroupCount(UnitGroup("OrbitalCommand", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) && (UnitGroupCount(UnitGroup("OrbitalCommandFlying", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
            libSCPL_gf_GameTipCreateInstance("TerranTutorial03", lv_playerIndex);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_TerranTutorial03_Init () {
    libSCPL_gt_GameTip_TerranTutorial03 = TriggerCreate("libSCPL_gt_GameTip_TerranTutorial03_Func");
    TriggerAddEventTimeElapsed(libSCPL_gt_GameTip_TerranTutorial03, 150.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_TerranAddonTechLab
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_TerranAddonTechLab_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "TechLab") || (UnitGetType(EventUnitProgressUnit()) == "BarracksTechLab") || (UnitGetType(EventUnitProgressUnit()) == "FactoryTechLab") || (UnitGetType(EventUnitProgressUnit()) == "StarportTechLab")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("TerranAddonTechLab", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_TerranAddonTechLab_Init () {
    libSCPL_gt_GameTip_TerranAddonTechLab = TriggerCreate("libSCPL_gt_GameTip_TerranAddonTechLab_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_TerranAddonTechLab, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_TerranAddonReactor
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_TerranAddonReactor_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "Reactor") || (UnitGetType(EventUnitProgressUnit()) == "BarracksReactor") || (UnitGetType(EventUnitProgressUnit()) == "FactoryReactor") || (UnitGetType(EventUnitProgressUnit()) == "StarportReactor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("TerranAddonReactor", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_TerranAddonReactor_Init () {
    libSCPL_gt_GameTip_TerranAddonReactor = TriggerCreate("libSCPL_gt_GameTip_TerranAddonReactor_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_TerranAddonReactor, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_TerranBarracksTwo
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_TerranBarracksTwo_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Barracks"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Barracks", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("TerranGlobalRallyBarracks", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_TerranBarracksTwo_Init () {
    libSCPL_gt_GameTip_TerranBarracksTwo = TriggerCreate("libSCPL_gt_GameTip_TerranBarracksTwo_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_TerranBarracksTwo, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_TerranFactory
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_TerranFactory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Factory"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("TerranGlobalRallyFactory", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_TerranFactory_Init () {
    libSCPL_gt_GameTip_TerranFactory = TriggerCreate("libSCPL_gt_GameTip_TerranFactory_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_TerranFactory, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_TerranFactoryUnit
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_TerranFactoryUnit_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "Hellion") || (UnitGetType(EventUnitProgressUnit()) == "HellionTank") || (UnitGetType(EventUnitProgressUnit()) == "Cyclone") || (UnitGetType(EventUnitProgressUnit()) == "WidowMine") || (UnitGetType(EventUnitProgressUnit()) == "SiegeTank") || (UnitGetType(EventUnitProgressUnit()) == "Thor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("TerranControlGroupFactory", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_TerranFactoryUnit_Init () {
    libSCPL_gt_GameTip_TerranFactoryUnit = TriggerCreate("libSCPL_gt_GameTip_TerranFactoryUnit_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_GameTip_TerranFactoryUnit, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ProtossTutorial01
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ProtossTutorial01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnitProgressUnit());
    libSCPL_gf_GameTipCreateInstance("ProtossTutorial01", lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ProtossTutorial01_Init () {
    libSCPL_gt_GameTip_ProtossTutorial01 = TriggerCreate("libSCPL_gt_GameTip_ProtossTutorial01_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_ProtossTutorial01, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ProtossTutorial02
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ProtossTutorial02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Gateway"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnitProgressUnit());
    libSCPL_gf_GameTipCreateInstance("ProtossTutorial02", lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ProtossTutorial02_Init () {
    libSCPL_gt_GameTip_ProtossTutorial02 = TriggerCreate("libSCPL_gt_GameTip_ProtossTutorial02_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_ProtossTutorial02, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ProtossTutorial03
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ProtossTutorial03_Func (bool testConds, bool runActions) {
    playergroup auto6EDB661D_g;
    int auto6EDB661D_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6EDB661D_g = PlayerGroupActive(); 
    auto6EDB661D_p = 1;
    for ( ; auto6EDB661D_p <= PlayerGroupCount(auto6EDB661D_g) ; auto6EDB661D_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto6EDB661D_g, auto6EDB661D_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto6EDB661D_g, auto6EDB661D_p);
        if ((PlayerRace(lv_playerIndex) == "Prot") && (TechTreeUpgradeCount(lv_playerIndex, "WarpGateResearch", c_techCountQueuedOrBetter) == 0)) {
            libSCPL_gf_GameTipCreateInstance("ProtossTutorial03", lv_playerIndex);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ProtossTutorial03_Init () {
    libSCPL_gt_GameTip_ProtossTutorial03 = TriggerCreate("libSCPL_gt_GameTip_ProtossTutorial03_Func");
    TriggerAddEventTimeElapsed(libSCPL_gt_GameTip_ProtossTutorial03, 150.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ProtossTutorial04
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ProtossTutorial04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "WarpGateResearch"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnitProgressUnit());
    libSCPL_gf_GameTipCreateInstance("ProtossTutorial04", lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ProtossTutorial04_Init () {
    libSCPL_gt_GameTip_ProtossTutorial04 = TriggerCreate("libSCPL_gt_GameTip_ProtossTutorial04_Func");
    TriggerAddEventUnitResearchProgress(libSCPL_gt_GameTip_ProtossTutorial04, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ProtossMothershipCore
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ProtossMothershipCore_Func (bool testConds, bool runActions) {
    playergroup auto7B84406A_g;
    int auto7B84406A_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7B84406A_g = PlayerGroupActive(); 
    auto7B84406A_p = 1;
    for ( ; auto7B84406A_p <= PlayerGroupCount(auto7B84406A_g) ; auto7B84406A_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto7B84406A_g, auto7B84406A_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto7B84406A_g, auto7B84406A_p);
        if ((PlayerRace(lv_playerIndex) == "Prot") && (UnitGroupCount(UnitGroup("MothershipCore", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
            libSCPL_gf_GameTipCreateInstance("ProtossMothershipCore", lv_playerIndex);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ProtossMothershipCore_Init () {
    libSCPL_gt_GameTip_ProtossMothershipCore = TriggerCreate("libSCPL_gt_GameTip_ProtossMothershipCore_Func");
    TriggerAddEventTimeElapsed(libSCPL_gt_GameTip_ProtossMothershipCore, 240.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ProtossGatewayTwo
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ProtossGatewayTwo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Gateway"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Gateway", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnitProgressUnit());
    libSCPL_gf_GameTipCreateInstance("ProtossGlobalRallyGateway", lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ProtossGatewayTwo_Init () {
    libSCPL_gt_GameTip_ProtossGatewayTwo = TriggerCreate("libSCPL_gt_GameTip_ProtossGatewayTwo_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_ProtossGatewayTwo, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ProtossGatewayTwoWarpgate
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ProtossGatewayTwoWarpgate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "WarpGate"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("WarpGate", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnitProgressUnit());
    libSCPL_gf_GameTipCreateInstance("ProtossGlobalRallyWarpGate", lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ProtossGatewayTwoWarpgate_Init () {
    libSCPL_gt_GameTip_ProtossGatewayTwoWarpgate = TriggerCreate("libSCPL_gt_GameTip_ProtossGatewayTwoWarpgate_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_ProtossGatewayTwoWarpgate, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ProtossRobotics
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ProtossRobotics_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "RoboticsFacility"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("ProtossGlobalRallyRoboticsFacility", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ProtossRobotics_Init () {
    libSCPL_gt_GameTip_ProtossRobotics = TriggerCreate("libSCPL_gt_GameTip_ProtossRobotics_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_ProtossRobotics, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ProtossRoboticsUnit
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ProtossRoboticsUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "Observer") || (UnitGetType(EventUnitProgressUnit()) == "WarpPrismSkinPreview") || (UnitGetType(EventUnitProgressUnit()) == "Immortal") || (UnitGetType(EventUnitProgressUnit()) == "Colossus") || (UnitGetType(EventUnitProgressUnit()) == "Disruptor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnitProgressUnit());
    libSCPL_gf_GameTipCreateInstance("ProtossControlGroupRoboticsFacility", lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ProtossRoboticsUnit_Init () {
    libSCPL_gt_GameTip_ProtossRoboticsUnit = TriggerCreate("libSCPL_gt_GameTip_ProtossRoboticsUnit_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_GameTip_ProtossRoboticsUnit, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ProtossWarpInSlow
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ProtossWarpInSlow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnitCreatedUnit());
    if ((PowerLevel(EventPlayer(), UnitGetPosition(EventUnitCreatedUnit()), "PowerSource") != 2)) {
        libSCPL_gf_GameTipCreateInstance("ProtossWarpInSlow", lv_playerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ProtossWarpInSlow_Init () {
    libSCPL_gt_GameTip_ProtossWarpInSlow = TriggerCreate("libSCPL_gt_GameTip_ProtossWarpInSlow_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_GameTip_ProtossWarpInSlow, null, "WarpGateTrainUCB", null);
    TriggerAddEventUnitCreated(libSCPL_gt_GameTip_ProtossWarpInSlow, null, "WarpGateTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ZergTutorial01
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ZergTutorial01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "SpawningPool"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("ZergTutorial01", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ZergTutorial01_Init () {
    libSCPL_gt_GameTip_ZergTutorial01 = TriggerCreate("libSCPL_gt_GameTip_ZergTutorial01_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_ZergTutorial01, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ZergTutorial02
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ZergTutorial02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Queen"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("ZergTutorial02", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ZergTutorial02_Init () {
    libSCPL_gt_GameTip_ZergTutorial02 = TriggerCreate("libSCPL_gt_GameTip_ZergTutorial02_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_GameTip_ZergTutorial02, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ZergTutorial03
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ZergTutorial03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("ZergTutorial03", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ZergTutorial03_Init () {
    libSCPL_gt_GameTip_ZergTutorial03 = TriggerCreate("libSCPL_gt_GameTip_ZergTutorial03_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_GameTip_ZergTutorial03, null, "QueenBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ZergTutorial04
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ZergTutorial04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("ZergTutorial03", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ZergTutorial04_Init () {
    libSCPL_gt_GameTip_ZergTutorial04 = TriggerCreate("libSCPL_gt_GameTip_ZergTutorial04_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_GameTip_ZergTutorial04, null, AbilityCommand("SpawnLarva", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ZergTutorial05
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ZergTutorial05_Func (bool testConds, bool runActions) {
    playergroup autoFBAD6838_g;
    int autoFBAD6838_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFBAD6838_g = PlayerGroupActive(); 
    autoFBAD6838_p = 1;
    for ( ; autoFBAD6838_p <= PlayerGroupCount(autoFBAD6838_g) ; autoFBAD6838_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(autoFBAD6838_g, autoFBAD6838_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoFBAD6838_g, autoFBAD6838_p);
        if ((PlayerRace(lv_playerIndex) == "Zerg") && (UnitGroupCount(UnitGroup("Hive", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) && (UnitGroupCount(UnitGroup("Lair", lv_playerIndex, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
            libSCPL_gf_GameTipCreateInstance("ZergTutorial05", EventPlayer());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ZergTutorial05_Init () {
    libSCPL_gt_GameTip_ZergTutorial05 = TriggerCreate("libSCPL_gt_GameTip_ZergTutorial05_Func");
    TriggerAddEventTimeElapsed(libSCPL_gt_GameTip_ZergTutorial05, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ZergGlobalRallyRanged
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ZergGlobalRallyRanged_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "HydraliskDen") || (UnitGetType(EventUnitProgressUnit()) == "RoachWarren")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("ZergGlobalRallyRanged", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ZergGlobalRallyRanged_Init () {
    libSCPL_gt_GameTip_ZergGlobalRallyRanged = TriggerCreate("libSCPL_gt_GameTip_ZergGlobalRallyRanged_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_GameTip_ZergGlobalRallyRanged, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ZergAutoDrones
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ZergAutoDrones_Func (bool testConds, bool runActions) {
    playergroup auto3B78A5A9_g;
    int auto3B78A5A9_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3B78A5A9_g = PlayerGroupActive(); 
    auto3B78A5A9_p = 1;
    for ( ; auto3B78A5A9_p <= PlayerGroupCount(auto3B78A5A9_g) ; auto3B78A5A9_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto3B78A5A9_g, auto3B78A5A9_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto3B78A5A9_g, auto3B78A5A9_p);
        if ((PlayerRace(lv_playerIndex) == "Zerg")) {
            libSCPL_gf_GameTipCreateInstance("ZergAutoProduceDrones", EventPlayer());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ZergAutoDrones_Init () {
    libSCPL_gt_GameTip_ZergAutoDrones = TriggerCreate("libSCPL_gt_GameTip_ZergAutoDrones_Func");
    TriggerAddEventTimeElapsed(libSCPL_gt_GameTip_ZergAutoDrones, 240.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTip_ZergOverlord
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_GameTip_ZergOverlord_Func (bool testConds, bool runActions) {
    playergroup auto7D5E9447_g;
    int auto7D5E9447_p;

    // Variable Declarations
    int lv_playerIndex;
    playergroup lv_playersNeedTip;

    // Variable Initialization
    lv_playersNeedTip = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) == "Zerg"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Overlord"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_GameTipCreateInstance("ZergOverlordSelect", EventPlayer());
    auto7D5E9447_g = PlayerGroupAll(); 
    auto7D5E9447_p = 1;
    for ( ; auto7D5E9447_p <= PlayerGroupCount(auto7D5E9447_g) ; auto7D5E9447_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto7D5E9447_g, auto7D5E9447_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto7D5E9447_g, auto7D5E9447_p);
        if ((PlayerRace(lv_playerIndex) == "Zerg") && (lv_playerIndex != EventPlayer()) && (DataTableGetBool(true, (("ZergOverlordSelect") + "|" + libPPRL_gf_ConvertIntegerToStringDoubleDigit(lv_playerIndex))) == false)) {
            PlayerGroupAdd(lv_playersNeedTip, lv_playerIndex);
        }
    }
    if ((PlayerGroupCount(lv_playersNeedTip) == 0)) {
        TriggerEnable(libSCPL_gt_GameTip_ZergOverlord, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_GameTip_ZergOverlord_Init () {
    libSCPL_gt_GameTip_ZergOverlord = TriggerCreate("libSCPL_gt_GameTip_ZergOverlord_Func");
    TriggerEnable(libSCPL_gt_GameTip_ZergOverlord, false);
    TriggerAddEventUnitSelected(libSCPL_gt_GameTip_ZergOverlord, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Initialization
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UpgradeNotificationsInitialization_Func (bool testConds, bool runActions) {
    int autoF61FB29D_ae;
    int autoF61FB29D_ai;

    // Variable Declarations
    int lv_slot;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF61FB29D_ae = libSCPL_gv_upgradeNotificationsMaxUISlots;
    autoF61FB29D_ai = 1;
    lv_slot = 0;
    for ( ; ( (autoF61FB29D_ai >= 0 && lv_slot <= autoF61FB29D_ae) || (autoF61FB29D_ai <= 0 && lv_slot >= autoF61FB29D_ae) ) ; lv_slot += autoF61FB29D_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + IntToString(lv_slot)));
        libSCPL_gv_upgradeNotifications.lv_itemPanel[lv_slot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerStatus")));
        libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerBar")));
        libSCPL_gv_upgradeNotifications.lv_itemProgressBar[lv_slot] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerCountdown")));
        libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerIcon")));
        libSCPL_gv_upgradeNotifications.lv_itemIcon[lv_slot] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerType")));
        libSCPL_gv_upgradeNotifications.lv_itemName[lv_slot] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemMaximumValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], libSCPL_gv_upgradeNotificationsVisibleTime, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemName[lv_slot], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libSCPL_gv_upgradeNotifications.lv_itemPanel[lv_slot], Color(100,100,100), PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UpgradeNotificationsInitialization_Init () {
    libSCPL_gt_UpgradeNotificationsInitialization = TriggerCreate("libSCPL_gt_UpgradeNotificationsInitialization_Func");
    TriggerAddEventMapInit(libSCPL_gt_UpgradeNotificationsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Started
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UpgradeNotificationsResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    unit lv_facility;
    string lv_upgrade;
    int lv_playerIndex;
    playergroup lv_pLAYER;

    // Variable Initialization
    lv_facility = EventUnit();
    lv_upgrade = libNtve_gf_TriggeringProgressUpgrade();
    lv_pLAYER = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_pLAYER = PlayerGroupSingle(lv_playerIndex);
    libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lv_playerIndex] += 1;
    lv_slot = libSCPL_gv_upgradeNotifications.lv_slotLastUsed[lv_playerIndex];
    libSCPL_gv_upgradeNotifications.lv_slotFacility[lv_slot][lv_playerIndex] = lv_facility;
    if ((lv_slot <= libSCPL_gv_upgradeNotificationsMaxUISlots)) {
        libSCPL_gf_UpgradeNotificationsSetSlotData(lv_slot, libSCPL_gf_UpgradeNotificationsUpgradeName(lv_upgrade, lv_playerIndex), libSCPL_gf_UpgradeNotificationsUpgradeImage(lv_upgrade, lv_playerIndex), false, lv_playerIndex);
        if ((libSCPL_gv_upgradeNotifications.lv_updateThreadRunning[lv_playerIndex] == false)) {
            libSCPL_gv_upgradeNotifications.lv_updateThreadRunning[lv_playerIndex] = true;
            libSCPL_gf_UpgradeNotificationsUpdateThread(lv_playerIndex);
        }
        libNtve_gf_SetDialogItemText(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot], StringToText(""), lv_pLAYER);
        DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot], lv_pLAYER, true);
        DialogControlSetVisible(libSCPL_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot], lv_pLAYER, false);
        libSCPL_gv_upgradeNotifications.lv_slotStatus[lv_slot][lv_playerIndex] = libSCPL_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
        libNtve_gf_SetDialogItemCurrentValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], 0.0, lv_pLAYER);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UpgradeNotificationsResearchStarted_Init () {
    libSCPL_gt_UpgradeNotificationsResearchStarted = TriggerCreate("libSCPL_gt_UpgradeNotificationsResearchStarted_Func");
    TriggerAddEventUnitResearchProgress(libSCPL_gt_UpgradeNotificationsResearchStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Cancelled
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UpgradeNotificationsResearchCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    int lv_slot;
    int lv_playerIndex;

    // Variable Initialization
    lv_facility = EventUnit();
    lv_slot = libSCPL_gf_UpgradeNotificationsFacilitySlot(lv_facility, UnitGetOwner(lv_facility));

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    if ((lv_slot <= libSCPL_gv_upgradeNotificationsMaxUISlots) && (DialogControlIsVisible(libSCPL_gv_upgradeNotifications.lv_itemPanel[lv_slot], lv_playerIndex) == true)) {
        libSCPL_gv_upgradeNotifications.lv_slotStatus[lv_slot][lv_playerIndex] = libSCPL_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade;
        TimerStart(libSCPL_gv_upgradeNotifications.lv_timerDestruction[lv_slot][lv_playerIndex], libSCPL_gv_upgradeDisplayTime, false, c_timeGame);
        if ((UnitIsAlive(lv_facility) == false)) {
            libSCPL_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_SCPL_FE8FB489"), lv_playerIndex);
        }
        else {
            libSCPL_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_SCPL_F9A0DB61"), lv_playerIndex);
        }
    }
    else {
        libSCPL_gf_UpgradeNotificationsRemoveRunningUpgradeImmediate(libSCPL_gf_UpgradeNotificationsFacilitySlot(lv_facility, lv_playerIndex), lv_playerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UpgradeNotificationsResearchCancelled_Init () {
    libSCPL_gt_UpgradeNotificationsResearchCancelled = TriggerCreate("libSCPL_gt_UpgradeNotificationsResearchCancelled_Func");
    TriggerAddEventUnitResearchProgress(libSCPL_gt_UpgradeNotificationsResearchCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Completed
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UpgradeNotificationsResearchCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    int lv_slot;
    int lv_playerIndex;
    playergroup lv_pLAYER;

    // Variable Initialization
    lv_facility = EventUnit();
    lv_slot = libSCPL_gf_UpgradeNotificationsFacilitySlot(lv_facility, UnitGetOwner(lv_facility));
    lv_pLAYER = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_pLAYER = PlayerGroupSingle(lv_playerIndex);
    if ((lv_slot <= libSCPL_gv_upgradeNotificationsMaxUISlots)) {
        libSCPL_gv_upgradeNotifications.lv_slotStatus[lv_slot][lv_playerIndex] = libSCPL_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade;
        libSCPL_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_SCPL_3228FF8F"), lv_playerIndex);
        libNtve_gf_SetDialogItemCurrentValue(libSCPL_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], libSCPL_gv_upgradeNotificationsVisibleTime, lv_pLAYER);
        TimerStart(libSCPL_gv_upgradeNotifications.lv_timerDestruction[lv_slot][lv_playerIndex], libSCPL_gv_upgradeDisplayTime, false, c_timeGame);
    }
    else {
        libSCPL_gf_UpgradeNotificationsRemoveRunningUpgradeImmediate(libSCPL_gf_UpgradeNotificationsFacilitySlot(lv_facility, lv_playerIndex), lv_playerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UpgradeNotificationsResearchCompleted_Init () {
    libSCPL_gt_UpgradeNotificationsResearchCompleted = TriggerCreate("libSCPL_gt_UpgradeNotificationsResearchCompleted_Func");
    TriggerAddEventUnitResearchProgress(libSCPL_gt_UpgradeNotificationsResearchCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Destruction Timer Runs Out
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_UpgradeNotificationsDestructionTimerRunsOut_Func (bool testConds, bool runActions) {
    playergroup auto7984D9A2_g;
    int auto7984D9A2_p;
    int auto75229D90_ae;
    int auto75229D90_ai;

    // Variable Declarations
    int lv_slot;
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7984D9A2_g = PlayerGroupActive(); 
    auto7984D9A2_p = 1;
    for ( ; auto7984D9A2_p <= PlayerGroupCount(auto7984D9A2_g) ; auto7984D9A2_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto7984D9A2_g, auto7984D9A2_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto7984D9A2_g, auto7984D9A2_p);
        auto75229D90_ae = libSCPL_gv_upgradeNotificationsMaxUISlots;
        auto75229D90_ai = 1;
        lv_slot = 0;
        for ( ; ( (auto75229D90_ai >= 0 && lv_slot <= auto75229D90_ae) || (auto75229D90_ai <= 0 && lv_slot >= auto75229D90_ae) ) ; lv_slot += auto75229D90_ai ) {
            if ((EventTimer() == libSCPL_gv_upgradeNotifications.lv_timerDestruction[lv_slot][lv_playerIndex])) {
                libSCPL_gf_UpgradeNotificationsRemoveRunningUpgrade(lv_slot, lv_playerIndex);
                return true;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_UpgradeNotificationsDestructionTimerRunsOut_Init () {
    libSCPL_gt_UpgradeNotificationsDestructionTimerRunsOut = TriggerCreate("libSCPL_gt_UpgradeNotificationsDestructionTimerRunsOut_Func");
    TriggerAddEventTimer(libSCPL_gt_UpgradeNotificationsDestructionTimerRunsOut, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabelsPlus - Unit Created
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_LabelsPlusUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_size;
    int lv_bGSize;

    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();
    lv_size = libSCPL_gf_LabelsPlusUnitIconSize(lv_unit);
    lv_bGSize = FixedToInt((lv_size * 1.2));

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((libSCPL_gf_LabelsPlusUnitUsesCustomStatusBar(EventUnitCreatedUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetString(true, (IntToString(UnitGetTag(lv_unit)) + "-slot1"), "");
    DataTableSetString(true, (IntToString(UnitGetTag(lv_unit)) + "-slot2"), "");
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon1\\IconBG", lv_unit);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_bGSize, lv_bGSize);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("IconBG1-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon2\\IconBG", lv_unit);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_bGSize, lv_bGSize);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("IconBG2-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon3\\IconBG", lv_unit);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_bGSize, lv_bGSize);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("IconBG3-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon1\\Icon", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("Icon1-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon2\\Icon", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("Icon2-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon3\\Icon", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("Icon3-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_LabelsPlusUnitCreated_Init () {
    libSCPL_gt_LabelsPlusUnitCreated = TriggerCreate("libSCPL_gt_LabelsPlusUnitCreated_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_LabelsPlusUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabelsPlus - Unit Training Started
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_LabelsPlusUnitTrainingStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_unitTag;
    unit lv_trainee;
    string lv_traineeType;
    int lv_iconSize;
    int lv_activeTags;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_trainee = EventUnitProgressUnit();
    lv_traineeType = libNtve_gf_TriggeringProgressUnitType();
    lv_iconSize = libSCPL_gf_LabelsPlusUnitIconSize(lv_unit);
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((libSCPL_gf_LabelsPlusUnitUsesCustomStatusBar(lv_unit) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((lv_traineeType != "Interceptor"))) {
            return false;
        }

        if (!((lv_traineeType != "BroodlingEscort"))) {
            return false;
        }

        if (!((lv_traineeType != "Broodling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == "")) {
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot1"), (lv_traineeType));
        if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == "")) {
            lv_activeTags = 1;
        }
        else {
            lv_activeTags = 2;
        }
    }
    else {
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), (lv_traineeType));
        lv_activeTags = 2;
    }
    if ((lv_traineeType != "Zergling") && (lv_activeTags == 2)) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    }
    else {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
    }
    if ((lv_traineeType == "Zergling")) {
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "StatusIcon1/ProductionCount", lv_unit);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SCPL_2E463DF9"), lv_playerGroup);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_LabelsPlusUnitTrainingStarted_Init () {
    libSCPL_gt_LabelsPlusUnitTrainingStarted = TriggerCreate("libSCPL_gt_LabelsPlusUnitTrainingStarted_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_LabelsPlusUnitTrainingStarted, null, c_unitProgressStageStart);
    TriggerAddEventUnitArmMagazineProgress(libSCPL_gt_LabelsPlusUnitTrainingStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabelsPlus - Unit Training Stopped
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_LabelsPlusUnitTrainingStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_unitTag;
    unit lv_trainee;
    string lv_traineeType;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_trainee = EventUnitProgressUnit();
    lv_traineeType = libNtve_gf_TriggeringProgressUnitType();
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((libSCPL_gf_LabelsPlusUnitUsesCustomStatusBar(lv_unit) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((lv_traineeType != "Interceptor"))) {
            return false;
        }

        if (!((lv_traineeType != "BroodlingEscort"))) {
            return false;
        }

        if (!((lv_traineeType != "Broodling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot1"), "");
    }
    else if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), "");
    }
    else if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) != "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot1"), DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")));
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), "");
    }
    else if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) != "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), "");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_LabelsPlusUnitTrainingStopped_Init () {
    libSCPL_gt_LabelsPlusUnitTrainingStopped = TriggerCreate("libSCPL_gt_LabelsPlusUnitTrainingStopped_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_LabelsPlusUnitTrainingStopped, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(libSCPL_gt_LabelsPlusUnitTrainingStopped, null, c_unitProgressStageCancel);
    TriggerAddEventUnitArmMagazineProgress(libSCPL_gt_LabelsPlusUnitTrainingStopped, null, c_unitProgressStageComplete);
    TriggerAddEventUnitArmMagazineProgress(libSCPL_gt_LabelsPlusUnitTrainingStopped, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabelsPlus - Unit Training Reactor Destroyed
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_LabelsPlusUnitTrainingReactorDestroyed_Func (bool testConds, bool runActions) {
    unitgroup autoD0B609A6_g;
    int autoD0B609A6_u;

    // Variable Declarations
    unit lv_unit;
    string lv_unitType;
    int lv_unitTag;
    int lv_player;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_unitType = UnitGetType(lv_unit);
    lv_unitTag = UnitGetTag(lv_unit);
    lv_player = UnitGetOwner(lv_unit);
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!(((lv_unitType == "BarracksReactor") || (lv_unitType == "FactoryReactor") || (lv_unitType == "StarportReactor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD0B609A6_g = UnitGroup(null, EventPlayer(), RegionCircle(PointWithOffset(UnitGetPosition(EventUnit()), -2.5, 0.5), 0.1), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    autoD0B609A6_u = 1;
    for ( ; autoD0B609A6_u <= UnitGroupCount(autoD0B609A6_g, c_unitCountAll) ; autoD0B609A6_u += BoolToInt(lv_unit == UnitGroupUnit(autoD0B609A6_g, autoD0B609A6_u)) ) {
        lv_unit = UnitGroupUnit(autoD0B609A6_g, autoD0B609A6_u);
        lv_unitType = UnitGetType(lv_unit);
        if (((lv_unitType == "Barracks") || (lv_unitType == "Factory") || (lv_unitType == "Starport")) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_unit, 1, 1) != "")) {
            lv_unitTag = UnitGetTag(lv_unit);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
            libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_LabelsPlusUnitTrainingReactorDestroyed_Init () {
    libSCPL_gt_LabelsPlusUnitTrainingReactorDestroyed = TriggerCreate("libSCPL_gt_LabelsPlusUnitTrainingReactorDestroyed_Func");
    TriggerAddEventUnitDied(libSCPL_gt_LabelsPlusUnitTrainingReactorDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabelsPlus - Research Started
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_LabelsPlusResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_unitTag;
    string lv_research;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unitTag = UnitGetTag(EventUnit());
    lv_research = libNtve_gf_TriggeringProgressUpgrade();
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((libSCPL_gf_LabelsPlusUnitUsesCustomStatusBar(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogUpgrade, lv_research, "Icon", c_playerAny)), PlayerGroupAll());
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_LabelsPlusResearchStarted_Init () {
    libSCPL_gt_LabelsPlusResearchStarted = TriggerCreate("libSCPL_gt_LabelsPlusResearchStarted_Func");
    TriggerAddEventUnitResearchProgress(libSCPL_gt_LabelsPlusResearchStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabelsPlus - Research Stopped
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_LabelsPlusResearchStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_unitTag;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((libSCPL_gf_LabelsPlusUnitUsesCustomStatusBar(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_LabelsPlusResearchStopped_Init () {
    libSCPL_gt_LabelsPlusResearchStopped = TriggerCreate("libSCPL_gt_LabelsPlusResearchStopped_Func");
    TriggerAddEventUnitResearchProgress(libSCPL_gt_LabelsPlusResearchStopped, null, c_unitProgressStageCancel);
    TriggerAddEventUnitResearchProgress(libSCPL_gt_LabelsPlusResearchStopped, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabelsPlus - Construction Started
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_LabelsPlusConstructionStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_unitTag;
    string lv_construction;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unitTag = UnitGetTag(EventUnitProgressUnit());
    lv_construction = libNtve_gf_TriggeringProgressUnitType();
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((libSCPL_gf_LabelsPlusUnitUsesCustomStatusBar(EventUnitProgressUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, lv_construction, "UnitIcon", c_playerAny)), PlayerGroupAll());
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_LabelsPlusConstructionStarted_Init () {
    libSCPL_gt_LabelsPlusConstructionStarted = TriggerCreate("libSCPL_gt_LabelsPlusConstructionStarted_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_LabelsPlusConstructionStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabelsPlus - Construction Stopped
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_LabelsPlusConstructionStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_unitTag;
    int lv_player;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_unit = EventUnitProgressUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_player = UnitGetOwner(lv_unit);
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((libSCPL_gf_LabelsPlusUnitUsesCustomStatusBar(EventUnitProgressUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_LabelsPlusConstructionStopped_Init () {
    libSCPL_gt_LabelsPlusConstructionStopped = TriggerCreate("libSCPL_gt_LabelsPlusConstructionStopped_Func");
    TriggerAddEventUnitConstructProgress(libSCPL_gt_LabelsPlusConstructionStopped, null, c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(libSCPL_gt_LabelsPlusConstructionStopped, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabelsPlus - Morph Started
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_LabelsPlusMorphStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_unitTag;
    playergroup lv_playerGroup;
    string lv_triggeringAbility;
    string lv_morphUnit;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unitTag = UnitGetTag(EventUnit());
    lv_playerGroup = PlayerGroupSingle(lv_player);
    lv_morphUnit = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((libSCPL_gf_LabelsPlusUnitUsesCustomStatusBar(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringAbility = AbilityCommandGetAbility(EventUnitAbility());
    if ((libSCPL_gf_LabelsPlusUnitMorphTwoStage(EventUnit()) == true)) {
        lv_morphUnit = (CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, ("InfoArray[" + IntToString(1) + "].Unit"), c_playerAny));
    }
    else {
        lv_morphUnit = (CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, ("InfoArray[" + IntToString(0) + "].Unit"), c_playerAny));
    }
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, lv_morphUnit, "UnitIcon", c_playerAny)), PlayerGroupAll());
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_LabelsPlusMorphStarted_Init () {
    libSCPL_gt_LabelsPlusMorphStarted = TriggerCreate("libSCPL_gt_LabelsPlusMorphStarted_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStarted, null, AbilityCommand("UpgradeToOrbital", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStarted, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStarted, null, AbilityCommand("UpgradeToLair", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStarted, null, AbilityCommand("UpgradeToHive", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStarted, null, AbilityCommand("MorphToTransportOverlord", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStarted, null, AbilityCommand("MorphToOverseer", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStarted, null, AbilityCommand("MorphToRavager", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStarted, null, AbilityCommand("MorphToLurker", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStarted, null, AbilityCommand("MorphToBroodLord", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStarted, null, AbilityCommand("MorphToMothership", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabelsPlus - Morph Stopped
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_LabelsPlusMorphStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_unitTag;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((libSCPL_gf_LabelsPlusUnitUsesCustomStatusBar(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_LabelsPlusMorphStopped_Init () {
    libSCPL_gt_LabelsPlusMorphStopped = TriggerCreate("libSCPL_gt_LabelsPlusMorphStopped_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("UpgradeToOrbital", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("UpgradeToLair", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("UpgradeToHive", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("UpgradeToLair", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("UpgradeToHive", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToTransportOverlord", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToOverseer", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToRavager", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToLurker", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToBroodLord", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToTransportOverlord", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToOverseer", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToRavager", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToLurker", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToBroodLord", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToMothership", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_LabelsPlusMorphStopped, null, AbilityCommand("MorphToMothership", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Display Mineral Create
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ResourceDisplayMineralCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_resourceModifier;
    fixed lv_resourceIncome;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_resourceModifier = -0.714;
    lv_resourceIncome = (lv_resourceModifier * libSCPL_gv_constants.lv_harvesterIncomeMinerals);
    libSCPL_gf_ResourceDisplayGainAdd(lv_playerIndex, lv_resourceIncome, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ResourceDisplayMineralCreate_Init () {
    libSCPL_gt_ResourceDisplayMineralCreate = TriggerCreate("libSCPL_gt_ResourceDisplayMineralCreate_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_ResourceDisplayMineralCreate, null, "GameResourceMarkerMinerals", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Display Mineral Rich Create
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ResourceDisplayMineralRichCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_resourceModifier;
    fixed lv_resourceIncome;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_resourceModifier = -0.714;
    lv_resourceIncome = (lv_resourceModifier * libSCPL_gv_constants.lv_harvesterIncomeMineralsRich);
    libSCPL_gf_ResourceDisplayGainAdd(lv_playerIndex, lv_resourceIncome, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ResourceDisplayMineralRichCreate_Init () {
    libSCPL_gt_ResourceDisplayMineralRichCreate = TriggerCreate("libSCPL_gt_ResourceDisplayMineralRichCreate_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_ResourceDisplayMineralRichCreate, null, "GameResourceMarkerMineralsRich", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Display Mineral MULE Create
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ResourceDisplayMineralMULECreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_resourceModifier;
    fixed lv_resourceIncome;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_resourceModifier = -0.714;
    lv_resourceIncome = (lv_resourceModifier * libSCPL_gv_constants.lv_harvesterIncomeMineralsMULE);
    libSCPL_gf_ResourceDisplayGainAdd(lv_playerIndex, lv_resourceIncome, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ResourceDisplayMineralMULECreate_Init () {
    libSCPL_gt_ResourceDisplayMineralMULECreate = TriggerCreate("libSCPL_gt_ResourceDisplayMineralMULECreate_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_ResourceDisplayMineralMULECreate, null, "GameResourceMarkerMineralsMULE", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Display Vespene Create
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ResourceDisplayVespeneCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_resourceModifier;
    fixed lv_resourceIncome;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_resourceModifier = -0.714;
    lv_resourceIncome = (lv_resourceModifier * libSCPL_gv_constants.lv_harvesterIncomeVespene);
    libSCPL_gf_ResourceDisplayGainAdd(lv_playerIndex, 0.0, lv_resourceIncome);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ResourceDisplayVespeneCreate_Init () {
    libSCPL_gt_ResourceDisplayVespeneCreate = TriggerCreate("libSCPL_gt_ResourceDisplayVespeneCreate_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_ResourceDisplayVespeneCreate, null, "GameResourceMarkerVespene", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Display Mineral Destroy
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ResourceDisplayMineralDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_resourceModifier;
    fixed lv_resourceIncome;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_resourceModifier = 0.714;
    lv_resourceIncome = (lv_resourceModifier * libSCPL_gv_constants.lv_harvesterIncomeMinerals);
    libSCPL_gf_ResourceDisplayGainAdd(lv_playerIndex, lv_resourceIncome, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ResourceDisplayMineralDestroy_Init () {
    libSCPL_gt_ResourceDisplayMineralDestroy = TriggerCreate("libSCPL_gt_ResourceDisplayMineralDestroy_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_ResourceDisplayMineralDestroy, null, "GameResourceMarkerMinerals", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Display Mineral Rich Destroy
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ResourceDisplayMineralRichDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_resourceModifier;
    fixed lv_resourceIncome;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_resourceModifier = 0.714;
    lv_resourceIncome = (lv_resourceModifier * libSCPL_gv_constants.lv_harvesterIncomeMineralsRich);
    libSCPL_gf_ResourceDisplayGainAdd(lv_playerIndex, lv_resourceIncome, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ResourceDisplayMineralRichDestroy_Init () {
    libSCPL_gt_ResourceDisplayMineralRichDestroy = TriggerCreate("libSCPL_gt_ResourceDisplayMineralRichDestroy_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_ResourceDisplayMineralRichDestroy, null, "GameResourceMarkerMineralsRich", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Display Mineral MULE Destroy
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ResourceDisplayMineralMULEDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_resourceModifier;
    fixed lv_resourceIncome;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    if ((lv_playerIndex == 16)) {
        return true;
    }
    lv_resourceModifier = 0.714;
    lv_resourceIncome = (lv_resourceModifier * libSCPL_gv_constants.lv_harvesterIncomeMineralsMULE);
    libSCPL_gf_ResourceDisplayGainAdd(lv_playerIndex, lv_resourceIncome, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ResourceDisplayMineralMULEDestroy_Init () {
    libSCPL_gt_ResourceDisplayMineralMULEDestroy = TriggerCreate("libSCPL_gt_ResourceDisplayMineralMULEDestroy_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_ResourceDisplayMineralMULEDestroy, null, "GameResourceMarkerMineralsMULE", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Display Mineral MULE Death
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ResourceDisplayMineralMULEDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_resourceModifier;
    fixed lv_resourceIncome;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MULE"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "GameResourceMarkerMineralsMULE") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_resourceModifier = 0.714;
    lv_resourceIncome = (lv_resourceModifier * libSCPL_gv_constants.lv_harvesterIncomeMineralsMULE);
    libSCPL_gf_ResourceDisplayGainAdd(lv_playerIndex, lv_resourceIncome, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ResourceDisplayMineralMULEDeath_Init () {
    libSCPL_gt_ResourceDisplayMineralMULEDeath = TriggerCreate("libSCPL_gt_ResourceDisplayMineralMULEDeath_Func");
    TriggerAddEventUnitDied(libSCPL_gt_ResourceDisplayMineralMULEDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Display Vespene Destroy
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ResourceDisplayVespeneDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_resourceModifier;
    fixed lv_resourceIncome;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    lv_resourceModifier = 0.714;
    lv_resourceIncome = (lv_resourceModifier * libSCPL_gv_constants.lv_harvesterIncomeVespene);
    libSCPL_gf_ResourceDisplayGainAdd(lv_playerIndex, 0.0, lv_resourceIncome);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ResourceDisplayVespeneDestroy_Init () {
    libSCPL_gt_ResourceDisplayVespeneDestroy = TriggerCreate("libSCPL_gt_ResourceDisplayVespeneDestroy_Func");
    TriggerAddEventUnitBehaviorChange(libSCPL_gt_ResourceDisplayVespeneDestroy, null, "GameResourceMarkerVespene", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Display Spend
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ResourceDisplaySpend_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    string lv_parameter;
    int lv_playerIndex;
    fixed lv_gameSpeedFactor;
    fixed lv_net;
    fixed lv_spend;
    string lv_spendDisplay;

    // Variable Initialization
    lv_event = "";
    lv_parameter = "";
    lv_spendDisplay = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_event = libSCPL_ge_GenericEvent_Ident(libSCPL_ge_GenericEvent_ResourceSpend);
    lv_parameter = libSCPL_ge_GenericParameter_Ident(libSCPL_ge_GenericParameter_TriggeringPlayer);
    lv_playerIndex = DataTableGetInt(false, TriggerEventParamName(lv_event, lv_parameter));
    lv_gameSpeedFactor = libSCPL_gv_constants.lv_gameSpeedFactor;
    DialogControlSetVisible(libSCPL_gv_uI.lv_resourceMineralSpend, PlayerGroupSingle(lv_playerIndex), true);
    DialogControlSetVisible(libSCPL_gv_uI.lv_resourceVespeneSpend, PlayerGroupSingle(lv_playerIndex), true);
    lv_spend = (libSCPL_gv_player[lv_playerIndex].lv_resourceSpendMinerals / (lv_gameSpeedFactor * libSCPL_gv_constants.lv_spendTickIncrement));
    lv_net = (libSCPL_gv_player[lv_playerIndex].lv_resourceGainMinerals + libSCPL_gv_player[lv_playerIndex].lv_resourceSpendMinerals);
    lv_net = (lv_net / (lv_gameSpeedFactor * libSCPL_gv_constants.lv_spendTickIncrement));
    lv_net = Round(lv_net);
    if ((lv_net > 0.0)) {
        lv_spendDisplay = ("( - " + FixedToString(lv_net, 0) + ")");
        libNtve_gf_SetDialogItemText(libSCPL_gv_uI.lv_resourceMineralSpend, StringToText(lv_spendDisplay), PlayerGroupSingle(lv_playerIndex));
        DialogControlSetAnimationState(libSCPL_gv_uI.lv_resourceMineralSpend, PlayerGroupSingle(lv_playerIndex), "ResourceState", "Negative");
        libSCPL_gf_GameTipCreateResource("GlobalEconomyOutspending", ("ResourceMinerals"), lv_playerIndex);
    }
    else {
        lv_net = (-1.0 * lv_net);
        lv_spendDisplay = ("( + " + FixedToString(lv_net, 0) + ")");
        libNtve_gf_SetDialogItemText(libSCPL_gv_uI.lv_resourceMineralSpend, StringToText(lv_spendDisplay), PlayerGroupSingle(lv_playerIndex));
        if ((lv_net == 0.0)) {
            DialogControlSetAnimationState(libSCPL_gv_uI.lv_resourceMineralSpend, PlayerGroupSingle(lv_playerIndex), "ResourceState", "Neutral");
        }
        else {
            DialogControlSetAnimationState(libSCPL_gv_uI.lv_resourceMineralSpend, PlayerGroupSingle(lv_playerIndex), "ResourceState", "Positive");
        }
    }
    if ((lv_spend > libSCPL_gf_PlayerAvailableMinerals(lv_playerIndex))) {
        DialogControlSetVisible(libSCPL_gv_uI.lv_resourceMineralSpendAttention, PlayerGroupSingle(lv_playerIndex), true);
        libSCPL_gf_GameTipCreateResource("GlobalEconomyDepleted", ("ResourceMinerals"), lv_playerIndex);
    }
    else {
        DialogControlSetVisible(libSCPL_gv_uI.lv_resourceMineralSpendAttention, PlayerGroupSingle(lv_playerIndex), false);
    }
    lv_spend = (libSCPL_gv_player[lv_playerIndex].lv_resourceSpendVespene / (lv_gameSpeedFactor * libSCPL_gv_constants.lv_spendTickIncrement));
    lv_net = (libSCPL_gv_player[lv_playerIndex].lv_resourceGainVespene + libSCPL_gv_player[lv_playerIndex].lv_resourceSpendVespene);
    lv_net = (lv_net / (lv_gameSpeedFactor * libSCPL_gv_constants.lv_spendTickIncrement));
    lv_net = Round(lv_net);
    if ((lv_net > 0.0)) {
        lv_spendDisplay = ("( - " + FixedToString(lv_net, 0) + ")");
        libNtve_gf_SetDialogItemText(libSCPL_gv_uI.lv_resourceVespeneSpend, StringToText(lv_spendDisplay), PlayerGroupSingle(lv_playerIndex));
        DialogControlSetAnimationState(libSCPL_gv_uI.lv_resourceVespeneSpend, PlayerGroupSingle(lv_playerIndex), "ResourceState", "Negative");
        libSCPL_gf_GameTipCreateResource("GlobalEconomyOutspending", ("ResourceVespene"), lv_playerIndex);
    }
    else {
        lv_net = (-1.0 * lv_net);
        lv_spendDisplay = ("( + " + FixedToString(lv_net, 0) + ")");
        libNtve_gf_SetDialogItemText(libSCPL_gv_uI.lv_resourceVespeneSpend, StringToText(lv_spendDisplay), PlayerGroupSingle(lv_playerIndex));
        if ((lv_net == 0.0)) {
            DialogControlSetAnimationState(libSCPL_gv_uI.lv_resourceVespeneSpend, PlayerGroupSingle(lv_playerIndex), "ResourceState", "Neutral");
        }
        else {
            DialogControlSetAnimationState(libSCPL_gv_uI.lv_resourceVespeneSpend, PlayerGroupSingle(lv_playerIndex), "ResourceState", "Positive");
        }
    }
    if ((lv_spend > libSCPL_gf_PlayerAvailableVespene(lv_playerIndex))) {
        DialogControlSetVisible(libSCPL_gv_uI.lv_resourceVespeneSpendAttention, PlayerGroupSingle(lv_playerIndex), true);
        libSCPL_gf_GameTipCreateResource("GlobalEconomyDepleted", ("ResourceVespene"), lv_playerIndex);
    }
    else {
        DialogControlSetVisible(libSCPL_gv_uI.lv_resourceVespeneSpendAttention, PlayerGroupSingle(lv_playerIndex), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ResourceDisplaySpend_Init () {
    libSCPL_gt_ResourceDisplaySpend = TriggerCreate("libSCPL_gt_ResourceDisplaySpend_Func");
    libSCPL_gf_ResourceSpendChanges(libSCPL_gt_ResourceDisplaySpend);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Assign
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupAssign_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_controlGroupIndex;
    unitgroup lv_selectedUnits;

    // Variable Initialization
    lv_selectedUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_controlGroupIndex = FixedToInt(libNtve_gf_DialogItemValue(EventDialogControl(), lv_playerIndex));
    lv_selectedUnits = UnitGroupSelected(lv_playerIndex);
    libSCPL_gf_ControlGroupUnitsAssign(lv_selectedUnits, lv_controlGroupIndex, lv_playerIndex);
    libSCPL_gf_ControlGroupUnitsUpdate(lv_controlGroupIndex, lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupAssign_Init () {
    libSCPL_gt_ControlGroupAssign = TriggerCreate("libSCPL_gt_ControlGroupAssign_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Add
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_controlGroupIndex;
    unitgroup lv_selectedUnits;

    // Variable Initialization
    lv_selectedUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_controlGroupIndex = FixedToInt(libNtve_gf_DialogItemValue(EventDialogControl(), lv_playerIndex));
    lv_selectedUnits = UnitGroupSelected(lv_playerIndex);
    libSCPL_gf_ControlGroupUnitsAdd(lv_selectedUnits, lv_controlGroupIndex, lv_playerIndex);
    libSCPL_gf_ControlGroupUnitsUpdate(lv_controlGroupIndex, lv_playerIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupAdd_Init () {
    libSCPL_gt_ControlGroupAdd = TriggerCreate("libSCPL_gt_ControlGroupAdd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Select
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupSelect_Func (bool testConds, bool runActions) {
    int autoDBDEED2D_ae;
    int autoDBDEED2D_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_controlGroupIndex;
    point lv_cameraPoint;
    int lv_n;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = EventPlayer();
    lv_controlGroupIndex = FixedToInt(libNtve_gf_DialogItemValue(EventDialogControl(), lv_playerIndex));
    UnitClearSelection(lv_playerIndex);
    autoDBDEED2D_ae = 8;
    autoDBDEED2D_ai = 1;
    lv_n = 1;
    for ( ; ( (autoDBDEED2D_ai >= 0 && lv_n <= autoDBDEED2D_ae) || (autoDBDEED2D_ai <= 0 && lv_n >= autoDBDEED2D_ae) ) ; lv_n += autoDBDEED2D_ai ) {
        UnitGroupSelect(libSCPL_gv_player[lv_playerIndex].lv_controlGroup[lv_n], lv_playerIndex, false);
    }
    UnitGroupSelect(libSCPL_gv_player[lv_playerIndex].lv_controlGroup[lv_controlGroupIndex], lv_playerIndex, true);
    libSCPL_gf_GameTipCreateControlGroup("GlobalControlGroupSelected", lv_controlGroupIndex, lv_playerIndex);
    if ((TimerGetRemaining(libSCPL_gv_player[lv_playerIndex].lv_controlGroupJumpTimer[lv_controlGroupIndex]) > 0.0)) {
        if ((UnitGroupCount(libSCPL_gv_player[lv_playerIndex].lv_controlGroup[lv_controlGroupIndex], c_unitCountAlive) > 0)) {
            lv_cameraPoint = UnitGetPosition(UnitGroupClosestToPoint(libSCPL_gv_player[lv_playerIndex].lv_controlGroup[lv_controlGroupIndex], CameraGetTarget(lv_playerIndex)));
            CameraPan(lv_playerIndex, lv_cameraPoint, 0.0, -1, 10.0, false);
        }
    }
    else {
        libPPRL_gf_AddTimeToTimer(libSCPL_gv_player[lv_playerIndex].lv_controlGroupJumpTimer[lv_controlGroupIndex], 0.375);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupSelect_Init () {
    libSCPL_gt_ControlGroupSelect = TriggerCreate("libSCPL_gt_ControlGroupSelect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Unit Death
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupUnitDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_playerIndex;
    int lv_controlGroupIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    libSCPL_gf_ControlGroupUnitsUpdateFromUnit(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupUnitDeath_Init () {
    libSCPL_gt_ControlGroupUnitDeath = TriggerCreate("libSCPL_gt_ControlGroupUnitDeath_Func");
    TriggerAddEventUnitDied(libSCPL_gt_ControlGroupUnitDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Unit Morph Complete
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupUnitMorphComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_ControlGroupUnitsUpdateFromUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupUnitMorphComplete_Init () {
    libSCPL_gt_ControlGroupUnitMorphComplete = TriggerCreate("libSCPL_gt_ControlGroupUnitMorphComplete_Func");
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("UpgradeToOrbital", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("MorphToMothership", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("UpgradeToLair", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("UpgradeToHive", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("UpgradeToLurkerDenMP", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("MorphToOverseer", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("MorphToTransportOverlord", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("MorphToRavager", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("MorphToLurker", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libSCPL_gt_ControlGroupUnitMorphComplete, null, AbilityCommand("MorphToBroodLord", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Archon
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupArchon_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_ControlGroupUnitPreserve(EventUnit(), EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupArchon_Init () {
    libSCPL_gt_ControlGroupArchon = TriggerCreate("libSCPL_gt_ControlGroupArchon_Func");
    TriggerAddEventUnitCreated(libSCPL_gt_ControlGroupArchon, null, "ArchonWarp", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Baneling
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupBaneling_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "Baneling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_ControlGroupUnitPreserve(EventUnit(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupBaneling_Init () {
    libSCPL_gt_ControlGroupBaneling = TriggerCreate("libSCPL_gt_ControlGroupBaneling_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_ControlGroupBaneling, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Baneling Finish
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupBanelingFinish_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "Baneling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCPL_gf_ControlGroupUnitPreserve(EventUnit(), EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupBanelingFinish_Init () {
    libSCPL_gt_ControlGroupBanelingFinish = TriggerCreate("libSCPL_gt_ControlGroupBanelingFinish_Func");
    TriggerAddEventUnitTrainProgress(libSCPL_gt_ControlGroupBanelingFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Unit Damaged
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupUnitDamaged_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libSCPL_gt_ControlGroupUnitDamagedGroupUpdate, true);
    libSCPL_gf_ControlGroupDamagePulse(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupUnitDamaged_Init () {
    libSCPL_gt_ControlGroupUnitDamaged = TriggerCreate("libSCPL_gt_ControlGroupUnitDamaged_Func");
    TriggerAddEventUnitDamaged(libSCPL_gt_ControlGroupUnitDamaged, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group Unit Damaged Group Update
//--------------------------------------------------------------------------------------------------
bool libSCPL_gt_ControlGroupUnitDamagedGroupUpdate_Func (bool testConds, bool runActions) {
    playergroup auto0AE1B3D7_g;
    int auto0AE1B3D7_p;
    int autoB1A98539_ae;
    int autoB1A98539_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_controlGroupIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libSCPL_gt_ControlGroupUnitDamagedGroupUpdate, false);
    auto0AE1B3D7_g = PlayerGroupActive(); 
    auto0AE1B3D7_p = 1;
    for ( ; auto0AE1B3D7_p <= PlayerGroupCount(auto0AE1B3D7_g) ; auto0AE1B3D7_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto0AE1B3D7_g, auto0AE1B3D7_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto0AE1B3D7_g, auto0AE1B3D7_p);
        autoB1A98539_ae = 8;
        autoB1A98539_ai = 1;
        lv_controlGroupIndex = 1;
        for ( ; ( (autoB1A98539_ai >= 0 && lv_controlGroupIndex <= autoB1A98539_ae) || (autoB1A98539_ai <= 0 && lv_controlGroupIndex >= autoB1A98539_ae) ) ; lv_controlGroupIndex += autoB1A98539_ai ) {
            libSCPL_gf_ControlGroupColorize(lv_playerIndex, lv_controlGroupIndex);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCPL_gt_ControlGroupUnitDamagedGroupUpdate_Init () {
    libSCPL_gt_ControlGroupUnitDamagedGroupUpdate = TriggerCreate("libSCPL_gt_ControlGroupUnitDamagedGroupUpdate_Func");
    TriggerEnable(libSCPL_gt_ControlGroupUnitDamagedGroupUpdate, false);
    TriggerAddEventTimePeriodic(libSCPL_gt_ControlGroupUnitDamagedGroupUpdate, 0.1875, c_timeGame);
}

void libSCPL_InitTriggers () {
    libSCPL_gt_InitializationPlus_Init();
    libSCPL_gt_UCBMorphCommand_Init();
    libSCPL_gt_ProgressMorphRefund01_Init();
    libSCPL_gt_ProgressMorphStart01_Init();
    libSCPL_gt_ProgressMorphRefund02_Init();
    libSCPL_gt_ProgressMorphStart02_Init();
    libSCPL_gt_ProgressMorphCancel_Init();
    libSCPL_gt_ProgressUpgradeRefund_Init();
    libSCPL_gt_ProgressUpgradeStart_Init();
    libSCPL_gt_ProgressProtossUpgradeStart_Init();
    libSCPL_gt_ProgressProtossUpgradeCancel_Init();
    libSCPL_gt_ProgressArmamentStartRefund_Init();
    libSCPL_gt_ProgressArmamentStart_Init();
    libSCPL_gt_ProgressBuildingStartRefund_Init();
    libSCPL_gt_ProgressBuildingStart_Init();
    libSCPL_gt_ProgressBuildingSCVStart_Init();
    libSCPL_gt_ProgressBuildingSCVResume_Init();
    libSCPL_gt_ProgressBuildingSCVRefundUndo_Init();
    libSCPL_gt_ProgressBuildingCancel_Init();
    libSCPL_gt_ProgressUnitStartRefund_Init();
    libSCPL_gt_ProgressUnitInterceptorAdjustment_Init();
    libSCPL_gt_ProgressUnitStartRefundTerranDummy_Init();
    libSCPL_gt_ProgressUnitStart_Init();
    libSCPL_gt_ProgressProtossUnitStart_Init();
    libSCPL_gt_ProgressProtossUnitCancel_Init();
    libSCPL_gt_ProgressTrainWarpGateRefund_Init();
    libSCPL_gt_ProgressUnitStartCommented_Init();
    libSCPL_gt_ProgressUnitStartCommentedTest_Init();
    libSCPL_gt_ProgressUnitCancelCommented_Init();
    libSCPL_gt_GlobalRally00TargetCreated_Init();
    libSCPL_gt_GlobalRally01TargetCreated_Init();
    libSCPL_gt_GlobalRally02TargetCreated_Init();
    libSCPL_gt_GlobalRally00ProducerCreated_Init();
    libSCPL_gt_GlobalRally01ProducerCreated_Init();
    libSCPL_gt_GlobalRally02ProducerCreated_Init();
    libSCPL_gt_GlobalRally00ProducerCreatedZerg_Init();
    libSCPL_gt_GlobalRally01ProducerCreatedZerg_Init();
    libSCPL_gt_GlobalRally02ProducerCreatedZerg_Init();
    libSCPL_gt_GlobalRallyProtossWarpGateUnitCreated_Init();
    libSCPL_gt_GlobalRally00AttachUnit_Init();
    libSCPL_gt_GlobalRally01AttachUnit_Init();
    libSCPL_gt_GlobalRally02AttachUnit_Init();
    libSCPL_gt_ControlGroupAutoAddToggleT1_Init();
    libSCPL_gt_ControlGroupAutoAddToggleT2_Init();
    libSCPL_gt_ControlGroupAutoAddToggleT3_Init();
    libSCPL_gt_ControlGroupAutoAddT1_Init();
    libSCPL_gt_ControlGroupAutoAddT2_Init();
    libSCPL_gt_ControlGroupAutoAddT3_Init();
    libSCPL_gt_ControlGroupAutoAddT1Zerg_Init();
    libSCPL_gt_ControlGroupAutoAddT2Zerg_Init();
    libSCPL_gt_ControlGroupAutoAddT3Zerg_Init();
    libSCPL_gt_AutoWorkerProductionCheckWorkerSlot_Init();
    libSCPL_gt_AutoWorkerProductionCheckWorkerSlotZerg_Init();
    libSCPL_gt_AutoWorkerProductionCheckVespeneHarvester_Init();
    libSCPL_gt_AutoWorkerProductionCheckVespeneHarvesterZerg_Init();
    libSCPL_gt_AutoWorkerProductionCheckMorphConstructionZerg_Init();
    libSCPL_gt_AutoWorkerProductionCheckTownHallUpgrade_Init();
    libSCPL_gt_AutoWorkerProductionCheckTownHallLand_Init();
    libSCPL_gt_AutoWorkerProductionCheckExpansion_Init();
    libSCPL_gt_AutoWorkerVespeneTappedTransfer_Init();
    libSCPL_gt_AutoWorkerVespeneAvailableCheck_Init();
    libSCPL_gt_AutoWorkerSetHarvestState_Init();
    libSCPL_gt_AutoWorkerSetHarvestStateNone_Init();
    libSCPL_gt_AutoWorkerSetConstructionState_Init();
    libSCPL_gt_AutoWorkerIdleHarvestResume_Init();
    libSCPL_gt_UnitLifeAndShieldScalingOnCreation_Init();
    libSCPL_gt_WarpGateResearchUpgradeAllGateways_Init();
    libSCPL_gt_WarpGateResearchGatewayBuilt_Init();
    libSCPL_gt_WarpGateChargeCountAdd_Init();
    libSCPL_gt_WarpGateChargeCountRemove_Init();
    libSCPL_gt_WarpGatesChargeRestore_Init();
    libSCPL_gt_NexusChargeCountAdd_Init();
    libSCPL_gt_NexusChargeCountRemove_Init();
    libSCPL_gt_UCBChargeLinkArchonMorph_Init();
    libSCPL_gt_BarracksTrainStartStop_Init();
    libSCPL_gt_MuleHarvestNearestResoures_Init();
    libSCPL_gt_UCBChargeLinkBarracksAddonCreate_Init();
    libSCPL_gt_UCBChargeLinkBarracksAddonDestroy_Init();
    libSCPL_gt_UCBChargeLinkFactoryAddonCreate_Init();
    libSCPL_gt_UCBChargeLinkFactoryAddonDestroy_Init();
    libSCPL_gt_UCBChargeLinkStarportAddonCreate_Init();
    libSCPL_gt_UCBChargeLinkStarportAddonDestroy_Init();
    libSCPL_gt_UCBChargeLinkCommandCenterMorphStart_Init();
    libSCPL_gt_UCBChargeLinkCommandCenterMorphCancel_Init();
    libSCPL_gt_UCBAutoWallRaise_Init();
    libSCPL_gt_UCBAutoWallLower_Init();
    libSCPL_gt_UCBAutoWallToggleOn_Init();
    libSCPL_gt_UCBAutoWallToggleOff_Init();
    libSCPL_gt_PlayerAutoWallUnitCreated_Init();
    libSCPL_gt_UCBAddonTest_Init();
    libSCPL_gt_UCBAddonTestEnd_Init();
    libSCPL_gt_PlayerZergNydusWormPlacementRedirect_Init();
    libSCPL_gt_AutoCreepTumorLineageParent_Init();
    libSCPL_gt_AutoCreepTumorLineageSpread_Init();
    libSCPL_gt_AutoCreepTumorLineageChild_Init();
    libSCPL_gt_AutoCreepTumorNodeTargetReached_Init();
    libSCPL_gt_AutoCreepDebugDestroy_Init();
    libSCPL_gt_UCBChargeLinkHydraliskDenMorphStart_Init();
    libSCPL_gt_UCBChargeLinkHydraliskDenMorphCancel_Init();
    libSCPL_gt_UCBChargeLinkSpireMorphStart_Init();
    libSCPL_gt_UCBChargeLinkSpireMorphCancel_Init();
    libSCPL_gt_UCBChargeLinkHatcheryMorphStart_Init();
    libSCPL_gt_UCBChargeLinkHatcheryMorphCancel_Init();
    libSCPL_gt_UCBChargeLinkLairMorphStart_Init();
    libSCPL_gt_UCBChargeLinkLairMorphCancel_Init();
    libSCPL_gt_UCBChargeLinkZerglingMorphStart_Init();
    libSCPL_gt_UCBChargeLinkZerglingMorphCancel_Init();
    libSCPL_gt_UCBChargeLinkOverlordMorphStart_Init();
    libSCPL_gt_UCBChargeLinkOverlordMorphCancel_Init();
    libSCPL_gt_UCBChargeLinkRavagerMorphStart_Init();
    libSCPL_gt_UCBChargeLinkRavagerMorphCancel_Init();
    libSCPL_gt_UCBChargeLinkLurkerMorphStart_Init();
    libSCPL_gt_UCBChargeLinkLurkerMorphCancel_Init();
    libSCPL_gt_UCBChargeLinkBroodlordMorphStart_Init();
    libSCPL_gt_UCBChargeLinkBroodlordMorphCancel_Init();
    libSCPL_gt_UCBAutoCreepSpreadToggleOn_Init();
    libSCPL_gt_UCBAutoCreepSpreadToggleOff_Init();
    libSCPL_gt_PlayerAutoCreepSpreadUnitCreated_Init();
    libSCPL_gt_UCBAutoLarvaSpawnToggleOn_Init();
    libSCPL_gt_UCBAutoLarvaSpawnToggleOff_Init();
    libSCPL_gt_PlayerAutoLarvaSpawnUnitCreated_Init();
    libSCPL_gt_UCBAutoDroneMorphToggleOn_Init();
    libSCPL_gt_UCBAutoDroneMorphToggleOff_Init();
    libSCPL_gt_GameTip_OptionShowTipsChecked_Init();
    libSCPL_gt_GameTip_GlobalWelcome_Init();
    libSCPL_gt_GameTip_GlobalControlGroupComposition_Init();
    libSCPL_gt_GameTip_GlobalEconomySupplyCap_Init();
    libSCPL_gt_GameTip_GlobalEconomySupplyBlocked_Init();
    libSCPL_gt_GameTip_GlobalEconomyVespene_Init();
    libSCPL_gt_GameTip_GlobalExpansion_Init();
    libSCPL_gt_GameTip_TerranTutorial01_Init();
    libSCPL_gt_GameTip_TerranTutorial02_Init();
    libSCPL_gt_GameTip_TerranTutorial03_Init();
    libSCPL_gt_GameTip_TerranAddonTechLab_Init();
    libSCPL_gt_GameTip_TerranAddonReactor_Init();
    libSCPL_gt_GameTip_TerranBarracksTwo_Init();
    libSCPL_gt_GameTip_TerranFactory_Init();
    libSCPL_gt_GameTip_TerranFactoryUnit_Init();
    libSCPL_gt_GameTip_ProtossTutorial01_Init();
    libSCPL_gt_GameTip_ProtossTutorial02_Init();
    libSCPL_gt_GameTip_ProtossTutorial03_Init();
    libSCPL_gt_GameTip_ProtossTutorial04_Init();
    libSCPL_gt_GameTip_ProtossMothershipCore_Init();
    libSCPL_gt_GameTip_ProtossGatewayTwo_Init();
    libSCPL_gt_GameTip_ProtossGatewayTwoWarpgate_Init();
    libSCPL_gt_GameTip_ProtossRobotics_Init();
    libSCPL_gt_GameTip_ProtossRoboticsUnit_Init();
    libSCPL_gt_GameTip_ProtossWarpInSlow_Init();
    libSCPL_gt_GameTip_ZergTutorial01_Init();
    libSCPL_gt_GameTip_ZergTutorial02_Init();
    libSCPL_gt_GameTip_ZergTutorial03_Init();
    libSCPL_gt_GameTip_ZergTutorial04_Init();
    libSCPL_gt_GameTip_ZergTutorial05_Init();
    libSCPL_gt_GameTip_ZergGlobalRallyRanged_Init();
    libSCPL_gt_GameTip_ZergAutoDrones_Init();
    libSCPL_gt_GameTip_ZergOverlord_Init();
    libSCPL_gt_UpgradeNotificationsInitialization_Init();
    libSCPL_gt_UpgradeNotificationsResearchStarted_Init();
    libSCPL_gt_UpgradeNotificationsResearchCancelled_Init();
    libSCPL_gt_UpgradeNotificationsResearchCompleted_Init();
    libSCPL_gt_UpgradeNotificationsDestructionTimerRunsOut_Init();
    libSCPL_gt_LabelsPlusUnitCreated_Init();
    libSCPL_gt_LabelsPlusUnitTrainingStarted_Init();
    libSCPL_gt_LabelsPlusUnitTrainingStopped_Init();
    libSCPL_gt_LabelsPlusUnitTrainingReactorDestroyed_Init();
    libSCPL_gt_LabelsPlusResearchStarted_Init();
    libSCPL_gt_LabelsPlusResearchStopped_Init();
    libSCPL_gt_LabelsPlusConstructionStarted_Init();
    libSCPL_gt_LabelsPlusConstructionStopped_Init();
    libSCPL_gt_LabelsPlusMorphStarted_Init();
    libSCPL_gt_LabelsPlusMorphStopped_Init();
    libSCPL_gt_ResourceDisplayMineralCreate_Init();
    libSCPL_gt_ResourceDisplayMineralRichCreate_Init();
    libSCPL_gt_ResourceDisplayMineralMULECreate_Init();
    libSCPL_gt_ResourceDisplayVespeneCreate_Init();
    libSCPL_gt_ResourceDisplayMineralDestroy_Init();
    libSCPL_gt_ResourceDisplayMineralRichDestroy_Init();
    libSCPL_gt_ResourceDisplayMineralMULEDestroy_Init();
    libSCPL_gt_ResourceDisplayMineralMULEDeath_Init();
    libSCPL_gt_ResourceDisplayVespeneDestroy_Init();
    libSCPL_gt_ResourceDisplaySpend_Init();
    libSCPL_gt_ControlGroupAssign_Init();
    libSCPL_gt_ControlGroupAdd_Init();
    libSCPL_gt_ControlGroupSelect_Init();
    libSCPL_gt_ControlGroupUnitDeath_Init();
    libSCPL_gt_ControlGroupUnitMorphComplete_Init();
    libSCPL_gt_ControlGroupArchon_Init();
    libSCPL_gt_ControlGroupBaneling_Init();
    libSCPL_gt_ControlGroupBanelingFinish_Init();
    libSCPL_gt_ControlGroupUnitDamaged_Init();
    libSCPL_gt_ControlGroupUnitDamagedGroupUpdate_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libSCPL_InitLib_completed = false;

void libSCPL_InitLib () {
    if (libSCPL_InitLib_completed) {
        return;
    }

    libSCPL_InitLib_completed = true;

    libSCPL_InitLibraries();
    libSCPL_InitVariables();
    libSCPL_InitTriggers();
}

include "LibPPRL"


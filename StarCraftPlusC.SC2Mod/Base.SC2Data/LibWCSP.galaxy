include "TriggerLibs/NativeLib"

include "LibWCSP_h"

//--------------------------------------------------------------------------------------------------
// Library: WCS_Pirated Lib
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libWCSP_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libWCSP_InitVariables_completed = false;

void libWCSP_InitVariables () {
    int init_i1;

    if (libWCSP_InitVariables_completed) {
        return;
    }

    libWCSP_InitVariables_completed = true;

    libWCSP_gv_labels.lv_iconSize = 50;
    libWCSP_gv_labels.lv_iconSizeEgg = 35;
    libWCSP_gv_labels.lv_iconSizeTechLab = 45;
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libWCSP_gv_labels.lv_colorStrings[init_i1] = "";
    }
    libWCSP_gv_labelsObs = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));
    for (init_i1 = 0; init_i1 <= libWCSP_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libWCSP_gv_upgradeNotifications.lv_itemIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libWCSP_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libWCSP_gv_upgradeNotifications.lv_itemName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libWCSP_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libWCSP_gv_upgradeNotifications.lv_itemPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libWCSP_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libWCSP_gv_upgradeNotifications.lv_itemProgressBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libWCSP_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libWCSP_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libWCSP_gv_upgradeNotifications.lv_itemTimerLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libWCSP_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libWCSP_gv_upgradeNotifications.lv_timerDestruction[init_i1] = TimerCreate();
    }
    libWCSP_gv_upgradeNotifications.lv_slotLastUsed = -1;
    libWCSP_gv_upgradeNotificationsObs = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));
    libWCSP_gv_upgradeNotificationsObsID = CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny);
}

// Presets
// Functions
bool libWCSP_gf_LabelsUnitUsesCustomStatusBar (unit lp_unit) {
    // Variable Declarations
    bool lv_boolean;

    // Variable Initialization

    // Implementation
    if (((UnitGetType(lp_unit) == "Armory") || (UnitGetType(lp_unit) == "Barracks") || (UnitGetType(lp_unit) == "CommandCenter") || (UnitGetType(lp_unit) == "EngineeringBay") || (UnitGetType(lp_unit) == "Factory") || (UnitGetType(lp_unit) == "FusionCore") || (UnitGetType(lp_unit) == "GhostAcademy") || (UnitGetType(lp_unit) == "OrbitalCommand") || (UnitGetType(lp_unit) == "PlanetaryFortress") || (UnitGetType(lp_unit) == "Starport") || (UnitGetType(lp_unit) == "TechLab") || (UnitGetType(lp_unit) == "BarracksTechLab") || (UnitGetType(lp_unit) == "FactoryTechLab") || (UnitGetType(lp_unit) == "StarportTechLab") || (UnitGetType(lp_unit) == "SupplyDepotConstructor") || (UnitGetType(lp_unit) == "Refinery") || (UnitGetType(lp_unit) == "MissileTurret") || (UnitGetType(lp_unit) == "SensorTower") || (UnitGetType(lp_unit) == "Bunker") || (UnitGetType(lp_unit) == "Reactor") || (UnitGetType(lp_unit) == "BarracksReactor") || (UnitGetType(lp_unit) == "FactoryReactor") || (UnitGetType(lp_unit) == "StarportReactor"))) {
        lv_boolean = true;
    }
    else {
        lv_boolean = false;
    }
    return lv_boolean;
}

int libWCSP_gf_LabelsUnitIconSize (unit lp_productionUnit) {
    // Variable Declarations
    int lv_iconSize;

    // Variable Initialization

    // Implementation
    lv_iconSize = libWCSP_gv_labels.lv_iconSize;
    if (((UnitGetType(lp_productionUnit) == "Egg") || (UnitGetType(lp_productionUnit) == "Larva"))) {
        lv_iconSize = libWCSP_gv_labels.lv_iconSizeEgg;
    }
    else if (((UnitGetType(lp_productionUnit) == "TechLab") || (UnitGetType(lp_productionUnit) == "BarracksTechLab") || (UnitGetType(lp_productionUnit) == "FactoryTechLab") || (UnitGetType(lp_productionUnit) == "StarportTechLab"))) {
        lv_iconSize = libWCSP_gv_labels.lv_iconSizeTechLab;
    }
    return lv_iconSize;
}

void libWCSP_gf_UpgradeNotificationsRemoveRunningUpgrade (int lp_slot) {
    int autoD79BA130_ae;
    int autoD79BA130_ai;

    // Variable Declarations
    int lv_count;
    string lv_upgrade;
    int lv_sLOT_MAX_INDEX1;

    // Variable Initialization
    lv_sLOT_MAX_INDEX1 = (libWCSP_gv_upgradeNotificationsMaxUISlots + 1);

    // Implementation
    autoD79BA130_ae = libWCSP_gv_upgradeNotifications.lv_slotLastUsed;
    autoD79BA130_ai = 1;
    lv_count = (lp_slot + 1);
    for ( ; ( (autoD79BA130_ai >= 0 && lv_count <= autoD79BA130_ae) || (autoD79BA130_ai <= 0 && lv_count >= autoD79BA130_ae) ) ; lv_count += autoD79BA130_ai ) {
        if ((lv_count <= libWCSP_gv_upgradeNotificationsMaxUISlots)) {
            libWCSP_gf_UpgradeNotificationsSetSlotData((lv_count - 1), libNtve_gf_DialogItemText(libWCSP_gv_upgradeNotifications.lv_itemName[lv_count], libWCSP_gv_upgradeNotificationsObsID), (libNtve_gf_DialogItemImage(libWCSP_gv_upgradeNotifications.lv_itemIcon[lv_count], libWCSP_gv_upgradeNotificationsObsID)), libNtve_gf_DialogItemColor(libWCSP_gv_upgradeNotifications.lv_itemPanel[lv_count], libWCSP_gv_upgradeNotificationsObsID), DialogControlIsVisible(libWCSP_gv_upgradeNotifications.lv_itemPanel[lv_count], libWCSP_gv_upgradeNotificationsObsID));
            libWCSP_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)] = libWCSP_gv_upgradeNotifications.lv_timerDestruction[lv_count];
            libNtve_gf_SetDialogItemCurrentValue(libWCSP_gv_upgradeNotifications.lv_itemProgressBar[(lv_count - 1)], libNtve_gf_DialogItemValue(libWCSP_gv_upgradeNotifications.lv_itemProgressBar[lv_count], libWCSP_gv_upgradeNotificationsObsID), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], libNtve_gf_DialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerLabel[lv_count], libWCSP_gv_upgradeNotificationsObsID), PlayerGroupAll());
            libWCSP_gv_upgradeNotifications.lv_slotStatus[(lv_count - 1)] = libWCSP_gv_upgradeNotifications.lv_slotStatus[lv_count];
            if ((TimerGetElapsed(libWCSP_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)]) <= 0.0)) {
                libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], StringToText(""), PlayerGroupAll());
                DialogControlSetVisible(libWCSP_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], PlayerGroupAll(), true);
                DialogControlSetVisible(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], PlayerGroupAll(), false);
            }
            else {
                libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], libNtve_gf_DialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[lv_count], libWCSP_gv_upgradeNotificationsObsID), libWCSP_gv_upgradeNotificationsObs);
            }
        }
        else {
            libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], libNtve_gf_DialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[lv_count], libWCSP_gv_upgradeNotificationsObsID), libWCSP_gv_upgradeNotificationsObs);
            if ((lv_count == lv_sLOT_MAX_INDEX1)) {
                lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(libWCSP_gv_upgradeNotifications.lv_slotFacility[lv_count], 1, 1);
                libWCSP_gf_UpgradeNotificationsSetSlotData((lv_count - 1), libWCSP_gf_UpgradeNotificationsUpgradeName(lv_upgrade), libWCSP_gf_UpgradeNotificationsUpgradeImage(lv_upgrade), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(libWCSP_gv_upgradeNotifications.lv_slotFacility[lv_count]), false)), libWCSP_gf_UpgradeNotificationsUpgradeNeedsToBeVisible(UnitQueueItemTime(libWCSP_gv_upgradeNotifications.lv_slotFacility[lv_count], c_unitQueueTimeRemaining, 1)));
                libWCSP_gv_upgradeNotifications.lv_slotStatus[(lv_count - 1)] = libWCSP_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
                libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], StringToText(""), libWCSP_gv_upgradeNotificationsObs);
                DialogControlSetVisible(libWCSP_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], libWCSP_gv_upgradeNotificationsObs, true);
                DialogControlSetVisible(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], libWCSP_gv_upgradeNotificationsObs, false);
                libWCSP_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)] = TimerCreate();
            }

        }
        libWCSP_gv_upgradeNotifications.lv_slotFacility[(lv_count - 1)] = libWCSP_gv_upgradeNotifications.lv_slotFacility[lv_count];
    }
    libWCSP_gv_upgradeNotifications.lv_slotFacility[libWCSP_gv_upgradeNotifications.lv_slotLastUsed] = null;
    if ((libWCSP_gv_upgradeNotifications.lv_slotLastUsed <= libWCSP_gv_upgradeNotificationsMaxUISlots)) {
        libWCSP_gf_UpgradeNotificationsSetSlotData(libWCSP_gv_upgradeNotifications.lv_slotLastUsed, StringToText(""), "Assets\\Textures\\black.dds", Color(100.00, 100.00, 100.00), false);
        libWCSP_gv_upgradeNotifications.lv_slotStatus[libWCSP_gv_upgradeNotifications.lv_slotLastUsed] = libWCSP_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
        libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[libWCSP_gv_upgradeNotifications.lv_slotLastUsed], StringToText(""), libWCSP_gv_upgradeNotificationsObs);
        libNtve_gf_SetDialogItemCurrentValue(libWCSP_gv_upgradeNotifications.lv_itemProgressBar[libWCSP_gv_upgradeNotifications.lv_slotLastUsed], 0.0, libWCSP_gv_upgradeNotificationsObs);
        libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerLabel[libWCSP_gv_upgradeNotifications.lv_slotLastUsed], StringToText(""), libWCSP_gv_upgradeNotificationsObs);
        libWCSP_gv_upgradeNotifications.lv_timerDestruction[libWCSP_gv_upgradeNotifications.lv_slotLastUsed] = TimerCreate();
    }

    libWCSP_gv_upgradeNotifications.lv_slotLastUsed -= 1;
}

int libWCSP_gf_UpgradeNotificationsFacilitySlot (unit lp_facility) {
    int autoBBFCC9AC_ae;
    int autoBBFCC9AC_ai;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    autoBBFCC9AC_ae = libWCSP_gv_upgradeNotifications.lv_slotLastUsed;
    autoBBFCC9AC_ai = 1;
    lv_count = 0;
    for ( ; ( (autoBBFCC9AC_ai >= 0 && lv_count <= autoBBFCC9AC_ae) || (autoBBFCC9AC_ai <= 0 && lv_count >= autoBBFCC9AC_ae) ) ; lv_count += autoBBFCC9AC_ai ) {
        if ((libWCSP_gv_upgradeNotifications.lv_slotFacility[lv_count] == lp_facility) && ((libWCSP_gv_upgradeNotifications.lv_slotStatus[lv_count] == libWCSP_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade) || (libWCSP_gv_upgradeNotifications.lv_slotStatus[lv_count] == libWCSP_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade))) {
            return lv_count;
        }

    }
    return -1;
}

string libWCSP_gf_UpgradeNotificationsUpgradeImage (string lp_upgrade) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Icon", libWCSP_gv_upgradeNotificationsObsID));
}

text libWCSP_gf_UpgradeNotificationsUpgradeName (string lp_upgrade) {
    string autoCD4F1002_val;
    string autoDE8DC1F3_val;

    // Variable Declarations
    string lv_unittype;

    // Variable Initialization

    // Implementation
    autoCD4F1002_val = lp_upgrade;
    if (autoCD4F1002_val == "ProtossGroundWeaponsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_EC982431");
    }
    else if (autoCD4F1002_val == "ProtossGroundWeaponsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_9CA34D65");
    }
    else if (autoCD4F1002_val == "ProtossGroundWeaponsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_BADBDA83");
    }
    else if (autoCD4F1002_val == "ProtossGroundArmorsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_F71E9D95");
    }
    else if (autoCD4F1002_val == "ProtossGroundArmorsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_4DA89EF9");
    }
    else if (autoCD4F1002_val == "ProtossGroundArmorsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_9F92BBC1");
    }
    else if (autoCD4F1002_val == "ProtossShieldsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_D8ECD1BF");
    }
    else if (autoCD4F1002_val == "ProtossShieldsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_517FE441");
    }
    else if (autoCD4F1002_val == "ProtossShieldsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_EF4B376D");
    }
    else if (autoCD4F1002_val == "ProtossAirWeaponsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_E9C8C146");
    }
    else if (autoCD4F1002_val == "ProtossAirWeaponsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_B3508B1C");
    }
    else if (autoCD4F1002_val == "ProtossAirWeaponsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_E0D36F9D");
    }
    else if (autoCD4F1002_val == "ProtossAirArmorsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_DDFAA3C7");
    }
    else if (autoCD4F1002_val == "ProtossAirArmorsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_FD03B157");
    }
    else if (autoCD4F1002_val == "ProtossAirArmorsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_3ABD025E");
    }
    else if (autoCD4F1002_val == "PsiStormTech") {
        return StringExternal("Param/Value/lib_WCSP_A9933D80");
    }
    else if (autoCD4F1002_val == "haltech") {
        return StringExternal("Param/Value/lib_WCSP_A352A90D");
    }
    else if (autoCD4F1002_val == "BlinkTech") {
        return StringExternal("Param/Value/lib_WCSP_78AC536E");
    }
    else if (autoCD4F1002_val == "WarpGateResearch") {
        return StringExternal("Param/Value/lib_WCSP_F6C1DEDC");
    }
    else if (autoCD4F1002_val == "CarrierLaunchSpeedUpgrade") {
        return StringExternal("Param/Value/lib_WCSP_03A7E2B6");
    }
    else if (autoCD4F1002_val == "ExtendedThermalLance") {
        return StringExternal("Param/Value/lib_WCSP_4A03C3FF");
    }
    else if (autoCD4F1002_val == "ObserverGraviticBooster") {
        return StringExternal("Param/Value/lib_WCSP_48223D6D");
    }
    else if (autoCD4F1002_val == "GraviticDrive") {
        return StringExternal("Param/Value/lib_WCSP_88B8B99F");
    }
    else if (autoCD4F1002_val == "Charge") {
        return StringExternal("Param/Value/lib_WCSP_E58D4066");
    }
    else if (autoCD4F1002_val == "TerranInfantryWeaponsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_3EEDBB82");
    }
    else if (autoCD4F1002_val == "TerranInfantryWeaponsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_448E39B8");
    }
    else if (autoCD4F1002_val == "TerranInfantryWeaponsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_DD72755E");
    }
    else if (autoCD4F1002_val == "TerranInfantryArmorsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_7A766180");
    }
    else if (autoCD4F1002_val == "TerranInfantryArmorsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_52E128F3");
    }
    else if (autoCD4F1002_val == "TerranInfantryArmorsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_27445E9D");
    }
    else if (autoCD4F1002_val == "TerranShipWeaponsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_0577BAEA");
    }
    else if (autoCD4F1002_val == "TerranShipWeaponsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_A0744E71");
    }
    else if (autoCD4F1002_val == "TerranShipWeaponsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_93D02116");
    }
    else if (autoCD4F1002_val == "TerranShipArmorsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_BB18C846");
    }
    else if (autoCD4F1002_val == "TerranShipArmorsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_943EBC8E");
    }
    else if (autoCD4F1002_val == "TerranShipArmorsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_028456E5");
    }
    else if (autoCD4F1002_val == "TerranVehicleWeaponsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_AD463810");
    }
    else if (autoCD4F1002_val == "TerranVehicleWeaponsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_F1C1921D");
    }
    else if (autoCD4F1002_val == "TerranVehicleWeaponsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_7ABDBD52");
    }
    else if (autoCD4F1002_val == "TerranVehicleArmorsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_785E9451");
    }
    else if (autoCD4F1002_val == "TerranVehicleArmorsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_5CDCE2E0");
    }
    else if (autoCD4F1002_val == "TerranVehicleArmorsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_4CE0AB57");
    }
    else if (autoCD4F1002_val == "BansheeCloak") {
        return StringExternal("Param/Value/lib_WCSP_5A2F4B6E");
    }
    else if (autoCD4F1002_val == "PersonalCloaking") {
        return StringExternal("Param/Value/lib_WCSP_62A9F5EC");
    }
    else if (autoCD4F1002_val == "HighCapacityBarrels") {
        return StringExternal("Param/Value/lib_WCSP_0649E917");
    }
    else if (autoCD4F1002_val == "PunisherGrenades") {
        return StringExternal("Param/Value/lib_WCSP_F79E6712");
    }
    else if (autoCD4F1002_val == "HunterSeeker") {
        return StringExternal("Param/Value/lib_WCSP_B8C857BB");
    }
    else if (autoCD4F1002_val == "SiegeTech") {
        return StringExternal("Param/Value/lib_WCSP_999EC8C6");
    }
    else if (autoCD4F1002_val == "Stimpack") {
        return StringExternal("Param/Value/lib_WCSP_2809EF0D");
    }
    else if (autoCD4F1002_val == "BattlecruiserEnableSpecializations") {
        return StringExternal("Param/Value/lib_WCSP_2B1E2B57");
    }
    else if (autoCD4F1002_val == "BattlecruiserBehemothReactor") {
        return StringExternal("Param/Value/lib_WCSP_34E569F4");
    }
    else if (autoCD4F1002_val == "NeosteelFrame") {
        return StringExternal("Param/Value/lib_WCSP_E8B199D5");
    }
    else if (autoCD4F1002_val == "GhostMoebiusReactor") {
        return StringExternal("Param/Value/lib_WCSP_494910D9");
    }
    else if (autoCD4F1002_val == "HiSecAutoTracking") {
        return StringExternal("Param/Value/lib_WCSP_215D14EB");
    }
    else if (autoCD4F1002_val == "ShieldWall") {
        return StringExternal("Param/Value/lib_WCSP_AFF6738D");
    }
    else if (autoCD4F1002_val == "MedivacCaduceusReactor") {
        return StringExternal("Param/Value/lib_WCSP_3C4D466E");
    }
    else if (autoCD4F1002_val == "RavenCorvidReactor") {
        return StringExternal("Param/Value/lib_WCSP_574D25B7");
    }
    else if (autoCD4F1002_val == "DurableMaterials") {
        return StringExternal("Param/Value/lib_WCSP_2922DEEF");
    }
    else if (autoCD4F1002_val == "ReaperSpeed") {
        return StringExternal("Param/Value/lib_WCSP_B9EF2FD0");
    }
    else if (autoCD4F1002_val == "TerranBuildingArmor") {
        return StringExternal("Param/Value/lib_WCSP_5710E21B");
    }
    else if (autoCD4F1002_val == "ZergMeleeWeaponsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_98A1B6C4");
    }
    else if (autoCD4F1002_val == "ZergMeleeWeaponsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_80433106");
    }
    else if (autoCD4F1002_val == "ZergMeleeWeaponsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_15CC4A43");
    }
    else if (autoCD4F1002_val == "ZergMissileWeaponsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_4EEA8065");
    }
    else if (autoCD4F1002_val == "ZergMissileWeaponsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_6DB11401");
    }
    else if (autoCD4F1002_val == "ZergMissileWeaponsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_BB4EA04D");
    }
    else if (autoCD4F1002_val == "ZergGroundArmorsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_3EF7C400");
    }
    else if (autoCD4F1002_val == "ZergGroundArmorsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_4824E695");
    }
    else if (autoCD4F1002_val == "ZergGroundArmorsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_E3F39F75");
    }
    else if (autoCD4F1002_val == "ZergFlyerWeaponsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_607B70FC");
    }
    else if (autoCD4F1002_val == "ZergFlyerWeaponsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_998045DC");
    }
    else if (autoCD4F1002_val == "ZergFlyerWeaponsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_C26B6222");
    }
    else if (autoCD4F1002_val == "ZergFlyerArmorsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_32748ABC");
    }
    else if (autoCD4F1002_val == "ZergFlyerArmorsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_ACEFB0B9");
    }
    else if (autoCD4F1002_val == "ZergFlyerArmorsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_65BB69CB");
    }
    else if (autoCD4F1002_val == "CentrificalHooks") {
        return StringExternal("Param/Value/lib_WCSP_3C479552");
    }
    else if (autoCD4F1002_val == "Burrow") {
        return StringExternal("Param/Value/lib_WCSP_382FD91D");
    }
    else if (autoCD4F1002_val == "hydraliskspeed") {
        return StringExternal("Param/Value/lib_WCSP_E550350C");
    }
    else if (autoCD4F1002_val == "InfestorEnergyUpgrade") {
        return StringExternal("Param/Value/lib_WCSP_2BB686A0");
    }
    else if (autoCD4F1002_val == "overlordspeed") {
        return StringExternal("Param/Value/lib_WCSP_D71407DC");
    }
    else if (autoCD4F1002_val == "overlordtransport") {
        return StringExternal("Param/Value/lib_WCSP_55998895");
    }
    else if (autoCD4F1002_val == "GlialReconstitution") {
        return StringExternal("Param/Value/lib_WCSP_F50C6AC7");
    }
    else if (autoCD4F1002_val == "TunnelingClaws") {
        return StringExternal("Param/Value/lib_WCSP_B12BEC28");
    }
    else if (autoCD4F1002_val == "ChitinousPlating") {
        return StringExternal("Param/Value/lib_WCSP_006B0928");
    }
    else if (autoCD4F1002_val == "zerglingattackspeed") {
        return StringExternal("Param/Value/lib_WCSP_D91042DF");
    }
    else if (autoCD4F1002_val == "zerglingmovementspeed") {
        return StringExternal("Param/Value/lib_WCSP_39E83FBD");
    }
    else {
    }
    autoDE8DC1F3_val = (lp_upgrade);
    if (autoDE8DC1F3_val == "PhoenixRangeUpgrade") {
        return StringExternal("Param/Value/lib_WCSP_AAC658A6");
    }
    else if (autoDE8DC1F3_val == "TerranVehicleAndShipArmorsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_E6F35ECB");
    }
    else if (autoDE8DC1F3_val == "TerranVehicleAndShipArmorsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_01F9779C");
    }
    else if (autoDE8DC1F3_val == "TerranVehicleAndShipArmorsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_F054767B");
    }
    else if (autoDE8DC1F3_val == "TerranVehicleAndShipWeaponsLevel1") {
        return StringExternal("Param/Value/lib_WCSP_74FD3D14");
    }
    else if (autoDE8DC1F3_val == "TerranVehicleAndShipWeaponsLevel2") {
        return StringExternal("Param/Value/lib_WCSP_BF5F1036");
    }
    else if (autoDE8DC1F3_val == "TerranVehicleAndShipWeaponsLevel3") {
        return StringExternal("Param/Value/lib_WCSP_9D130C83");
    }
    else if (autoDE8DC1F3_val == "DrillClaws") {
        return StringExternal("Param/Value/lib_WCSP_59CC8BA1");
    }
    else if (autoDE8DC1F3_val == "TransformationServos") {
        return StringExternal("Param/Value/lib_WCSP_FA3B23D6");
    }
    else if (autoDE8DC1F3_val == "LocustLifetimeIncrease") {
        return StringExternal("Param/Value/lib_WCSP_96DCBE37");
    }
    else if (autoDE8DC1F3_val == "NeuralParasite") {
        return StringExternal("Param/Value/lib_WCSP_E098D5A0");
    }
    else {
    }
    return StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Name", libWCSP_gv_upgradeNotificationsObsID));
}

bool libWCSP_gf_UpgradeNotificationsUpgradeNeedsToBeVisible (fixed lp_remainingTime) {
    // Implementation
    if ((lp_remainingTime <= libWCSP_gv_upgradeNotificationsVisibleTime)) {
        return true;
    }

    return false;
}

trigger auto_libWCSP_gf_UpgradeNotificationsUpdateThread_Trigger = null;

void libWCSP_gf_UpgradeNotificationsUpdateThread () {
    if (auto_libWCSP_gf_UpgradeNotificationsUpdateThread_Trigger == null) {
        auto_libWCSP_gf_UpgradeNotificationsUpdateThread_Trigger = TriggerCreate("auto_libWCSP_gf_UpgradeNotificationsUpdateThread_TriggerFunc");
    }

    TriggerExecute(auto_libWCSP_gf_UpgradeNotificationsUpdateThread_Trigger, false, false);
}

bool auto_libWCSP_gf_UpgradeNotificationsUpdateThread_TriggerFunc (bool testConds, bool runActions) {
    int auto9CB1E294_ae;
    int auto9CB1E294_ai;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    while ((libWCSP_gv_upgradeNotifications.lv_slotLastUsed >= 0)) {
        auto9CB1E294_ae = MinI(libWCSP_gv_upgradeNotifications.lv_slotLastUsed, 5);
        auto9CB1E294_ai = 1;
        lv_count = 0;
        for ( ; ( (auto9CB1E294_ai >= 0 && lv_count <= auto9CB1E294_ae) || (auto9CB1E294_ai <= 0 && lv_count >= auto9CB1E294_ae) ) ; lv_count += auto9CB1E294_ai ) {
            if (((lv_count > libWCSP_gv_upgradeNotificationsMaxUISlots) || (libWCSP_gv_upgradeNotifications.lv_slotStatus[lv_count] == libWCSP_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade)) && (libWCSP_gf_UpgradeNotificationsUpgradeNeedsToBeVisible(UnitQueueItemTime(libWCSP_gv_upgradeNotifications.lv_slotFacility[lv_count], c_unitQueueTimeRemaining, 1)) == true)) {
                if ((lv_count <= libWCSP_gv_upgradeNotificationsMaxUISlots)) {
                    DialogControlSetVisible(libWCSP_gv_upgradeNotifications.lv_itemPanel[lv_count], libWCSP_gv_upgradeNotificationsObs, true);
                    libWCSP_gv_upgradeNotifications.lv_slotStatus[lv_count] = libWCSP_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade;
                }

                libWCSP_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne(lv_count);
            }

            if ((libWCSP_gv_upgradeNotifications.lv_slotStatus[lv_count] == libWCSP_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade)) {
                libWCSP_gf_UpgradeNotificationsUpdateProgressData(lv_count);
            }

        }
        Wait(0.0625, c_timeGame);
        Wait(0.0, c_timeGame);
    }
    libWCSP_gv_upgradeNotifications.lv_updateThreadRunning = false;
    return true;
}

void libWCSP_gf_UpgradeNotificationsSetStatusLabel (int lp_slot, text lp_status) {
    // Implementation
    DialogControlSetVisible(libWCSP_gv_upgradeNotifications.lv_itemTimerLabel[lp_slot], libWCSP_gv_upgradeNotificationsObs, false);
    DialogControlSetVisible(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[lp_slot], libWCSP_gv_upgradeNotificationsObs, true);
    libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[lp_slot], lp_status, libWCSP_gv_upgradeNotificationsObs);
}

void libWCSP_gf_UpgradeNotificationsSetSlotData (int lp_slot, text lp_name, string lp_icon, color lp_color, bool lp_visible) {
    // Implementation
    libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemName[lp_slot], lp_name, libWCSP_gv_upgradeNotificationsObs);
    libNtve_gf_SetDialogItemColor(libWCSP_gv_upgradeNotifications.lv_itemPanel[lp_slot], lp_color, libWCSP_gv_upgradeNotificationsObs);
    libNtve_gf_SetDialogItemImage(libWCSP_gv_upgradeNotifications.lv_itemIcon[lp_slot], lp_icon, libWCSP_gv_upgradeNotificationsObs);
    DialogControlSetVisible(libWCSP_gv_upgradeNotifications.lv_itemPanel[lp_slot], libWCSP_gv_upgradeNotificationsObs, lp_visible);
}

void libWCSP_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne (int lp_slot) {
    int auto0C08FE66_ae;
    int auto0C08FE66_ai;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    auto0C08FE66_ae = (lp_slot - 1);
    auto0C08FE66_ai = 1;
    lv_count = 0;
    for ( ; ( (auto0C08FE66_ai >= 0 && lv_count <= auto0C08FE66_ae) || (auto0C08FE66_ai <= 0 && lv_count >= auto0C08FE66_ae) ) ; lv_count += auto0C08FE66_ai ) {
        if ((libWCSP_gv_upgradeNotifications.lv_slotStatus[lv_count] == libWCSP_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade)) {
            libWCSP_gf_UpgradeNotificationsSwapSlotInformation(lv_count, lp_slot);
            return ;
        }

    }
}

void libWCSP_gf_UpgradeNotificationsSwapSlotInformation (int lp_slotA, int lp_slotB) {
    int init_i;

    // Variable Declarations
    int[2] lv_status;
    bool[2] lv_visibility;
    text[2] lv_name;
    string[2] lv_icon;
    color[2] lv_color;
    fixed[2] lv_value;
    timer[2] lv_timer;
    unit lv_facility;

    // Variable Initialization
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_status[init_i] = libWCSP_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_icon[init_i] = "Assets\\Textures\\blank.dds";
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_color[init_i] = Color(100,100,100);
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_timer[init_i] = TimerCreate();
    }

    // Implementation
    if ((lp_slotA <= libWCSP_gv_upgradeNotificationsMaxUISlots)) {
        lv_status[0] = libWCSP_gv_upgradeNotifications.lv_slotStatus[lp_slotA];
        lv_visibility[0] = DialogControlIsVisible(libWCSP_gv_upgradeNotifications.lv_itemPanel[lp_slotA], libWCSP_gv_upgradeNotificationsObsID);
        lv_name[0] = libNtve_gf_DialogItemText(libWCSP_gv_upgradeNotifications.lv_itemName[lp_slotA], libWCSP_gv_upgradeNotificationsObsID);
        lv_icon[0] = (libNtve_gf_DialogItemImage(libWCSP_gv_upgradeNotifications.lv_itemIcon[lp_slotA], libWCSP_gv_upgradeNotificationsObsID));
        lv_color[0] = libNtve_gf_DialogItemColor(libWCSP_gv_upgradeNotifications.lv_itemPanel[lp_slotA], libWCSP_gv_upgradeNotificationsObsID);
        lv_value[0] = libNtve_gf_DialogItemValue(libWCSP_gv_upgradeNotifications.lv_itemProgressBar[lp_slotA], libWCSP_gv_upgradeNotificationsObsID);
        lv_timer[0] = libWCSP_gv_upgradeNotifications.lv_timerDestruction[lp_slotA];
    }

    if ((lp_slotB <= libWCSP_gv_upgradeNotificationsMaxUISlots)) {
        lv_status[1] = libWCSP_gv_upgradeNotifications.lv_slotStatus[lp_slotB];
        lv_visibility[1] = DialogControlIsVisible(libWCSP_gv_upgradeNotifications.lv_itemPanel[lp_slotB], libWCSP_gv_upgradeNotificationsObsID);
        lv_name[1] = libNtve_gf_DialogItemText(libWCSP_gv_upgradeNotifications.lv_itemName[lp_slotB], libWCSP_gv_upgradeNotificationsObsID);
        lv_icon[1] = (libNtve_gf_DialogItemImage(libWCSP_gv_upgradeNotifications.lv_itemIcon[lp_slotB], libWCSP_gv_upgradeNotificationsObsID));
        lv_color[1] = libNtve_gf_DialogItemColor(libWCSP_gv_upgradeNotifications.lv_itemPanel[lp_slotB], libWCSP_gv_upgradeNotificationsObsID);
        lv_value[1] = libNtve_gf_DialogItemValue(libWCSP_gv_upgradeNotifications.lv_itemProgressBar[lp_slotB], libWCSP_gv_upgradeNotificationsObsID);
        lv_timer[1] = libWCSP_gv_upgradeNotifications.lv_timerDestruction[lp_slotB];
    }

    if ((lp_slotA <= libWCSP_gv_upgradeNotificationsMaxUISlots)) {
        libWCSP_gv_upgradeNotifications.lv_slotStatus[lp_slotA] = lv_status[1];
        libWCSP_gf_UpgradeNotificationsSetSlotData(lp_slotA, lv_name[1], lv_icon[1], lv_color[1], lv_visibility[1]);
        libNtve_gf_SetDialogItemCurrentValue(libWCSP_gv_upgradeNotifications.lv_itemProgressBar[lp_slotA], lv_value[1], libWCSP_gv_upgradeNotificationsObs);
        libWCSP_gv_upgradeNotifications.lv_timerDestruction[lp_slotA] = lv_timer[1];
    }

    if ((lp_slotB <= libWCSP_gv_upgradeNotificationsMaxUISlots)) {
        libWCSP_gv_upgradeNotifications.lv_slotStatus[lp_slotB] = lv_status[0];
        libWCSP_gf_UpgradeNotificationsSetSlotData(lp_slotB, lv_name[0], lv_icon[0], lv_color[0], lv_visibility[0]);
        libNtve_gf_SetDialogItemCurrentValue(libWCSP_gv_upgradeNotifications.lv_itemProgressBar[lp_slotB], lv_value[0], libWCSP_gv_upgradeNotificationsObs);
        libWCSP_gv_upgradeNotifications.lv_timerDestruction[lp_slotB] = lv_timer[0];
    }

    lv_facility = libWCSP_gv_upgradeNotifications.lv_slotFacility[lp_slotA];
    libWCSP_gv_upgradeNotifications.lv_slotFacility[lp_slotA] = libWCSP_gv_upgradeNotifications.lv_slotFacility[lp_slotB];
    libWCSP_gv_upgradeNotifications.lv_slotFacility[lp_slotB] = lv_facility;
}

void libWCSP_gf_UpgradeNotificationsUpdateProgressData (int lp_slot) {
    // Variable Declarations
    fixed lv_remainingTime;
    int lv_remainingSeconds;
    int lv_remainingMilliseconds;
    text lv_extraZero;

    // Variable Initialization
    lv_remainingTime = UnitQueueItemTime(libWCSP_gv_upgradeNotifications.lv_slotFacility[lp_slot], c_unitQueueTimeRemaining, 1);
    lv_remainingSeconds = TruncI(lv_remainingTime);
    lv_remainingMilliseconds = TruncI(((lv_remainingTime - lv_remainingSeconds) * 10.0));

    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(libWCSP_gv_upgradeNotifications.lv_itemProgressBar[lp_slot], (libWCSP_gv_upgradeNotificationsVisibleTime - lv_remainingTime), libWCSP_gv_upgradeNotificationsObs);
    libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerLabel[lp_slot], (StringExternal("Param/Value/lib_WCSP_DCA0850C") + (IntToText(lv_remainingSeconds) + ((StringExternal("Param/Value/lib_WCSP_98AC169D") + StringExternal("Param/Value/lib_WCSP_C976DBB3")) + ((StringExternal("Param/Value/lib_WCSP_C2CA1203") + lv_extraZero) + IntToText(lv_remainingMilliseconds))))), libWCSP_gv_upgradeNotificationsObs);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Created PIR
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_LabelsUnitCreatedPIR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_size;
    int lv_bGSize;

    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();
    lv_size = libWCSP_gf_LabelsUnitIconSize(lv_unit);
    lv_bGSize = FixedToInt((lv_size * 1.2));

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((libWCSP_gf_LabelsUnitUsesCustomStatusBar(EventUnitCreatedUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetString(true, (IntToString(UnitGetTag(lv_unit)) + "-slot1"), "");
    DataTableSetString(true, (IntToString(UnitGetTag(lv_unit)) + "-slot2"), "");
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon1\\IconBG", lv_unit);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_bGSize, lv_bGSize);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("IconBG1-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon2\\IconBG", lv_unit);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_bGSize, lv_bGSize);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("IconBG2-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon3\\IconBG", lv_unit);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_bGSize, lv_bGSize);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("IconBG3-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon1\\Icon", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("Icon1-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    if ((UnitGetType(lv_unit) == "Larva")) {
        DialogControlSetPosition(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(UnitGetTag(lv_unit)))), PlayerGroupAll(), c_anchorTopLeft, FixedToInt((((libWCSP_gv_labels.lv_iconSizeEgg * 1.2) / 6.0) / 2.0)), FixedToInt((((libWCSP_gv_labels.lv_iconSizeEgg * 1.2) / 6.0) / 2.0)));
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon2\\Icon", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("Icon2-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon3\\Icon", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("Icon3-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_LabelsUnitCreatedPIR_Init () {
    libWCSP_gt_LabelsUnitCreatedPIR = TriggerCreate("libWCSP_gt_LabelsUnitCreatedPIR_Func");
    TriggerAddEventUnitCreated(libWCSP_gt_LabelsUnitCreatedPIR, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Training Started PIR
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_LabelsUnitTrainingStartedPIR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_unitTag;
    unit lv_trainee;
    string lv_traineeType;
    int lv_iconSize;
    int lv_activeTags;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_trainee = EventUnitProgressUnit();
    lv_traineeType = libNtve_gf_TriggeringProgressUnitType();
    lv_iconSize = libWCSP_gf_LabelsUnitIconSize(lv_unit);
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((lv_traineeType != "Baneling"))) {
            return false;
        }

        if (!((lv_traineeType != "Interceptor"))) {
            return false;
        }

        if (!((lv_traineeType != "BroodlingEscort"))) {
            return false;
        }

        if (!((lv_traineeType != "Broodling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == "")) {
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot1"), (lv_traineeType));
        if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == "")) {
            lv_activeTags = 1;
        }
        else {
            lv_activeTags = 2;
        }
    }
    else {
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), (lv_traineeType));
        lv_activeTags = 2;
    }
    if ((lv_traineeType != "Zergling") && (lv_activeTags == 2)) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    }
    else {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_LabelsUnitTrainingStartedPIR_Init () {
    libWCSP_gt_LabelsUnitTrainingStartedPIR = TriggerCreate("libWCSP_gt_LabelsUnitTrainingStartedPIR_Func");
    TriggerAddEventUnitTrainProgress(libWCSP_gt_LabelsUnitTrainingStartedPIR, null, c_unitProgressStageStart);
    TriggerAddEventUnitArmMagazineProgress(libWCSP_gt_LabelsUnitTrainingStartedPIR, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Training Stopped PIR
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_LabelsUnitTrainingStoppedPIR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_unitTag;
    unit lv_trainee;
    string lv_traineeType;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_trainee = EventUnitProgressUnit();
    lv_traineeType = libNtve_gf_TriggeringProgressUnitType();
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!((lv_traineeType != "Baneling"))) {
            return false;
        }

        if (!((lv_traineeType != "Interceptor"))) {
            return false;
        }

        if (!((lv_traineeType != "BroodlingEscort"))) {
            return false;
        }

        if (!((lv_traineeType != "Broodling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot1"), "");
    }
    else if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), "");
    }
    else if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) != "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot1"), DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")));
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), "");
    }
    else if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) != "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), "");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_LabelsUnitTrainingStoppedPIR_Init () {
    libWCSP_gt_LabelsUnitTrainingStoppedPIR = TriggerCreate("libWCSP_gt_LabelsUnitTrainingStoppedPIR_Func");
    TriggerAddEventUnitTrainProgress(libWCSP_gt_LabelsUnitTrainingStoppedPIR, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(libWCSP_gt_LabelsUnitTrainingStoppedPIR, null, c_unitProgressStageCancel);
    TriggerAddEventUnitArmMagazineProgress(libWCSP_gt_LabelsUnitTrainingStoppedPIR, null, c_unitProgressStageComplete);
    TriggerAddEventUnitArmMagazineProgress(libWCSP_gt_LabelsUnitTrainingStoppedPIR, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Research Started PIR
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_LabelsResearchStartedPIR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_unitTag;
    string lv_research;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unitTag = UnitGetTag(EventUnit());
    lv_research = libNtve_gf_TriggeringProgressUpgrade();
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogUpgrade, lv_research, "Icon", c_playerAny)), PlayerGroupAll());
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_LabelsResearchStartedPIR_Init () {
    libWCSP_gt_LabelsResearchStartedPIR = TriggerCreate("libWCSP_gt_LabelsResearchStartedPIR_Func");
    TriggerAddEventUnitResearchProgress(libWCSP_gt_LabelsResearchStartedPIR, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Research Stopped PIR
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_LabelsResearchStoppedPIR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_unitTag;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_LabelsResearchStoppedPIR_Init () {
    libWCSP_gt_LabelsResearchStoppedPIR = TriggerCreate("libWCSP_gt_LabelsResearchStoppedPIR_Func");
    TriggerAddEventUnitResearchProgress(libWCSP_gt_LabelsResearchStoppedPIR, null, c_unitProgressStageCancel);
    TriggerAddEventUnitResearchProgress(libWCSP_gt_LabelsResearchStoppedPIR, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Reactor Destroyed PIR
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_LabelsReactorDestroyedPIR_Func (bool testConds, bool runActions) {
    unitgroup autoBA95298F_g;
    int autoBA95298F_u;

    // Variable Declarations
    unit lv_unit;
    string lv_unitType;
    int lv_unitTag;
    int lv_player;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_unitType = UnitGetType(lv_unit);
    lv_unitTag = UnitGetTag(lv_unit);
    lv_player = UnitGetOwner(lv_unit);
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }

        if (!(((lv_unitType == "BarracksReactor") || (lv_unitType == "FactoryReactor") || (lv_unitType == "StarportReactor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBA95298F_g = UnitGroup(null, EventPlayer(), RegionCircle(PointWithOffset(UnitGetPosition(EventUnit()), -2.5, 0.5), 0.1), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    autoBA95298F_u = 1;
    for ( ; autoBA95298F_u <= UnitGroupCount(autoBA95298F_g, c_unitCountAll) ; autoBA95298F_u += BoolToInt(lv_unit == UnitGroupUnit(autoBA95298F_g, autoBA95298F_u)) ) {
        lv_unit = UnitGroupUnit(autoBA95298F_g, autoBA95298F_u);
        lv_unitType = UnitGetType(lv_unit);
        if (((lv_unitType == "Barracks") || (lv_unitType == "Factory") || (lv_unitType == "Starport")) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_unit, 1, 1) != "")) {
            lv_unitTag = UnitGetTag(lv_unit);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_playerGroup, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_playerGroup, false);
            libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_LabelsReactorDestroyedPIR_Init () {
    libWCSP_gt_LabelsReactorDestroyedPIR = TriggerCreate("libWCSP_gt_LabelsReactorDestroyedPIR_Func");
    TriggerAddEventUnitDied(libWCSP_gt_LabelsReactorDestroyedPIR, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Construction Started PIR
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_LabelsConstructionStartedPIR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_unitTag;
    string lv_construction;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unitTag = UnitGetTag(EventUnitProgressUnit());
    lv_construction = libNtve_gf_TriggeringProgressUnitType();
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, lv_construction, "UnitIcon", c_playerAny)), PlayerGroupAll());
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_LabelsConstructionStartedPIR_Init () {
    libWCSP_gt_LabelsConstructionStartedPIR = TriggerCreate("libWCSP_gt_LabelsConstructionStartedPIR_Func");
    TriggerAddEventUnitConstructProgress(libWCSP_gt_LabelsConstructionStartedPIR, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Construction Stopped PIR
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_LabelsConstructionStoppedPIR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_unitTag;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnitProgressUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_LabelsConstructionStoppedPIR_Init () {
    libWCSP_gt_LabelsConstructionStoppedPIR = TriggerCreate("libWCSP_gt_LabelsConstructionStoppedPIR_Func");
    TriggerAddEventUnitConstructProgress(libWCSP_gt_LabelsConstructionStoppedPIR, null, c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(libWCSP_gt_LabelsConstructionStoppedPIR, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Morph Started PIR
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_LabelsMorphStartedPIR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_unitTag;
    playergroup lv_playerGroup;
    string lv_triggeringAbility;
    string lv_morphUnit;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unitTag = UnitGetTag(EventUnit());
    lv_playerGroup = PlayerGroupSingle(lv_player);
    lv_morphUnit = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringAbility = AbilityCommandGetAbility(EventUnitAbility());
    lv_morphUnit = (CatalogFieldValueGet(c_gameCatalogAbil, lv_triggeringAbility, ("InfoArray[" + IntToString(0) + "].Unit"), c_playerAny));
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, lv_morphUnit, "UnitIcon", c_playerAny)), PlayerGroupAll());
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_LabelsMorphStartedPIR_Init () {
    libWCSP_gt_LabelsMorphStartedPIR = TriggerCreate("libWCSP_gt_LabelsMorphStartedPIR_Func");
    TriggerAddEventUnitAbility(libWCSP_gt_LabelsMorphStartedPIR, null, AbilityCommand("UpgradeToOrbital", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libWCSP_gt_LabelsMorphStartedPIR, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Morph Stopped PIR
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_LabelsMorphStoppedPIR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_unitTag;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SidebarDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_playerGroup, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_LabelsMorphStoppedPIR_Init () {
    libWCSP_gt_LabelsMorphStoppedPIR = TriggerCreate("libWCSP_gt_LabelsMorphStoppedPIR_Func");
    TriggerAddEventUnitAbility(libWCSP_gt_LabelsMorphStoppedPIR, null, AbilityCommand("UpgradeToOrbital", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libWCSP_gt_LabelsMorphStoppedPIR, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libWCSP_gt_LabelsMorphStoppedPIR, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libWCSP_gt_LabelsMorphStoppedPIR, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Initialization
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_UpgradeNotificationsInitialization_Func (bool testConds, bool runActions) {
    int auto642518AE_ae;
    int auto642518AE_ai;

    // Variable Declarations
    int lv_slot;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(PlayerGroupActive()) == 2)) {
        libWCSP_gv_upgradeNotifications.lv_active = true;
        auto642518AE_ae = libWCSP_gv_upgradeNotificationsMaxUISlots;
        auto642518AE_ai = 1;
        lv_slot = 0;
        for ( ; ( (auto642518AE_ai >= 0 && lv_slot <= auto642518AE_ae) || (auto642518AE_ai <= 0 && lv_slot >= auto642518AE_ae) ) ; lv_slot += auto642518AE_ai ) {
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + IntToString(lv_slot)));
            libWCSP_gv_upgradeNotifications.lv_itemPanel[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerStatus")));
            libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), libWCSP_gv_upgradeNotificationsObs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerBar")));
            libWCSP_gv_upgradeNotifications.lv_itemProgressBar[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), libWCSP_gv_upgradeNotificationsObs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerCountdown")));
            libWCSP_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), libWCSP_gv_upgradeNotificationsObs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerIcon")));
            libWCSP_gv_upgradeNotifications.lv_itemIcon[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), libWCSP_gv_upgradeNotificationsObs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerType")));
            libWCSP_gv_upgradeNotifications.lv_itemName[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), libWCSP_gv_upgradeNotificationsObs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            libNtve_gf_SetDialogItemMaximumValue(libWCSP_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], libWCSP_gv_upgradeNotificationsVisibleTime, libWCSP_gv_upgradeNotificationsObs);
            libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot], StringToText(""), libWCSP_gv_upgradeNotificationsObs);
            libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemName[lv_slot], StringToText(""), libWCSP_gv_upgradeNotificationsObs);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", libWCSP_gv_upgradeNotificationsObs);
            libNtve_gf_SetDialogItemColor(libWCSP_gv_upgradeNotifications.lv_itemPanel[lv_slot], Color(100,100,100), libWCSP_gv_upgradeNotificationsObs);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_UpgradeNotificationsInitialization_Init () {
    libWCSP_gt_UpgradeNotificationsInitialization = TriggerCreate("libWCSP_gt_UpgradeNotificationsInitialization_Func");
    TriggerAddEventMapInit(libWCSP_gt_UpgradeNotificationsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Cancelled
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_UpgradeNotificationsResearchCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    int lv_slot;
    int lv_playerIndex;

    // Variable Initialization
    lv_facility = EventUnit();
    lv_slot = libWCSP_gf_UpgradeNotificationsFacilitySlot(lv_facility);

    // Conditions
    if (testConds) {
        if (!((libWCSP_gv_upgradeNotifications.lv_active == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    if ((lv_slot <= libWCSP_gv_upgradeNotificationsMaxUISlots) && (DialogControlIsVisible(libWCSP_gv_upgradeNotifications.lv_itemPanel[lv_slot], lv_playerIndex) == true)) {
        libWCSP_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libWCSP_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade;
        TimerStart(libWCSP_gv_upgradeNotifications.lv_timerDestruction[lv_slot], 5.0, false, c_timeGame);
        if ((UnitIsAlive(lv_facility) == false)) {
            libWCSP_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_WCSP_20D203D6"));
        }
        else {
            libWCSP_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_WCSP_4EC83042"));
        }
    }
    else {
        libWCSP_gf_UpgradeNotificationsRemoveRunningUpgrade(libWCSP_gf_UpgradeNotificationsFacilitySlot(lv_facility));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_UpgradeNotificationsResearchCancelled_Init () {
    libWCSP_gt_UpgradeNotificationsResearchCancelled = TriggerCreate("libWCSP_gt_UpgradeNotificationsResearchCancelled_Func");
    TriggerAddEventUnitResearchProgress(libWCSP_gt_UpgradeNotificationsResearchCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Completed
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_UpgradeNotificationsResearchCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    int lv_slot;
    int lv_playerIndex;

    // Variable Initialization
    lv_facility = EventUnit();
    lv_slot = libWCSP_gf_UpgradeNotificationsFacilitySlot(lv_facility);

    // Conditions
    if (testConds) {
        if (!((libWCSP_gv_upgradeNotifications.lv_active == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    if ((lv_slot <= libWCSP_gv_upgradeNotificationsMaxUISlots)) {
        libWCSP_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libWCSP_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade;
        libWCSP_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_WCSP_8C4B9AC7"));
        libNtve_gf_SetDialogItemCurrentValue(libWCSP_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], libWCSP_gv_upgradeNotificationsVisibleTime, PlayerGroupSingle(lv_playerIndex));
        TimerStart(libWCSP_gv_upgradeNotifications.lv_timerDestruction[lv_slot], 5.0, false, c_timeGame);
    }
    else {
        libWCSP_gf_UpgradeNotificationsRemoveRunningUpgrade(libWCSP_gf_UpgradeNotificationsFacilitySlot(lv_facility));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_UpgradeNotificationsResearchCompleted_Init () {
    libWCSP_gt_UpgradeNotificationsResearchCompleted = TriggerCreate("libWCSP_gt_UpgradeNotificationsResearchCompleted_Func");
    TriggerAddEventUnitResearchProgress(libWCSP_gt_UpgradeNotificationsResearchCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Started
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_UpgradeNotificationsResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    unit lv_facility;
    string lv_upgrade;
    int lv_playerIndex;

    // Variable Initialization
    lv_facility = EventUnit();
    lv_upgrade = libNtve_gf_TriggeringProgressUpgrade();

    // Conditions
    if (testConds) {
        if (!((libWCSP_gv_upgradeNotifications.lv_active == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = UnitGetOwner(EventUnit());
    libWCSP_gv_upgradeNotifications.lv_slotLastUsed += 1;
    lv_slot = libWCSP_gv_upgradeNotifications.lv_slotLastUsed;
    libWCSP_gv_upgradeNotifications.lv_slotFacility[lv_slot] = lv_facility;
    if ((lv_slot <= libWCSP_gv_upgradeNotificationsMaxUISlots)) {
        libWCSP_gf_UpgradeNotificationsSetSlotData(lv_slot, libWCSP_gf_UpgradeNotificationsUpgradeName(lv_upgrade), libWCSP_gf_UpgradeNotificationsUpgradeImage(lv_upgrade), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lv_facility), false)), false);
        if ((libWCSP_gv_upgradeNotifications.lv_updateThreadRunning == false)) {
            libWCSP_gv_upgradeNotifications.lv_updateThreadRunning = true;
            libWCSP_gf_UpgradeNotificationsUpdateThread();
        }

        libNtve_gf_SetDialogItemText(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot], StringToText(""), PlayerGroupSingle(lv_playerIndex));
        DialogControlSetVisible(libWCSP_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot], PlayerGroupSingle(lv_playerIndex), true);
        DialogControlSetVisible(libWCSP_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot], PlayerGroupSingle(lv_playerIndex), false);
        libWCSP_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libWCSP_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
        libNtve_gf_SetDialogItemCurrentValue(libWCSP_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], 0.0, PlayerGroupSingle(lv_playerIndex));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_UpgradeNotificationsResearchStarted_Init () {
    libWCSP_gt_UpgradeNotificationsResearchStarted = TriggerCreate("libWCSP_gt_UpgradeNotificationsResearchStarted_Func");
    TriggerAddEventUnitResearchProgress(libWCSP_gt_UpgradeNotificationsResearchStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Destruction Timer Runs Out
//--------------------------------------------------------------------------------------------------
bool libWCSP_gt_UpgradeNotificationsDestructionTimerRunsOut_Func (bool testConds, bool runActions) {
    int autoA290B153_ae;
    int autoA290B153_ai;

    // Variable Declarations
    int lv_slot;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libWCSP_gv_upgradeNotifications.lv_active == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA290B153_ae = libWCSP_gv_upgradeNotificationsMaxUISlots;
    autoA290B153_ai = 1;
    lv_slot = 0;
    for ( ; ( (autoA290B153_ai >= 0 && lv_slot <= autoA290B153_ae) || (autoA290B153_ai <= 0 && lv_slot >= autoA290B153_ae) ) ; lv_slot += autoA290B153_ai ) {
        if ((EventTimer() == libWCSP_gv_upgradeNotifications.lv_timerDestruction[lv_slot])) {
            libWCSP_gf_UpgradeNotificationsRemoveRunningUpgrade(lv_slot);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCSP_gt_UpgradeNotificationsDestructionTimerRunsOut_Init () {
    libWCSP_gt_UpgradeNotificationsDestructionTimerRunsOut = TriggerCreate("libWCSP_gt_UpgradeNotificationsDestructionTimerRunsOut_Func");
    TriggerAddEventTimer(libWCSP_gt_UpgradeNotificationsDestructionTimerRunsOut, null);
}

void libWCSP_InitTriggers () {
    libWCSP_gt_LabelsUnitCreatedPIR_Init();
    libWCSP_gt_LabelsUnitTrainingStartedPIR_Init();
    libWCSP_gt_LabelsUnitTrainingStoppedPIR_Init();
    libWCSP_gt_LabelsResearchStartedPIR_Init();
    libWCSP_gt_LabelsResearchStoppedPIR_Init();
    libWCSP_gt_LabelsReactorDestroyedPIR_Init();
    libWCSP_gt_LabelsConstructionStartedPIR_Init();
    libWCSP_gt_LabelsConstructionStoppedPIR_Init();
    libWCSP_gt_LabelsMorphStartedPIR_Init();
    libWCSP_gt_LabelsMorphStoppedPIR_Init();
    libWCSP_gt_UpgradeNotificationsInitialization_Init();
    libWCSP_gt_UpgradeNotificationsResearchCancelled_Init();
    libWCSP_gt_UpgradeNotificationsResearchCompleted_Init();
    libWCSP_gt_UpgradeNotificationsResearchStarted_Init();
    libWCSP_gt_UpgradeNotificationsDestructionTimerRunsOut_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libWCSP_InitLib_completed = false;

void libWCSP_InitLib () {
    if (libWCSP_InitLib_completed) {
        return;
    }

    libWCSP_InitLib_completed = true;

    libWCSP_InitLibraries();
    libWCSP_InitVariables();
    libWCSP_InitTriggers();
}


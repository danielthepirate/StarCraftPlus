include "Script/PiratedLib"
include "Script/ActiveUserLib"
include "Script/CMSDB_h"


//--------------------------------------------------------------------------------------------------
// Struct Declaration
//--------------------------------------------------------------------------------------------------

void CMSDB_SidebarPathsInit(){
	sidebarPaths.builder[0] = "UIContainer/ConsoleUIContainer/BuilderCommandContainer/CommandPanel1";
	sidebarPaths.trainer[0] = "UIContainer/ConsoleUIContainer/TrainerCommandContainer/CommandPanel1";
	sidebarPaths.researcher[0] = "UIContainer/ConsoleUIContainer/ResearcherCommandContainer/CommandPanel1";
	sidebarPaths.caster[0] = "UIContainer/ConsoleUIContainer/GlobalCommandContainer/CommandPanel1";
	
	sidebarPaths.builder[1] = "UIContainer/ConsoleUIContainer/BuilderCommandContainer/CommandPanel2";
	sidebarPaths.trainer[1] = "UIContainer/ConsoleUIContainer/TrainerCommandContainer/CommandPanel2";
	sidebarPaths.researcher[1] = "UIContainer/ConsoleUIContainer/ResearcherCommandContainer/CommandPanel2";
	sidebarPaths.caster[1] = "UIContainer/ConsoleUIContainer/GlobalCommandContainer/CommandPanel2";
}


bool CMSDB_OrderRedirectGetData(CMSDB_OrderRedirect orderdata, string abil){
	orderdata.abil = abil;
	orderdata.useIdle = UserDataGetInt(c_CMDSB_orderRedirectData, abil, "UseIdle", 1);
	orderdata.realAbilIndex = UserDataGetAbilCmd(c_CMDSB_orderRedirectData, abil, "RealAbilIndex", 1);
	orderdata.dummyCaster = UserDataGetUnit(c_CMDSB_orderRedirectData, abil, "DummyCaster", 1);
	orderdata.realCaster[0] = UserDataGetUnit(c_CMDSB_orderRedirectData, abil, "RealCaster", 1);
	orderdata.realCaster[1] = UserDataGetUnit(c_CMDSB_orderRedirectData, abil, "RealCaster", 2);
	orderdata.realCaster[2] = UserDataGetUnit(c_CMDSB_orderRedirectData, abil, "RealCaster", 3);
	orderdata.realAbil = UserDataGetGameLink(c_CMDSB_orderRedirectData, abil, "RealAbil", 1);
	return true;
}


bool CMSDB_InterceptOrder_Func (bool testConds, bool runActions) {
	unit u;
	unitgroup ug;
	unit dummy;
	string abil;
	int abilCmdIndex;
	int player;
	abilcmd redirAbil;
	region r;
	order o;
	
	CMSDB_OrderRedirectData orderdata;
	
	r = RegionEntireMap();
	u = UnitGroupUnit(UnitGroupIdle(player, true), 1);
	dummy = EventUnit();
	player = UnitGetOwner(dummy);
	o = EventUnitOrder();
	ug = UnitGroupEmpty();
	
	abil = AbilityCommandGetAbility(OrderGetAbilityCommand(o));
	abilCmdIndex = AbilityCommandGetCommand(OrderGetAbilityCommand(o));
	CMSDB_OrderRedirectGetData(orderdata, abil);
	
	if (testConds) {
		if (!((UnitGetType(dummy) == orderdata.dummyCaster))) {
			if (!(UnitHasBehavior(dummy,"SidebarDummy"))) {
				return false;
			}
		}
	}
	
	if(orderdata.useIdle>0){
		ug = UnitGroupIdle(player, true);
		u = UnitGroupUnit(ug, 1);
	}
	else{
		//ug = UnitGroup (orderdata.realCaster[0], player, r, null, 0);
		UnitGroupAddUnitGroup(ug,  UnitGroup (orderdata.realCaster[0], player, r, null, 0));
		if(orderdata.realCaster[1] != "") {
			UnitGroupAddUnitGroup(ug,  UnitGroup (orderdata.realCaster[1], player, r, null, 0));
		}
		if(orderdata.realCaster[2] != "") {
			UnitGroupAddUnitGroup(ug,  UnitGroup (orderdata.realCaster[2], player, r, null, 0));
		}
		u = UnitGroupUnit(ug, 1);
	}
	
	if(orderdata.realAbil != ""){
		redirAbil = AbilityCommand(orderdata.realAbil, abilCmdIndex);
		OrderSetAbilityCommand (o, redirAbil);
		
		TriggerDebugOutput(1, StringToText("Abil Substitution: "+orderdata.realAbil+" From: "+abil+" :: "+IntToString(abilCmdIndex)), CMSDB_DebugOutput);
	}
	
	if(abil == "MorphDummyTrainNukeUCB"){
		// Normal ArmMagazine redirect sends the order to ALL ghost academy's (I guess BestUnit flag doesnt work?)
		// There's definitely a cleaner way to do this, but this works
	
		if(abilCmdIndex == 0){
			o = Order(AbilityCommand("ArmSiloWithNuke", 0));
			ug = Pir_GhostAcademyAvailable(ug);
			u = UnitGroupUnit(ug, 1);
			
			// Player charge shenanigans is unfortunately necessary to get the dummy ability and real ability work together
			PlayerAddChargeUsed(player, "UCB/GhostAcademy", -1.0);
			UnitIssueOrder(dummy, Order(AbilityCommand(abil, c_abilMorphCmdCancel)), c_orderQueueReplace);
			UnitIssueOrder(u, o, c_orderQueueReplace);
			PlayerAddChargeUsed(player, "UCB/GhostAcademy", 1.0);
		}
		return true;
	}
	
	if(Pir_AbilityIsTerranAddon (abil)){
		// There's definitely a cleaner way to do this, but this works
		if(abilCmdIndex == 0){
			redirAbil = orderdata.realAbilIndex;
			OrderSetAbilityCommand (o, redirAbil);
			
			// Pir_UCBTerranAddonTest (ug, abil, player);
		}
	}

	if(AbilityClass(abil) == c_classIdCAbilBuild){
		UnitIssueOrder(dummy, Order(AbilityCommand("stop", c_abilStopCmdStop)), c_orderQueueReplace);
		
		// Build orders ignore workers harvesting gas
		ug = Pir_WorkerGroupNotHarvestingGas(ug);
		
		Pir_WorkerGroupSmarter(ug, o);
		// UnitGroupIssueOrder(ug, o, c_orderQueueReplace);
		//UnitIssueOrder(u, o, c_orderQueueReplace);
	}
	else if(AbilityClass(abil) == c_classIdCAbilResearch){
		
		UnitIssueOrder(dummy, Order(AbilityCommand("que5", c_abilQueueCmdCancelLast)), c_orderQueueReplace);
		UnitGroupIssueOrder(ug, o, c_orderQueueReplace);
		//UnitIssueOrder(u, o, c_orderQueueReplace);
	}
	else if(AbilityClass(abil) == c_classIdCAbilArmMagazine){
		
		UnitIssueOrder(dummy, Order(AbilityCommand("que5", c_abilQueueCmdCancelLast)), c_orderQueueReplace);
		UnitGroupIssueOrder(ug, o, c_orderQueueReplace);
		//UnitIssueOrder(u, o, c_orderQueueReplace);
	}
	else if(AbilityClass(abil) == c_classIdCAbilTrain){
		
		UnitIssueOrder(dummy, Order(AbilityCommand("que5", c_abilQueueCmdCancelLast)), c_orderQueueReplace);
		UnitGroupIssueOrder(ug, o, c_orderQueueReplace);
		//UnitIssueOrder(u, o, c_orderQueueReplace);
	}
	else if(AbilityClass(abil) == c_classIdCAbilWarpTrain){
		
		UnitIssueOrder(dummy, Order(AbilityCommand("que5", c_abilQueueCmdCancelLast)), c_orderQueueReplace);
		UnitGroupIssueOrder(ug, o, c_orderQueueReplace);
		//UnitIssueOrder(u, o, c_orderQueueReplace);
	}
	else if((AbilityClass(abil) == c_classIdCAbilMorph) && (abilCmdIndex != c_abilMorphCmdCancel)){
		
		UnitIssueOrder(dummy, Order(AbilityCommand(abil, c_abilMorphCmdCancel)), c_orderQueueReplace);
		// Pir_UnitCancelQueue(u);

		// Queue cancelling and addon testing occur at u and not ug so let's send the order to u
		// UnitGroupIssueOrder(ug, o, c_orderQueueReplace);
		// UnitIssueOrder(u, o, c_orderQueueReplace);
		Pir_UCBMorphCommand (ug, abil, o, player);
	}
	else if(AbilityClass(abil) == c_classIdCAbilEffectTarget){
		
		// This doesn't seem to actually be cancelling the initial ability, so I'm implementing dummy versions of each global spell
		UnitIssueOrder(dummy, Order(AbilityCommand(abil, c_abilEffectTargetCmdCancel)), c_orderQueueReplace);

		UnitGroupIssueOrder(ug, o, c_orderQueueReplace);
		// UnitIssueOrder(u, o, c_orderQueueReplace);
	}
	
	return true;
}


void CMSDB_AttachDummyToSidebar(unitgroup u, playergroup pg, string sidebar){
	int SideBarDlg = DialogControlHookupStandard(c_triggerControlTypeCommandPanel, sidebar);
	DialogControlSetPropertyAsUnitGroup(SideBarDlg, c_triggerControlPropertyUnitGroup, pg, u);
	DialogControlSetPropertyAsInt(SideBarDlg, c_triggerControlPropertySelectionIndex, pg, 2);
}

unitgroup CMSDB_InitDummies(int player){
	int i = 0;
	int j = 0;
	unitgroup ug;
	unitgroup[2] subgroup;
	string[2] unitid;
	arrayref<paths> path;
	string dummytype;
	
	int n = UserDataFieldCount (c_CMSDB_dummyUserData);
	point unitPos = RegionGetCenter(RegionEntireMap());

	TriggerDebugOutput(1, StringToText("Player "+IntToString(player)+" Race: "+playerData[player].race), CMSDB_DebugOutput);
	TriggerDebugOutput(1, StringToText("Total Items: "+IntToString(n)), CMSDB_DebugOutput);
	
	for(i = 1;i<=n;i+=1){
		dummytype = UserDataField(c_CMSDB_dummyUserData, i);
		TriggerDebugOutput(1, StringToText(dummytype), CMSDB_DebugOutput);
		
		if (dummytype == "Builder"){
			ug = playerData[player].builder;
			path = sidebarPaths.builder;
		}
		else if (dummytype == "Trainer"){
			ug = playerData[player].trainer;
			path = sidebarPaths.trainer;
		}
		else if (dummytype == "Researcher"){
			ug = playerData[player].researcher;
			path = sidebarPaths.researcher;
		}
		else if (dummytype == "GlobalCaster"){
			ug = playerData[player].caster;
			path = sidebarPaths.caster;
		}
		else if (dummytype == "Warper"){
			continue;
		}
		for(j = 0;j<2;j+=1){
			subgroup[j] = UnitGroupEmpty();
			unitid[j] = UserDataGetUnit(c_CMSDB_dummyUserData, playerData[player].race, dummytype, j+1);
			UnitGroupAddUnitGroup(subgroup[j], UnitCreate(1,unitid[j],c_unitCreateIgnorePlacement, player,unitPos,0.0));
			CMSDB_AttachDummyToSidebar(subgroup[j], playerData[player].pg, path[j]);
			UnitGroupAddUnitGroup(ug,subgroup[j]);
			TriggerDebugOutput(1, StringToText(unitid[j]), CMSDB_DebugOutput);
			TriggerDebugOutput(1, StringToText(path[j]), CMSDB_DebugOutput);
		}
	}
	return ug;
}

void CMSDB_PlayerDataInit(){
	int player = 1;
	string DummyBuilderType;
	point unitPos = RegionGetCenter(RegionEntireMap());
	for(player=0;player < c_maxPlayers;player+=1){
		if (IsActiveUser(player)) {
			playerData[player].race = PlayerRace (player);
			playerData[player].pg = PlayerGroupSingle(player);
			DummyBuilderType = UserDataGetUnit(c_CMSDB_dummyUserData, playerData[player].race, "Builder", 1);
			playerData[player].dummies = UnitGroupEmpty();
			playerData[player].builder = UnitGroupEmpty();
			playerData[player].trainer = UnitGroupEmpty();
			playerData[player].researcher = UnitGroupEmpty();
			
			CMSDB_InitDummies(player);
			
			// CMSDB_DebugInit(player, unitPos);
		}
	}
}


void CMSDB_DebugInit(int player, point unitPos){
	//Debug test stuff
	UnitCreate(2,"Probe",c_unitCreateIgnorePlacement, player,unitPos,0.0);
	UnitCreate(2,"SCV",c_unitCreateIgnorePlacement, player,unitPos,0.0);
	UnitCreate(2,"Drone",c_unitCreateIgnorePlacement, player,unitPos,0.0);
	PlayerModifyPropertyInt (player, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
	PlayerModifyPropertyInt (player, c_playerPropVespene, c_playerPropOperSetTo, 5000);
}

void CMSDB_Init(){
	int i = 0;
	int j = 0;
	int n = UserDataInstanceCount(c_CMDSB_orderRedirectData);
	string abil;
	
	
	CMSDB_InterceptOrder = TriggerCreate("CMSDB_InterceptOrder_Func");
	CMSDB_SidebarPathsInit();
	CMSDB_PlayerDataInit();
	
	for(i = 1;i<=n;i+=1){
		abil = UserDataInstance (c_CMDSB_orderRedirectData, i);
		for(j=0;j<32;j+=1){
			TriggerAddEventUnitOrder(CMSDB_InterceptOrder, null, AbilityCommand(abil, j));
		}
	}

	
}

void InitCommandSideBar(){
	CMSDB_Init();
}
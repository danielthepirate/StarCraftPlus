// These functions added by Daniel from modified GUI functions in StarCraftPlus.SC2Mod
// Don't judge me

bool Pir_AbilityIsTerranAddon (string abil) {
	return ((abil == "BarracksReactorMorphUCB") ||	(abil == "FactoryReactorMorphUCB") ||	(abil == "StarportReactorMorphUCB") ||
			(abil == "BarracksTechLabMorphUCB") ||	(abil == "FactoryTechLabMorphUCB") ||	(abil == "StarportTechLabMorphUCB"));
}

void Pir_UCBTerranAddonTest (unitgroup ug, string abil, int player){

	DataTableSetUnitGroup(false, TriggerEventParamName("GenericEventTerranAddonTest", "TestUnits"), ug);
	DataTableSetInt(false, TriggerEventParamName("GenericEventTerranAddonTest", "TestPlayer"), player);
	DataTableSetString(false, TriggerEventParamName("GenericEventTerranAddonTest", "TestAbility"), abil);
    TriggerSendEvent("GenericEventTerranAddonTest");
}

void Pir_UCBMorphCommand (unitgroup ug, order o, int player){

	DataTableSetUnitGroup(false, TriggerEventParamName("GenericEventMorphCommand", "TestUnits"), ug);
	DataTableSetOrder(false, TriggerEventParamName("GenericEventMorphCommand", "TestOrder"), o);
	DataTableSetInt(false, TriggerEventParamName("GenericEventMorphCommand", "TestPlayer"), player);
    TriggerSendEvent("GenericEventMorphCommand");
}

unitgroup Pir_WorkerGroupNotHarvestingGas (unitgroup ug) {

    unitgroup wg = UnitGroupCopy(ug);
    unitgroup gg = UnitGroupEmpty();
	int wgCount = UnitGroupCount(wg, c_unitCountAlive);
    unit w;
    int index;

	for (index = 1; index <= wgCount ; index += 1){
		w = UnitGroupUnit(wg, index);
		
        if ((UnitGetChargeUsed(w, "HarvestGas") == 1.0)) {
			UnitGroupAdd(gg,w);
        }
    }
	
	UnitGroupRemoveUnitGroup(wg, gg);
    return wg;
}

unitgroup Pir_WorkerGroupConstructing (unitgroup ug) {

    unitgroup wg = UnitGroupCopy(ug);
    unitgroup gg = UnitGroupEmpty();
	int wgCount = UnitGroupCount(wg, c_unitCountAlive);
    unit w;
    int index;

	for (index = 1; index <= wgCount ; index += 1){
		w = UnitGroupUnit(wg, index);
		
        if ((UnitGetChargeUsed(w, "Constructing") == 1.0)) {
			UnitGroupAdd(gg,w);
        }
    }
	
    return gg;
}

void Pir_WorkerGroupSmarter (unitgroup workers, order o){
	
	int playerIndex = UnitGetOwner(UnitGroupUnit(workers,1));
	unitgroup workersConstructing;
	int cCount;
	fixed wDistance;
	fixed cDistance;
	fixed harvestRadius = 8;
	point p;
	
	if(PlayerRace(playerIndex) != "Prot"){
		UnitGroupIssueOrder(workers, o, c_orderQueueReplace);
		return;
	}
	
	p = OrderGetTargetPosition(o);
	workersConstructing = Pir_WorkerGroupConstructing (workers);
	cCount = UnitGroupCount(workersConstructing, c_unitCountAlive);
	
	if(cCount > 0){
		cDistance =  DistanceBetweenPoints(UnitGetPosition(UnitGroupClosestToPoint(workersConstructing, p)), p);
		wDistance =  DistanceBetweenPoints(UnitGetPosition(UnitGroupClosestToPoint(workers, p)), p);
		
		if(cDistance - wDistance < harvestRadius){
			//sends queued-construction probe if no harvesting probes are much closer
			UnitGroupIssueOrder(workersConstructing, o, c_orderQueueAddToEnd);
			return;
		}
	}
	
	UnitGroupIssueOrder(workers, o, c_orderQueueReplace);
}

void Pir_UnitCancelQueue (unit u){
	if ((UnitQueueGetProperty(u, c_unitQueuePropertyUsed) > 0)) {
	
		// Cancel Unit Train
		UnitIssueOrder(u, Order(AbilityCommand("que5CancelToSelection", 0)), c_orderQueueReplace);
		UnitIssueOrder(u, Order(AbilityCommand("que5CancelToSelection", 0)), c_orderQueueReplace);
		UnitIssueOrder(u, Order(AbilityCommand("que5CancelToSelection", 0)), c_orderQueueReplace);
		UnitIssueOrder(u, Order(AbilityCommand("que5CancelToSelection", 0)), c_orderQueueReplace);
		UnitIssueOrder(u, Order(AbilityCommand("que5CancelToSelection", 0)), c_orderQueueReplace);
		
		// Cancel Research
		UnitIssueOrder(u, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
	}
}

unitgroup Pir_UnitsNotMorphing(unitgroup ug) {

	int cMorphProgress = 8;
	unitgroup available = UnitGroupCopy(ug);
	unitgroup unavailable = UnitGroupEmpty();
	int count = UnitGroupCount(ug, c_unitCountAll);
	int index;
	unit u;
	
	for (index = 1; index <= count; index += 1){
		u = UnitGroupUnit(ug, index);
		
		if (UnitGetCustomValue(u,cMorphProgress) > 0) {
            UnitGroupAdd(unavailable,u);
        }
	}
	
	UnitGroupRemoveUnitGroup(available, unavailable);
	return available;
}

unitgroup Pir_GhostAcademyAvailable(unitgroup ug) {

	unitgroup available = UnitGroupCopy(ug);
	unitgroup unavailable = UnitGroupEmpty();
	int count = UnitGroupCount(ug, c_unitCountAll);
	int index;
	unit u;
	
	for (index = 1; index <= count; index += 1){
		u = UnitGroupUnit(ug, index);
				
		if ((UnitMagazineCount(u, "ArmSiloWithNuke") > 0) || (UnitCheckProgressState(u, 1, c_unitProgressStateEmpty) == false)) {
            UnitGroupAdd(unavailable,u);
        }
	}
	
	UnitGroupRemoveUnitGroup(available, unavailable);
	return available;
}
include "TriggerLibs/NativeLib"

include "Lib6FD6BD78_h"

//--------------------------------------------------------------------------------------------------
// Library: PIRL+
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib6FD6BD78_InitLibraries () {
    libNtve_InitVariables();
}

// Functions
int lib6FD6BD78_gf_UserDataInstanceID (string lp_userType, string lp_userDataInstance) {
    int auto18FABF19_ae;
    int auto18FABF19_ai;

    // Variable Declarations
    int lv_instanceIndex;

    // Variable Initialization

    // Implementation
    auto18FABF19_ae = UserDataInstanceCount(lp_userType);
    auto18FABF19_ai = 1;
    lv_instanceIndex = 1;
    for ( ; ( (auto18FABF19_ai >= 0 && lv_instanceIndex <= auto18FABF19_ae) || (auto18FABF19_ai <= 0 && lv_instanceIndex >= auto18FABF19_ae) ) ; lv_instanceIndex += auto18FABF19_ai ) {
        if ((UserDataInstance(lp_userType, lv_instanceIndex) == lp_userDataInstance)) {
            return lv_instanceIndex;
        }
    }
    return 0;
}

void lib6FD6BD78_gf_SendActorMessageToUnitGroup (string lp_actorMessage, unitgroup lp_unitGroup) {
    // Implementation
    UnitGroupLoopBegin(lp_unitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), lp_actorMessage);
    }
    UnitGroupLoopEnd();
}

void lib6FD6BD78_gf_ShakeCameraForPlayer (int lp_p, string lp_cameraSetting) {
    // Implementation
    CameraShake(lp_p, lp_cameraSetting, "Earthquake", 0.125, 0.25, 0.375);
}

fixed lib6FD6BD78_gf_ConvertBooleanToReal (bool lp_boolean) {
    // Implementation
    return IntToFixed(BoolToInt(lp_boolean));
}

void lib6FD6BD78_gf_DebugFlashUnit (unit lp_unit) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTintColor 255,0,0");
    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTintColor 255,255,255 1.000000");
}

void lib6FD6BD78_gf_DebugPoint (point lp_point) {
    // Implementation
    PlayerCreateEffectPoint(0, "DebugPoint", lp_point);
}

void lib6FD6BD78_gf_DebugPoint2 (point lp_point, fixed lp_radius) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "DebugPointCircle", "AreaArray[" + IntToString(0) + "].Radius", 0, FixedToString(lp_radius, c_fixedPrecisionAny));
    PlayerCreateEffectPoint(0, "DebugPointCircle", lp_point);
}

void lib6FD6BD78_gf_DebugPoint3 (point lp_point, fixed lp_width, fixed lp_height) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "DebugRectangleVariable", "AreaArray[" + IntToString(0) + "].RectangleHeight", 0, FixedToString(lp_height, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "DebugRectangleVariable", "AreaArray[" + IntToString(0) + "].RectangleWidth", 0, FixedToString(lp_width, c_fixedPrecisionAny));
    PlayerCreateEffectPoint(0, "DebugPointRectangle", lp_point);
}

trigger auto_lib6FD6BD78_gf_DebugPoint4_Trigger = null;
point auto_lib6FD6BD78_gf_DebugPoint4_lp_point;
fixed auto_lib6FD6BD78_gf_DebugPoint4_lp_duration;

void lib6FD6BD78_gf_DebugPoint4 (point lp_point, fixed lp_duration) {
    auto_lib6FD6BD78_gf_DebugPoint4_lp_point = lp_point;
    auto_lib6FD6BD78_gf_DebugPoint4_lp_duration = lp_duration;

    if (auto_lib6FD6BD78_gf_DebugPoint4_Trigger == null) {
        auto_lib6FD6BD78_gf_DebugPoint4_Trigger = TriggerCreate("auto_lib6FD6BD78_gf_DebugPoint4_TriggerFunc");
    }

    TriggerExecute(auto_lib6FD6BD78_gf_DebugPoint4_Trigger, false, false);
}

bool auto_lib6FD6BD78_gf_DebugPoint4_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_lib6FD6BD78_gf_DebugPoint4_lp_point;
    fixed lp_duration = auto_lib6FD6BD78_gf_DebugPoint4_lp_duration;

    // Variable Declarations
    unit lv_debugUnit;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, 0, lp_point);
    lv_debugUnit = UnitLastCreated();
    Wait(lp_duration, c_timeGame);
    UnitRemove(lv_debugUnit);
    return true;
}

trigger auto_lib6FD6BD78_gf_DebugPoint5_Trigger = null;
point auto_lib6FD6BD78_gf_DebugPoint5_lp_point;
fixed auto_lib6FD6BD78_gf_DebugPoint5_lp_duration;

void lib6FD6BD78_gf_DebugPoint5 (point lp_point, fixed lp_duration) {
    auto_lib6FD6BD78_gf_DebugPoint5_lp_point = lp_point;
    auto_lib6FD6BD78_gf_DebugPoint5_lp_duration = lp_duration;

    if (auto_lib6FD6BD78_gf_DebugPoint5_Trigger == null) {
        auto_lib6FD6BD78_gf_DebugPoint5_Trigger = TriggerCreate("auto_lib6FD6BD78_gf_DebugPoint5_TriggerFunc");
    }

    TriggerExecute(auto_lib6FD6BD78_gf_DebugPoint5_Trigger, false, false);
}

bool auto_lib6FD6BD78_gf_DebugPoint5_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_lib6FD6BD78_gf_DebugPoint5_lp_point;
    fixed lp_duration = auto_lib6FD6BD78_gf_DebugPoint5_lp_duration;

    // Variable Declarations
    unit lv_debugUnit;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", c_unitCreateIgnorePlacement, 0, lp_point);
    lv_debugUnit = UnitLastCreated();
    Wait(lp_duration, c_timeGame);
    UnitRemove(lv_debugUnit);
    return true;
}

void lib6FD6BD78_gf_DebugString (string lp_message) {
    // Implementation
    TriggerDebugOutput(1, StringToText(lp_message), true);
}

bool lib6FD6BD78_gf_AngleIsBetweenBounds (fixed lp_angle, fixed lp_minBound, fixed lp_maxBound) {
    // Implementation
    if ((lp_angle < lp_maxBound) && (lp_angle > lp_minBound)) {
        return true;
    }
    else {
        return false;
    }
}

bool lib6FD6BD78_gf_StringIsValid2 (int lp_integer) {
    // Implementation
    if ((ModI(lp_integer, 2) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

int lib6FD6BD78_gf_SignInteger (int lp_inputInteger) {
    // Variable Declarations
    int lv_sign;

    // Variable Initialization

    // Implementation
    if ((lp_inputInteger > 0)) {
        lv_sign = 1;
    }
    else if ((lp_inputInteger == 0)) {
        lv_sign = 0;
    }
    else if ((lp_inputInteger < 0)) {
        lv_sign = -1;
    }
    return lv_sign;
}

fixed lib6FD6BD78_gf_SignReal (fixed lp_inputReal) {
    // Variable Declarations
    fixed lv_sign;

    // Variable Initialization

    // Implementation
    if ((lp_inputReal > 0.0)) {
        lv_sign = 1.0;
    }
    else if ((lp_inputReal == 0.0)) {
        lv_sign = 0.0;
    }
    else if ((lp_inputReal < 0.0)) {
        lv_sign = -1.0;
    }
    return lv_sign;
}

point lib6FD6BD78_gf_ConstrainPointToRegion (point lp_point, region lp_contrainedRegion) {
    fixed auto2B8FCF9F_ae;
    fixed auto2B8FCF9F_ai;

    // Variable Declarations
    point lv_constrainedRegionCenter;
    fixed lv_constrainedRegionDistance;
    fixed lv_constrainedRegionAngle;
    fixed lv_constrainedCheckIncrement;
    point lv_constrainedPoint;
    fixed lv_i;

    // Variable Initialization

    // Implementation
    if ((RegionContainsPoint(lp_contrainedRegion, lp_point) == true)) {
        return lp_point;
    }
    lv_constrainedPoint = lp_point;
    lv_constrainedCheckIncrement = 0.25;
    lv_constrainedRegionCenter = RegionGetCenter(lp_contrainedRegion);
    lv_constrainedRegionDistance = DistanceBetweenPoints(lp_point, lv_constrainedRegionCenter);
    lv_constrainedRegionAngle = AngleBetweenPoints(lp_point, lv_constrainedRegionCenter);
    auto2B8FCF9F_ae = lv_constrainedRegionDistance;
    auto2B8FCF9F_ai = lv_constrainedCheckIncrement;
    lv_i = 0.0;
    for ( ; ( (auto2B8FCF9F_ai >= 0 && lv_i <= auto2B8FCF9F_ae) || (auto2B8FCF9F_ai <= 0 && lv_i >= auto2B8FCF9F_ae) ) ; lv_i += auto2B8FCF9F_ai ) {
        lv_constrainedPoint = PointWithOffsetPolar(lv_constrainedPoint, lv_constrainedCheckIncrement, lv_constrainedRegionAngle);
        if ((RegionContainsPoint(lp_contrainedRegion, lv_constrainedPoint) == true)) {
            return lv_constrainedPoint;
        }
    }
    return lv_constrainedRegionCenter;
}

string lib6FD6BD78_gf_DeCamel (string lp_camelCaseString) {
    int auto5D1280DC_ae;
    int auto5D1280DC_ai;

    // Variable Declarations
    int lv_stringLength;
    int lv_letterIndex;
    string lv_letter;
    string lv_outputString;
    bool lv_isFirstCapital;

    // Variable Initialization
    lv_letter = "";
    lv_outputString = "";

    // Implementation
    lv_stringLength = StringLength(lp_camelCaseString);
    lv_outputString = lp_camelCaseString;
    lv_isFirstCapital = true;
    auto5D1280DC_ae = lv_stringLength;
    auto5D1280DC_ai = 1;
    lv_letterIndex = 1;
    for ( ; ( (auto5D1280DC_ai >= 0 && lv_letterIndex <= auto5D1280DC_ae) || (auto5D1280DC_ai <= 0 && lv_letterIndex >= auto5D1280DC_ae) ) ; lv_letterIndex += auto5D1280DC_ai ) {
        lv_letter = StringSub(lv_outputString, lv_letterIndex, lv_letterIndex);
        if ((StringSub(lv_outputString, (lv_letterIndex - 1), (lv_letterIndex - 1)) != "-") && ((lv_letter == "A") || (lv_letter == "B") || (lv_letter == "C") || (lv_letter == "D") || (lv_letter == "E") || (lv_letter == "F") || (lv_letter == "G") || (lv_letter == "H") || (lv_letter == "I") || (lv_letter == "J") || (lv_letter == "K") || (lv_letter == "L") || (lv_letter == "M") || (lv_letter == "N") || (lv_letter == "O") || (lv_letter == "P") || (lv_letter == "Q") || (lv_letter == "R") || (lv_letter == "S") || (lv_letter == "T") || (lv_letter == "U") || (lv_letter == "V") || (lv_letter == "W") || (lv_letter == "X") || (lv_letter == "Y") || (lv_letter == "Z"))) {
            if ((lv_isFirstCapital == true)) {
                lv_isFirstCapital = false;
            }
            else {
                lv_outputString = StringReplace(lv_outputString, (" " + lv_letter), lv_letterIndex, lv_letterIndex);
                lv_letterIndex += 1;
                lv_stringLength += 1;
            }
        }
    }
    return lv_outputString;
}

string lib6FD6BD78_gf_Capitalize (string lp_input) {
    // Variable Declarations
    int lv_inputLength;
    string lv_output;

    // Variable Initialization
    lv_output = "";

    // Implementation
    lv_inputLength = StringLength(lp_input);
    lv_output = (StringCase(StringSub(lp_input, 1, 1), true) + StringSub(lp_input, 2, lv_inputLength));
    return lv_output;
}

bool lib6FD6BD78_gf_StringIsValid (string lp_string) {
    // Implementation
    if ((lp_string != "") && (lp_string != null)) {
        return true;
    }
    else {
        return false;
    }
}

string lib6FD6BD78_gf_ConvertPointXYtoString (point lp_point, int lp_precision) {
    // Variable Declarations
    string lv_outputString;

    // Variable Initialization
    lv_outputString = "";

    // Implementation
    lv_outputString = (FixedToString(PointGetX(lp_point), lp_precision) + ", " + FixedToString(PointGetY(lp_point), lp_precision));
    return lv_outputString;
}

void lib6FD6BD78_gf_AddTimeToTimer (timer lp_timer, fixed lp_additionalTime) {
    // Implementation
    TimerStart(lp_timer, (TimerGetRemaining(lp_timer) + lp_additionalTime), false, c_timeGame);
}

void lib6FD6BD78_gf_HideAllUIFramesForPlayers (playergroup lp_playerGroup) {
    // Implementation
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCashPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCharacterSheetButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCreditsPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeErrorDisplayPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeInventoryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeLeaderPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMercenaryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeBattleReportPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeObjectivePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePingPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePlanetPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePurchasePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePylonButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeResearchPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeRoomPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeStatusUI, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeSupply, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTechGlossaryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTechTreePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTextTag, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeVictoryPanel, false);
}

bool lib6FD6BD78_gf_UnitHasBehaviorWithBehaviorFlag (unit lp_unit, int lp_behaviorFlag) {
    int auto452D5312_ae;
    int auto452D5312_ai;

    // Variable Declarations
    int lv_behaviorCount;
    string lv_pickedBehavior;
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((lp_unit == null)) {
        return false;
    }
    lv_behaviorCount = UnitBehaviorCountAll(lp_unit);
    auto452D5312_ae = lv_behaviorCount;
    auto452D5312_ai = 1;
    lv_i = 1;
    for ( ; ( (auto452D5312_ai >= 0 && lv_i <= auto452D5312_ae) || (auto452D5312_ai <= 0 && lv_i >= auto452D5312_ae) ) ; lv_i += auto452D5312_ai ) {
        lv_pickedBehavior = UnitBehaviorGet(lp_unit, lv_i);
        if ((UnitBehaviorHasFlag(lv_pickedBehavior, lp_behaviorFlag) == true)) {
            return true;
        }
    }
    return false;
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib6FD6BD78_InitLib_completed = false;

void lib6FD6BD78_InitLib () {
    if (lib6FD6BD78_InitLib_completed) {
        return;
    }

    lib6FD6BD78_InitLib_completed = true;

    lib6FD6BD78_InitLibraries();
}

